(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~814c0205"],{

/***/ "489m":
/*!*******************************************************************!*\
  !*** ./node_modules/aurelia-loader/dist/es2015/aurelia-loader.js ***!
  \*******************************************************************/
/*! exports provided: TemplateDependency, TemplateRegistryEntry, Loader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TemplateDependency\", function() { return TemplateDependency; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TemplateRegistryEntry\", function() { return TemplateRegistryEntry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Loader\", function() { return Loader; });\n/* harmony import */ var aurelia_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-path */ \"n+sw\");\n/* harmony import */ var aurelia_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aurelia-metadata */ \"SGXf\");\n\n\n\nlet TemplateDependency = class TemplateDependency {\n  constructor(src, name) {\n    this.src = src;\n    this.name = name;\n  }\n};\n\nlet TemplateRegistryEntry = class TemplateRegistryEntry {\n  constructor(address) {\n    this.templateIsLoaded = false;\n    this.factoryIsReady = false;\n    this.resources = null;\n    this.dependencies = null;\n\n    this.address = address;\n    this.onReady = null;\n    this._template = null;\n    this._factory = null;\n  }\n\n  get template() {\n    return this._template;\n  }\n\n  set template(value) {\n    let address = this.address;\n    let requires;\n    let current;\n    let src;\n    let dependencies;\n\n    this._template = value;\n    this.templateIsLoaded = true;\n\n    requires = value.content.querySelectorAll('require');\n    dependencies = this.dependencies = new Array(requires.length);\n\n    for (let i = 0, ii = requires.length; i < ii; ++i) {\n      current = requires[i];\n      src = current.getAttribute('from');\n\n      if (!src) {\n        throw new Error(`<require> element in ${address} has no \"from\" attribute.`);\n      }\n\n      dependencies[i] = new TemplateDependency(Object(aurelia_path__WEBPACK_IMPORTED_MODULE_0__[\"relativeToFile\"])(src, address), current.getAttribute('as'));\n\n      if (current.parentNode) {\n        current.parentNode.removeChild(current);\n      }\n    }\n  }\n\n  get factory() {\n    return this._factory;\n  }\n\n  set factory(value) {\n    this._factory = value;\n    this.factoryIsReady = true;\n  }\n\n  addDependency(src, name) {\n    let finalSrc = typeof src === 'string' ? Object(aurelia_path__WEBPACK_IMPORTED_MODULE_0__[\"relativeToFile\"])(src, this.address) : aurelia_metadata__WEBPACK_IMPORTED_MODULE_1__[\"Origin\"].get(src).moduleId;\n\n    this.dependencies.push(new TemplateDependency(finalSrc, name));\n  }\n};\n\nlet Loader = class Loader {\n  constructor() {\n    this.templateRegistry = {};\n  }\n\n  map(id, source) {\n    throw new Error('Loaders must implement map(id, source).');\n  }\n\n  normalizeSync(moduleId, relativeTo) {\n    throw new Error('Loaders must implement normalizeSync(moduleId, relativeTo).');\n  }\n\n  normalize(moduleId, relativeTo) {\n    throw new Error('Loaders must implement normalize(moduleId: string, relativeTo: string): Promise<string>.');\n  }\n\n  loadModule(id) {\n    throw new Error('Loaders must implement loadModule(id).');\n  }\n\n  loadAllModules(ids) {\n    throw new Error('Loader must implement loadAllModules(ids).');\n  }\n\n  loadTemplate(url) {\n    throw new Error('Loader must implement loadTemplate(url).');\n  }\n\n  loadText(url) {\n    throw new Error('Loader must implement loadText(url).');\n  }\n\n  applyPluginToUrl(url, pluginName) {\n    throw new Error('Loader must implement applyPluginToUrl(url, pluginName).');\n  }\n\n  addPlugin(pluginName, implementation) {\n    throw new Error('Loader must implement addPlugin(pluginName, implementation).');\n  }\n\n  getOrCreateTemplateRegistryEntry(address) {\n    return this.templateRegistry[address] || (this.templateRegistry[address] = new TemplateRegistryEntry(address));\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg5bS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWxvYWRlci9kaXN0L2VzMjAxNS9hdXJlbGlhLWxvYWRlci5qcz9lM2NmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbGF0aXZlVG9GaWxlIH0gZnJvbSAnYXVyZWxpYS1wYXRoJztcbmltcG9ydCB7IE9yaWdpbiB9IGZyb20gJ2F1cmVsaWEtbWV0YWRhdGEnO1xuXG5leHBvcnQgbGV0IFRlbXBsYXRlRGVwZW5kZW5jeSA9IGNsYXNzIFRlbXBsYXRlRGVwZW5kZW5jeSB7XG4gIGNvbnN0cnVjdG9yKHNyYywgbmFtZSkge1xuICAgIHRoaXMuc3JjID0gc3JjO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgVGVtcGxhdGVSZWdpc3RyeUVudHJ5ID0gY2xhc3MgVGVtcGxhdGVSZWdpc3RyeUVudHJ5IHtcbiAgY29uc3RydWN0b3IoYWRkcmVzcykge1xuICAgIHRoaXMudGVtcGxhdGVJc0xvYWRlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmFjdG9yeUlzUmVhZHkgPSBmYWxzZTtcbiAgICB0aGlzLnJlc291cmNlcyA9IG51bGw7XG4gICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBudWxsO1xuXG4gICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICB0aGlzLm9uUmVhZHkgPSBudWxsO1xuICAgIHRoaXMuX3RlbXBsYXRlID0gbnVsbDtcbiAgICB0aGlzLl9mYWN0b3J5ID0gbnVsbDtcbiAgfVxuXG4gIGdldCB0ZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGU7XG4gIH1cblxuICBzZXQgdGVtcGxhdGUodmFsdWUpIHtcbiAgICBsZXQgYWRkcmVzcyA9IHRoaXMuYWRkcmVzcztcbiAgICBsZXQgcmVxdWlyZXM7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgbGV0IHNyYztcbiAgICBsZXQgZGVwZW5kZW5jaWVzO1xuXG4gICAgdGhpcy5fdGVtcGxhdGUgPSB2YWx1ZTtcbiAgICB0aGlzLnRlbXBsYXRlSXNMb2FkZWQgPSB0cnVlO1xuXG4gICAgcmVxdWlyZXMgPSB2YWx1ZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3JlcXVpcmUnKTtcbiAgICBkZXBlbmRlbmNpZXMgPSB0aGlzLmRlcGVuZGVuY2llcyA9IG5ldyBBcnJheShyZXF1aXJlcy5sZW5ndGgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcmVxdWlyZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgY3VycmVudCA9IHJlcXVpcmVzW2ldO1xuICAgICAgc3JjID0gY3VycmVudC5nZXRBdHRyaWJ1dGUoJ2Zyb20nKTtcblxuICAgICAgaWYgKCFzcmMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8cmVxdWlyZT4gZWxlbWVudCBpbiAke2FkZHJlc3N9IGhhcyBubyBcImZyb21cIiBhdHRyaWJ1dGUuYCk7XG4gICAgICB9XG5cbiAgICAgIGRlcGVuZGVuY2llc1tpXSA9IG5ldyBUZW1wbGF0ZURlcGVuZGVuY3kocmVsYXRpdmVUb0ZpbGUoc3JjLCBhZGRyZXNzKSwgY3VycmVudC5nZXRBdHRyaWJ1dGUoJ2FzJykpO1xuXG4gICAgICBpZiAoY3VycmVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGN1cnJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgZmFjdG9yeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmFjdG9yeTtcbiAgfVxuXG4gIHNldCBmYWN0b3J5KHZhbHVlKSB7XG4gICAgdGhpcy5fZmFjdG9yeSA9IHZhbHVlO1xuICAgIHRoaXMuZmFjdG9yeUlzUmVhZHkgPSB0cnVlO1xuICB9XG5cbiAgYWRkRGVwZW5kZW5jeShzcmMsIG5hbWUpIHtcbiAgICBsZXQgZmluYWxTcmMgPSB0eXBlb2Ygc3JjID09PSAnc3RyaW5nJyA/IHJlbGF0aXZlVG9GaWxlKHNyYywgdGhpcy5hZGRyZXNzKSA6IE9yaWdpbi5nZXQoc3JjKS5tb2R1bGVJZDtcblxuICAgIHRoaXMuZGVwZW5kZW5jaWVzLnB1c2gobmV3IFRlbXBsYXRlRGVwZW5kZW5jeShmaW5hbFNyYywgbmFtZSkpO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IExvYWRlciA9IGNsYXNzIExvYWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudGVtcGxhdGVSZWdpc3RyeSA9IHt9O1xuICB9XG5cbiAgbWFwKGlkLCBzb3VyY2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvYWRlcnMgbXVzdCBpbXBsZW1lbnQgbWFwKGlkLCBzb3VyY2UpLicpO1xuICB9XG5cbiAgbm9ybWFsaXplU3luYyhtb2R1bGVJZCwgcmVsYXRpdmVUbykge1xuICAgIHRocm93IG5ldyBFcnJvcignTG9hZGVycyBtdXN0IGltcGxlbWVudCBub3JtYWxpemVTeW5jKG1vZHVsZUlkLCByZWxhdGl2ZVRvKS4nKTtcbiAgfVxuXG4gIG5vcm1hbGl6ZShtb2R1bGVJZCwgcmVsYXRpdmVUbykge1xuICAgIHRocm93IG5ldyBFcnJvcignTG9hZGVycyBtdXN0IGltcGxlbWVudCBub3JtYWxpemUobW9kdWxlSWQ6IHN0cmluZywgcmVsYXRpdmVUbzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+LicpO1xuICB9XG5cbiAgbG9hZE1vZHVsZShpZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTG9hZGVycyBtdXN0IGltcGxlbWVudCBsb2FkTW9kdWxlKGlkKS4nKTtcbiAgfVxuXG4gIGxvYWRBbGxNb2R1bGVzKGlkcykge1xuICAgIHRocm93IG5ldyBFcnJvcignTG9hZGVyIG11c3QgaW1wbGVtZW50IGxvYWRBbGxNb2R1bGVzKGlkcykuJyk7XG4gIH1cblxuICBsb2FkVGVtcGxhdGUodXJsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdMb2FkZXIgbXVzdCBpbXBsZW1lbnQgbG9hZFRlbXBsYXRlKHVybCkuJyk7XG4gIH1cblxuICBsb2FkVGV4dCh1cmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvYWRlciBtdXN0IGltcGxlbWVudCBsb2FkVGV4dCh1cmwpLicpO1xuICB9XG5cbiAgYXBwbHlQbHVnaW5Ub1VybCh1cmwsIHBsdWdpbk5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvYWRlciBtdXN0IGltcGxlbWVudCBhcHBseVBsdWdpblRvVXJsKHVybCwgcGx1Z2luTmFtZSkuJyk7XG4gIH1cblxuICBhZGRQbHVnaW4ocGx1Z2luTmFtZSwgaW1wbGVtZW50YXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvYWRlciBtdXN0IGltcGxlbWVudCBhZGRQbHVnaW4ocGx1Z2luTmFtZSwgaW1wbGVtZW50YXRpb24pLicpO1xuICB9XG5cbiAgZ2V0T3JDcmVhdGVUZW1wbGF0ZVJlZ2lzdHJ5RW50cnkoYWRkcmVzcykge1xuICAgIHJldHVybiB0aGlzLnRlbXBsYXRlUmVnaXN0cnlbYWRkcmVzc10gfHwgKHRoaXMudGVtcGxhdGVSZWdpc3RyeVthZGRyZXNzXSA9IG5ldyBUZW1wbGF0ZVJlZ2lzdHJ5RW50cnkoYWRkcmVzcykpO1xuICB9XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///489m\n");

/***/ }),

/***/ "8NMn":
/*!***********************************************************************************!*\
  !*** ./node_modules/aurelia-loader-webpack/dist/es2015/aurelia-loader-webpack.js ***!
  \***********************************************************************************/
/*! exports provided: TextTemplateLoader, ensureOriginOnExports, WebpackLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Promise, module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextTemplateLoader\", function() { return TextTemplateLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ensureOriginOnExports\", function() { return ensureOriginOnExports; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebpackLoader\", function() { return WebpackLoader; });\n/* harmony import */ var aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-metadata */ \"SGXf\");\n/* harmony import */ var aurelia_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aurelia-loader */ \"489m\");\n/* harmony import */ var aurelia_pal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! aurelia-pal */ \"xIXs\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n/**\n* An implementation of the TemplateLoader interface implemented with text-based loading.\n*/\nclass TextTemplateLoader {\n    /**\n    * Loads a template.\n    * @param loader The loader that is requesting the template load.\n    * @param entry The TemplateRegistryEntry to load and populate with a template.\n    * @return A promise which resolves when the TemplateRegistryEntry is loaded with a template.\n    */\n    loadTemplate(loader, entry) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const text = yield loader.loadText(entry.address);\n            entry.template = aurelia_pal__WEBPACK_IMPORTED_MODULE_2__[\"DOM\"].createTemplateFromMarkup(text);\n        });\n    }\n}\nfunction ensureOriginOnExports(moduleExports, moduleId) {\n    let target = moduleExports;\n    let key;\n    let exportedValue;\n    if (target.__useDefault) {\n        target = target.default;\n    }\n    aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__[\"Origin\"].set(target, new aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__[\"Origin\"](moduleId, 'default'));\n    if (typeof target === 'object') {\n        for (key in target) {\n            exportedValue = target[key];\n            if (typeof exportedValue === 'function') {\n                aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__[\"Origin\"].set(exportedValue, new aurelia_metadata__WEBPACK_IMPORTED_MODULE_0__[\"Origin\"](moduleId, key));\n            }\n        }\n    }\n    return moduleExports;\n}\n/**\n* A default implementation of the Loader abstraction which works with webpack (extended common-js style).\n*/\nclass WebpackLoader extends aurelia_loader__WEBPACK_IMPORTED_MODULE_1__[\"Loader\"] {\n    constructor() {\n        super();\n        this.moduleRegistry = Object.create(null);\n        this.loaderPlugins = Object.create(null);\n        this.modulesBeingLoaded = new Map();\n        this.useTemplateLoader(new TextTemplateLoader());\n        this.addPlugin('template-registry-entry', {\n            fetch: (moduleId) => __awaiter(this, void 0, void 0, function* () {\n                // HMR:\n                if (false) {}\n                const entry = this.getOrCreateTemplateRegistryEntry(moduleId);\n                if (!entry.templateIsLoaded) {\n                    yield this.templateLoader.loadTemplate(this, entry);\n                }\n                return entry;\n            })\n        });\n        aurelia_pal__WEBPACK_IMPORTED_MODULE_2__[\"PLATFORM\"].eachModule = callback => {\n            const registry = __webpack_require__.c;\n            const cachedModuleIds = Object.getOwnPropertyNames(registry);\n            cachedModuleIds\n                // Note: we use .some here like a .forEach that can be \"break\"ed out of.\n                // It will stop iterating only when a truthy value is returned.\n                // Even though the docs say \"true\" explicitly, loader-default also goes by truthy\n                // and this is to keep it consistent with that.\n                .some(moduleId => {\n                const moduleExports = registry[moduleId].exports;\n                if (typeof moduleExports === 'object') {\n                    return callback(moduleId, moduleExports);\n                }\n                return false;\n            });\n        };\n    }\n    _import(address, defaultHMR = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const addressParts = address.split('!');\n            const moduleId = addressParts.splice(addressParts.length - 1, 1)[0];\n            const loaderPlugin = addressParts.length === 1 ? addressParts[0] : null;\n            if (loaderPlugin) {\n                const plugin = this.loaderPlugins[loaderPlugin];\n                if (!plugin) {\n                    throw new Error(`Plugin ${loaderPlugin} is not registered in the loader.`);\n                }\n                if (false) {}\n                return yield plugin.fetch(moduleId);\n            }\n            if (__webpack_require__.m[moduleId]) {\n                if (defaultHMR && module.hot && this.hmrContext) {\n                    module.hot.accept(moduleId, () => this.hmrContext.handleModuleChange(moduleId, module.hot));\n                }\n                return __webpack_require__(moduleId);\n            }\n            const asyncModuleId = `async!${moduleId}`;\n            if (__webpack_require__.m[asyncModuleId]) {\n                if (defaultHMR && module.hot && this.hmrContext) {\n                    module.hot.accept(moduleId, () => this.hmrContext.handleModuleChange(moduleId, module.hot));\n                    module.hot.accept(asyncModuleId, () => this.hmrContext.handleModuleChange(moduleId, module.hot));\n                }\n                const callback = __webpack_require__(asyncModuleId);\n                return yield new Promise(callback);\n            }\n            throw new Error(`Unable to find module with ID: ${moduleId}`);\n        });\n    }\n    /**\n    * Maps a module id to a source.\n    * @param id The module id.\n    * @param source The source to map the module to.\n    */\n    map(id, source) { }\n    /**\n    * Normalizes a module id.\n    * @param moduleId The module id to normalize.\n    * @param relativeTo What the module id should be normalized relative to.\n    * @return The normalized module id.\n    */\n    normalizeSync(moduleId, relativeTo) {\n        return moduleId;\n    }\n    /**\n    * Normalizes a module id.\n    * @param moduleId The module id to normalize.\n    * @param relativeTo What the module id should be normalized relative to.\n    * @return The normalized module id.\n    */\n    normalize(moduleId, relativeTo) {\n        return Promise.resolve(moduleId);\n    }\n    /**\n    * Instructs the loader to use a specific TemplateLoader instance for loading templates\n    * @param templateLoader The instance of TemplateLoader to use for loading templates.\n    */\n    useTemplateLoader(templateLoader) {\n        this.templateLoader = templateLoader;\n    }\n    /**\n    * Loads a collection of modules.\n    * @param ids The set of module ids to load.\n    * @return A Promise for an array of loaded modules.\n    */\n    loadAllModules(ids) {\n        return Promise.all(ids.map(id => this.loadModule(id)));\n    }\n    /**\n    * Loads a module.\n    * @param moduleId The module ID to load.\n    * @return A Promise for the loaded module.\n    */\n    loadModule(moduleId, defaultHMR = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let existing = this.moduleRegistry[moduleId];\n            if (existing) {\n                return existing;\n            }\n            let beingLoaded = this.modulesBeingLoaded.get(moduleId);\n            if (beingLoaded) {\n                return beingLoaded;\n            }\n            beingLoaded = this._import(moduleId, defaultHMR);\n            this.modulesBeingLoaded.set(moduleId, beingLoaded);\n            const moduleExports = yield beingLoaded;\n            this.moduleRegistry[moduleId] = ensureOriginOnExports(moduleExports, moduleId);\n            this.modulesBeingLoaded.delete(moduleId);\n            return moduleExports;\n        });\n    }\n    /**\n    * Loads a template.\n    * @param url The url of the template to load.\n    * @return A Promise for a TemplateRegistryEntry containing the template.\n    */\n    loadTemplate(url) {\n        return this.loadModule(this.applyPluginToUrl(url, 'template-registry-entry'), false);\n    }\n    /**\n    * Loads a text-based resource.\n    * @param url The url of the text file to load.\n    * @return A Promise for text content.\n    */\n    loadText(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.loadModule(url, false);\n            if (result instanceof Array && result[0] instanceof Array && result.hasOwnProperty('toString')) {\n                // we're dealing with a file loaded using the css-loader:\n                return result.toString();\n            }\n            return result;\n        });\n    }\n    /**\n    * Alters a module id so that it includes a plugin loader.\n    * @param url The url of the module to load.\n    * @param pluginName The plugin to apply to the module id.\n    * @return The plugin-based module id.\n    */\n    applyPluginToUrl(url, pluginName) {\n        return `${pluginName}!${url}`;\n    }\n    /**\n    * Registers a plugin with the loader.\n    * @param pluginName The name of the plugin.\n    * @param implementation The plugin implementation.\n    */\n    addPlugin(pluginName, implementation) {\n        this.loaderPlugins[pluginName] = implementation;\n    }\n}\naurelia_pal__WEBPACK_IMPORTED_MODULE_2__[\"PLATFORM\"].Loader = WebpackLoader;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promise-polyfill */ \"B/eG\")[\"default\"], __webpack_require__(/*! ./../../../webpack/buildin/harmony-module.js */ \"3UD+\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8NMn\n");

/***/ }),

/***/ "AFiG":
/*!***************************************************************************************!*\
  !*** ./node_modules/aurelia-route-recognizer/dist/es2015/aurelia-route-recognizer.js ***!
  \***************************************************************************************/
/*! exports provided: State, StaticSegment, DynamicSegment, StarSegment, EpsilonSegment, RouteRecognizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"State\", function() { return State; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StaticSegment\", function() { return StaticSegment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DynamicSegment\", function() { return DynamicSegment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StarSegment\", function() { return StarSegment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EpsilonSegment\", function() { return EpsilonSegment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteRecognizer\", function() { return RouteRecognizer; });\n/* harmony import */ var aurelia_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-path */ \"n+sw\");\n\n\nlet State = class State {\n  constructor(charSpec) {\n    this.charSpec = charSpec;\n    this.nextStates = [];\n  }\n\n  get(charSpec) {\n    for (let child of this.nextStates) {\n      let isEqual = child.charSpec.validChars === charSpec.validChars && child.charSpec.invalidChars === charSpec.invalidChars;\n\n      if (isEqual) {\n        return child;\n      }\n    }\n\n    return undefined;\n  }\n\n  put(charSpec) {\n    let state = this.get(charSpec);\n\n    if (state) {\n      return state;\n    }\n\n    state = new State(charSpec);\n\n    this.nextStates.push(state);\n\n    if (charSpec.repeat) {\n      state.nextStates.push(state);\n    }\n\n    return state;\n  }\n\n  match(ch) {\n    let nextStates = this.nextStates;\n    let results = [];\n\n    for (let i = 0, l = nextStates.length; i < l; i++) {\n      let child = nextStates[i];\n      let charSpec = child.charSpec;\n\n      if (charSpec.validChars !== undefined) {\n        if (charSpec.validChars.indexOf(ch) !== -1) {\n          results.push(child);\n        }\n      } else if (charSpec.invalidChars !== undefined) {\n        if (charSpec.invalidChars.indexOf(ch) === -1) {\n          results.push(child);\n        }\n      }\n    }\n\n    return results;\n  }\n};\n\nconst specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\'];\n\nconst escapeRegex = new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'g');\n\nlet StaticSegment = class StaticSegment {\n  constructor(string, caseSensitive) {\n    this.string = string;\n    this.caseSensitive = caseSensitive;\n  }\n\n  eachChar(callback) {\n    let s = this.string;\n    for (let i = 0, ii = s.length; i < ii; ++i) {\n      let ch = s[i];\n      callback({ validChars: this.caseSensitive ? ch : ch.toUpperCase() + ch.toLowerCase() });\n    }\n  }\n\n  regex() {\n    return this.string.replace(escapeRegex, '\\\\$1');\n  }\n\n  generate() {\n    return this.string;\n  }\n};\n\nlet DynamicSegment = class DynamicSegment {\n  constructor(name, optional) {\n    this.name = name;\n    this.optional = optional;\n  }\n\n  eachChar(callback) {\n    callback({ invalidChars: '/', repeat: true });\n  }\n\n  regex() {\n    return '([^/]+)';\n  }\n\n  generate(params, consumed) {\n    consumed[this.name] = true;\n    return params[this.name];\n  }\n};\n\nlet StarSegment = class StarSegment {\n  constructor(name) {\n    this.name = name;\n  }\n\n  eachChar(callback) {\n    callback({ invalidChars: '', repeat: true });\n  }\n\n  regex() {\n    return '(.+)';\n  }\n\n  generate(params, consumed) {\n    consumed[this.name] = true;\n    return params[this.name];\n  }\n};\n\nlet EpsilonSegment = class EpsilonSegment {\n  eachChar() {}\n\n  regex() {\n    return '';\n  }\n\n  generate() {\n    return '';\n  }\n};\n\nlet RouteRecognizer = class RouteRecognizer {\n  constructor() {\n    this.rootState = new State();\n    this.names = {};\n    this.routes = new Map();\n  }\n\n  add(route) {\n    if (Array.isArray(route)) {\n      route.forEach(r => this.add(r));\n      return undefined;\n    }\n\n    let currentState = this.rootState;\n    let skippableStates = [];\n    let regex = '^';\n    let types = { statics: 0, dynamics: 0, stars: 0 };\n    let names = [];\n    let routeName = route.handler.name;\n    let isEmpty = true;\n    let segments = parse(route.path, names, types, route.caseSensitive);\n\n    for (let i = 0, ii = segments.length; i < ii; i++) {\n      let segment = segments[i];\n      if (segment instanceof EpsilonSegment) {\n        continue;\n      }\n\n      let [firstState, nextState] = addSegment(currentState, segment);\n\n      for (let j = 0, jj = skippableStates.length; j < jj; j++) {\n        skippableStates[j].nextStates.push(firstState);\n      }\n\n      if (segment.optional) {\n        skippableStates.push(nextState);\n        regex += `(?:/${segment.regex()})?`;\n      } else {\n        currentState = nextState;\n        regex += `/${segment.regex()}`;\n        skippableStates.length = 0;\n        isEmpty = false;\n      }\n    }\n\n    if (isEmpty) {\n      currentState = currentState.put({ validChars: '/' });\n      regex += '/?';\n    }\n\n    let handlers = [{ handler: route.handler, names: names }];\n\n    this.routes.set(route.handler, { segments, handlers });\n    if (routeName) {\n      let routeNames = Array.isArray(routeName) ? routeName : [routeName];\n      for (let i = 0; i < routeNames.length; i++) {\n        if (!(routeNames[i] in this.names)) {\n          this.names[routeNames[i]] = { segments, handlers };\n        }\n      }\n    }\n\n    for (let i = 0; i < skippableStates.length; i++) {\n      let state = skippableStates[i];\n      state.handlers = handlers;\n      state.regex = new RegExp(regex + '$', route.caseSensitive ? '' : 'i');\n      state.types = types;\n    }\n\n    currentState.handlers = handlers;\n    currentState.regex = new RegExp(regex + '$', route.caseSensitive ? '' : 'i');\n    currentState.types = types;\n\n    return currentState;\n  }\n\n  getRoute(nameOrRoute) {\n    return typeof nameOrRoute === 'string' ? this.names[nameOrRoute] : this.routes.get(nameOrRoute);\n  }\n\n  handlersFor(nameOrRoute) {\n    let route = this.getRoute(nameOrRoute);\n    if (!route) {\n      throw new Error(`There is no route named ${nameOrRoute}`);\n    }\n\n    return [...route.handlers];\n  }\n\n  hasRoute(nameOrRoute) {\n    return !!this.getRoute(nameOrRoute);\n  }\n\n  generate(nameOrRoute, params) {\n    let route = this.getRoute(nameOrRoute);\n    if (!route) {\n      throw new Error(`There is no route named ${nameOrRoute}`);\n    }\n\n    let handler = route.handlers[0].handler;\n    if (handler.generationUsesHref) {\n      return handler.href;\n    }\n\n    let routeParams = Object.assign({}, params);\n    let segments = route.segments;\n    let consumed = {};\n    let output = '';\n\n    for (let i = 0, l = segments.length; i < l; i++) {\n      let segment = segments[i];\n\n      if (segment instanceof EpsilonSegment) {\n        continue;\n      }\n\n      let segmentValue = segment.generate(routeParams, consumed);\n      if (segmentValue === null || segmentValue === undefined) {\n        if (!segment.optional) {\n          throw new Error(`A value is required for route parameter '${segment.name}' in route '${nameOrRoute}'.`);\n        }\n      } else {\n        output += '/';\n        output += segmentValue;\n      }\n    }\n\n    if (output.charAt(0) !== '/') {\n      output = '/' + output;\n    }\n\n    for (let param in consumed) {\n      delete routeParams[param];\n    }\n\n    let queryString = Object(aurelia_path__WEBPACK_IMPORTED_MODULE_0__[\"buildQueryString\"])(routeParams);\n    output += queryString ? `?${queryString}` : '';\n\n    return output;\n  }\n\n  recognize(path) {\n    let states = [this.rootState];\n    let queryParams = {};\n    let isSlashDropped = false;\n    let normalizedPath = path;\n\n    let queryStart = normalizedPath.indexOf('?');\n    if (queryStart !== -1) {\n      let queryString = normalizedPath.substr(queryStart + 1, normalizedPath.length);\n      normalizedPath = normalizedPath.substr(0, queryStart);\n      queryParams = Object(aurelia_path__WEBPACK_IMPORTED_MODULE_0__[\"parseQueryString\"])(queryString);\n    }\n\n    normalizedPath = decodeURI(normalizedPath);\n\n    if (normalizedPath.charAt(0) !== '/') {\n      normalizedPath = '/' + normalizedPath;\n    }\n\n    let pathLen = normalizedPath.length;\n    if (pathLen > 1 && normalizedPath.charAt(pathLen - 1) === '/') {\n      normalizedPath = normalizedPath.substr(0, pathLen - 1);\n      isSlashDropped = true;\n    }\n\n    for (let i = 0, l = normalizedPath.length; i < l; i++) {\n      states = recognizeChar(states, normalizedPath.charAt(i));\n      if (!states.length) {\n        break;\n      }\n    }\n\n    let solutions = [];\n    for (let i = 0, l = states.length; i < l; i++) {\n      if (states[i].handlers) {\n        solutions.push(states[i]);\n      }\n    }\n\n    states = sortSolutions(solutions);\n\n    let state = solutions[0];\n    if (state && state.handlers) {\n      if (isSlashDropped && state.regex.source.slice(-5) === '(.+)$') {\n        normalizedPath = normalizedPath + '/';\n      }\n\n      return findHandler(state, normalizedPath, queryParams);\n    }\n  }\n};\n\nlet RecognizeResults = class RecognizeResults {\n  constructor(queryParams) {\n    this.splice = Array.prototype.splice;\n    this.slice = Array.prototype.slice;\n    this.push = Array.prototype.push;\n    this.length = 0;\n    this.queryParams = queryParams || {};\n  }\n};\n\n\nfunction parse(route, names, types, caseSensitive) {\n  let normalizedRoute = route;\n  if (route.charAt(0) === '/') {\n    normalizedRoute = route.substr(1);\n  }\n\n  let results = [];\n\n  let splitRoute = normalizedRoute.split('/');\n  for (let i = 0, ii = splitRoute.length; i < ii; ++i) {\n    let segment = splitRoute[i];\n\n    let match = segment.match(/^:([^?]+)(\\?)?$/);\n    if (match) {\n      let [, name, optional] = match;\n      if (name.indexOf('=') !== -1) {\n        throw new Error(`Parameter ${name} in route ${route} has a default value, which is not supported.`);\n      }\n      results.push(new DynamicSegment(name, !!optional));\n      names.push(name);\n      types.dynamics++;\n      continue;\n    }\n\n    match = segment.match(/^\\*(.+)$/);\n    if (match) {\n      results.push(new StarSegment(match[1]));\n      names.push(match[1]);\n      types.stars++;\n    } else if (segment === '') {\n      results.push(new EpsilonSegment());\n    } else {\n      results.push(new StaticSegment(segment, caseSensitive));\n      types.statics++;\n    }\n  }\n\n  return results;\n}\n\nfunction sortSolutions(states) {\n  return states.sort((a, b) => {\n    if (a.types.stars !== b.types.stars) {\n      return a.types.stars - b.types.stars;\n    }\n\n    if (a.types.stars) {\n      if (a.types.statics !== b.types.statics) {\n        return b.types.statics - a.types.statics;\n      }\n      if (a.types.dynamics !== b.types.dynamics) {\n        return b.types.dynamics - a.types.dynamics;\n      }\n    }\n\n    if (a.types.dynamics !== b.types.dynamics) {\n      return a.types.dynamics - b.types.dynamics;\n    }\n\n    if (a.types.statics !== b.types.statics) {\n      return b.types.statics - a.types.statics;\n    }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states, ch) {\n  let nextStates = [];\n\n  for (let i = 0, l = states.length; i < l; i++) {\n    let state = states[i];\n    nextStates.push(...state.match(ch));\n  }\n\n  return nextStates;\n}\n\nfunction findHandler(state, path, queryParams) {\n  let handlers = state.handlers;\n  let regex = state.regex;\n  let captures = path.match(regex);\n  let currentCapture = 1;\n  let result = new RecognizeResults(queryParams);\n\n  for (let i = 0, l = handlers.length; i < l; i++) {\n    let handler = handlers[i];\n    let names = handler.names;\n    let params = {};\n\n    for (let j = 0, m = names.length; j < m; j++) {\n      params[names[j]] = captures[currentCapture++];\n    }\n\n    result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });\n  }\n\n  return result;\n}\n\nfunction addSegment(currentState, segment) {\n  let firstState = currentState.put({ validChars: '/' });\n  let nextState = firstState;\n  segment.eachChar(ch => {\n    nextState = nextState.put(ch);\n  });\n\n  return [firstState, nextState];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///AFiG\n");

/***/ }),

/***/ "IA8k":
/*!*******************************************************************!*\
  !*** ./node_modules/aurelia-router/dist/es2015/aurelia-router.js ***!
  \*******************************************************************/
/*! exports provided: ActivateNextStep, AppRouter, BuildNavigationPlanStep, CanActivateNextStep, CanDeactivatePreviousStep, CommitChangesStep, DeactivatePreviousStep, LoadRouteStep, NavModel, NavigationInstruction, Pipeline, PipelineProvider, PipelineSlotName, PipelineStatus, Redirect, RedirectToRoute, RouteLoader, Router, RouterConfiguration, RouterEvent, activationStrategy, isNavigationCommand */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Promise) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ActivateNextStep\", function() { return ActivateNextStep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AppRouter\", function() { return AppRouter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BuildNavigationPlanStep\", function() { return BuildNavigationPlanStep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CanActivateNextStep\", function() { return CanActivateNextStep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CanDeactivatePreviousStep\", function() { return CanDeactivatePreviousStep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CommitChangesStep\", function() { return CommitChangesStep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DeactivatePreviousStep\", function() { return DeactivatePreviousStep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoadRouteStep\", function() { return LoadRouteStep; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavModel\", function() { return NavModel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationInstruction\", function() { return NavigationInstruction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pipeline\", function() { return Pipeline; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PipelineProvider\", function() { return PipelineProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PipelineSlotName\", function() { return PipelineSlotName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PipelineStatus\", function() { return PipelineStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Redirect\", function() { return Redirect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RedirectToRoute\", function() { return RedirectToRoute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteLoader\", function() { return RouteLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Router\", function() { return Router; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterConfiguration\", function() { return RouterConfiguration; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterEvent\", function() { return RouterEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"activationStrategy\", function() { return activationStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNavigationCommand\", function() { return isNavigationCommand; });\n/* harmony import */ var aurelia_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-logging */ \"KKpb\");\n/* harmony import */ var aurelia_dependency_injection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aurelia-dependency-injection */ \"OeXm\");\n/* harmony import */ var aurelia_history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! aurelia-history */ \"UOa9\");\n/* harmony import */ var aurelia_route_recognizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! aurelia-route-recognizer */ \"AFiG\");\n/* harmony import */ var aurelia_event_aggregator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! aurelia-event-aggregator */ \"aurelia-event-aggregator\");\n\n\n\n\n\n\n/**\r\n * Class used to represent an instruction during a navigation.\r\n */\r\nclass NavigationInstruction {\r\n    constructor(init) {\r\n        /**\r\n         * Current built viewport plan of this nav instruction\r\n         */\r\n        this.plan = null;\r\n        this.options = {};\r\n        Object.assign(this, init);\r\n        this.params = this.params || {};\r\n        this.viewPortInstructions = {};\r\n        let ancestorParams = [];\r\n        let current = this;\r\n        do {\r\n            let currentParams = Object.assign({}, current.params);\r\n            if (current.config && current.config.hasChildRouter) {\r\n                // remove the param for the injected child route segment\r\n                delete currentParams[current.getWildCardName()];\r\n            }\r\n            ancestorParams.unshift(currentParams);\r\n            current = current.parentInstruction;\r\n        } while (current);\r\n        let allParams = Object.assign({}, this.queryParams, ...ancestorParams);\r\n        this.lifecycleArgs = [allParams, this.config, this];\r\n    }\r\n    /**\r\n     * Gets an array containing this instruction and all child instructions for the current navigation.\r\n     */\r\n    getAllInstructions() {\r\n        let instructions = [this];\r\n        let viewPortInstructions = this.viewPortInstructions;\r\n        for (let key in viewPortInstructions) {\r\n            let childInstruction = viewPortInstructions[key].childNavigationInstruction;\r\n            if (childInstruction) {\r\n                instructions.push(...childInstruction.getAllInstructions());\r\n            }\r\n        }\r\n        return instructions;\r\n    }\r\n    /**\r\n     * Gets an array containing the instruction and all child instructions for the previous navigation.\r\n     * Previous instructions are no longer available after navigation completes.\r\n     */\r\n    getAllPreviousInstructions() {\r\n        return this.getAllInstructions().map(c => c.previousInstruction).filter(c => c);\r\n    }\r\n    addViewPortInstruction(nameOrInitOptions, strategy, moduleId, component) {\r\n        let viewPortInstruction;\r\n        let viewPortName = typeof nameOrInitOptions === 'string' ? nameOrInitOptions : nameOrInitOptions.name;\r\n        const lifecycleArgs = this.lifecycleArgs;\r\n        const config = Object.assign({}, lifecycleArgs[1], { currentViewPort: viewPortName });\r\n        if (typeof nameOrInitOptions === 'string') {\r\n            viewPortInstruction = {\r\n                name: nameOrInitOptions,\r\n                strategy: strategy,\r\n                moduleId: moduleId,\r\n                component: component,\r\n                childRouter: component.childRouter,\r\n                lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]]\r\n            };\r\n        }\r\n        else {\r\n            viewPortInstruction = {\r\n                name: viewPortName,\r\n                strategy: nameOrInitOptions.strategy,\r\n                component: nameOrInitOptions.component,\r\n                moduleId: nameOrInitOptions.moduleId,\r\n                childRouter: nameOrInitOptions.component.childRouter,\r\n                lifecycleArgs: [lifecycleArgs[0], config, lifecycleArgs[2]]\r\n            };\r\n        }\r\n        return this.viewPortInstructions[viewPortName] = viewPortInstruction;\r\n    }\r\n    /**\r\n     * Gets the name of the route pattern's wildcard parameter, if applicable.\r\n     */\r\n    getWildCardName() {\r\n        // todo: potential issue, or at least unsafe typings\r\n        let configRoute = this.config.route;\r\n        let wildcardIndex = configRoute.lastIndexOf('*');\r\n        return configRoute.substr(wildcardIndex + 1);\r\n    }\r\n    /**\r\n     * Gets the path and query string created by filling the route\r\n     * pattern's wildcard parameter with the matching param.\r\n     */\r\n    getWildcardPath() {\r\n        let wildcardName = this.getWildCardName();\r\n        let path = this.params[wildcardName] || '';\r\n        let queryString = this.queryString;\r\n        if (queryString) {\r\n            path += '?' + queryString;\r\n        }\r\n        return path;\r\n    }\r\n    /**\r\n     * Gets the instruction's base URL, accounting for wildcard route parameters.\r\n     */\r\n    getBaseUrl() {\r\n        let $encodeURI = encodeURI;\r\n        let fragment = decodeURI(this.fragment);\r\n        if (fragment === '') {\r\n            let nonEmptyRoute = this.router.routes.find(route => {\r\n                return route.name === this.config.name &&\r\n                    route.route !== '';\r\n            });\r\n            if (nonEmptyRoute) {\r\n                fragment = nonEmptyRoute.route;\r\n            }\r\n        }\r\n        if (!this.params) {\r\n            return $encodeURI(fragment);\r\n        }\r\n        let wildcardName = this.getWildCardName();\r\n        let path = this.params[wildcardName] || '';\r\n        if (!path) {\r\n            return $encodeURI(fragment);\r\n        }\r\n        return $encodeURI(fragment.substr(0, fragment.lastIndexOf(path)));\r\n    }\r\n    /**\r\n     * Finalize a viewport instruction\r\n     * @internal\r\n     */\r\n    _commitChanges(waitToSwap) {\r\n        let router = this.router;\r\n        router.currentInstruction = this;\r\n        const previousInstruction = this.previousInstruction;\r\n        if (previousInstruction) {\r\n            previousInstruction.config.navModel.isActive = false;\r\n        }\r\n        this.config.navModel.isActive = true;\r\n        router.refreshNavigation();\r\n        let loads = [];\r\n        let delaySwaps = [];\r\n        let viewPortInstructions = this.viewPortInstructions;\r\n        for (let viewPortName in viewPortInstructions) {\r\n            let viewPortInstruction = viewPortInstructions[viewPortName];\r\n            let viewPort = router.viewPorts[viewPortName];\r\n            if (!viewPort) {\r\n                throw new Error(`There was no router-view found in the view for ${viewPortInstruction.moduleId}.`);\r\n            }\r\n            let childNavInstruction = viewPortInstruction.childNavigationInstruction;\r\n            if (viewPortInstruction.strategy === \"replace\" /* Replace */) {\r\n                if (childNavInstruction && childNavInstruction.parentCatchHandler) {\r\n                    loads.push(childNavInstruction._commitChanges(waitToSwap));\r\n                }\r\n                else {\r\n                    if (waitToSwap) {\r\n                        delaySwaps.push({ viewPort, viewPortInstruction });\r\n                    }\r\n                    loads.push(viewPort\r\n                        .process(viewPortInstruction, waitToSwap)\r\n                        .then(() => childNavInstruction\r\n                        ? childNavInstruction._commitChanges(waitToSwap)\r\n                        : Promise.resolve()));\r\n                }\r\n            }\r\n            else {\r\n                if (childNavInstruction) {\r\n                    loads.push(childNavInstruction._commitChanges(waitToSwap));\r\n                }\r\n            }\r\n        }\r\n        return Promise\r\n            .all(loads)\r\n            .then(() => {\r\n            delaySwaps.forEach(x => x.viewPort.swap(x.viewPortInstruction));\r\n            return null;\r\n        })\r\n            .then(() => prune(this));\r\n    }\r\n    /**@internal */\r\n    _updateTitle() {\r\n        let router = this.router;\r\n        let title = this._buildTitle(router.titleSeparator);\r\n        if (title) {\r\n            router.history.setTitle(title);\r\n        }\r\n    }\r\n    /**@internal */\r\n    _buildTitle(separator = ' | ') {\r\n        let title = '';\r\n        let childTitles = [];\r\n        let navModelTitle = this.config.navModel.title;\r\n        let instructionRouter = this.router;\r\n        let viewPortInstructions = this.viewPortInstructions;\r\n        if (navModelTitle) {\r\n            title = instructionRouter.transformTitle(navModelTitle);\r\n        }\r\n        for (let viewPortName in viewPortInstructions) {\r\n            let viewPortInstruction = viewPortInstructions[viewPortName];\r\n            let child_nav_instruction = viewPortInstruction.childNavigationInstruction;\r\n            if (child_nav_instruction) {\r\n                let childTitle = child_nav_instruction._buildTitle(separator);\r\n                if (childTitle) {\r\n                    childTitles.push(childTitle);\r\n                }\r\n            }\r\n        }\r\n        if (childTitles.length) {\r\n            title = childTitles.join(separator) + (title ? separator : '') + title;\r\n        }\r\n        if (instructionRouter.title) {\r\n            title += (title ? separator : '') + instructionRouter.transformTitle(instructionRouter.title);\r\n        }\r\n        return title;\r\n    }\r\n}\r\nconst prune = (instruction) => {\r\n    instruction.previousInstruction = null;\r\n    instruction.plan = null;\r\n};\n\n/**\r\n* Class for storing and interacting with a route's navigation settings.\r\n*/\r\nclass NavModel {\r\n    constructor(router, relativeHref) {\r\n        /**\r\n        * True if this nav item is currently active.\r\n        */\r\n        this.isActive = false;\r\n        /**\r\n        * The title.\r\n        */\r\n        this.title = null;\r\n        /**\r\n        * This nav item's absolute href.\r\n        */\r\n        this.href = null;\r\n        /**\r\n        * This nav item's relative href.\r\n        */\r\n        this.relativeHref = null;\r\n        /**\r\n        * Data attached to the route at configuration time.\r\n        */\r\n        this.settings = {};\r\n        /**\r\n        * The route config.\r\n        */\r\n        this.config = null;\r\n        this.router = router;\r\n        this.relativeHref = relativeHref;\r\n    }\r\n    /**\r\n    * Sets the route's title and updates document.title.\r\n    *  If the a navigation is in progress, the change will be applied\r\n    *  to document.title when the navigation completes.\r\n    *\r\n    * @param title The new title.\r\n    */\r\n    setTitle(title) {\r\n        this.title = title;\r\n        if (this.isActive) {\r\n            this.router.updateTitle();\r\n        }\r\n    }\r\n}\n\nfunction _normalizeAbsolutePath(path, hasPushState, absolute = false) {\r\n    if (!hasPushState && path[0] !== '#') {\r\n        path = '#' + path;\r\n    }\r\n    if (hasPushState && absolute) {\r\n        path = path.substring(1, path.length);\r\n    }\r\n    return path;\r\n}\r\nfunction _createRootedPath(fragment, baseUrl, hasPushState, absolute) {\r\n    if (isAbsoluteUrl.test(fragment)) {\r\n        return fragment;\r\n    }\r\n    let path = '';\r\n    if (baseUrl.length && baseUrl[0] !== '/') {\r\n        path += '/';\r\n    }\r\n    path += baseUrl;\r\n    if ((!path.length || path[path.length - 1] !== '/') && fragment[0] !== '/') {\r\n        path += '/';\r\n    }\r\n    if (path.length && path[path.length - 1] === '/' && fragment[0] === '/') {\r\n        path = path.substring(0, path.length - 1);\r\n    }\r\n    return _normalizeAbsolutePath(path + fragment, hasPushState, absolute);\r\n}\r\nfunction _resolveUrl(fragment, baseUrl, hasPushState) {\r\n    if (isRootedPath.test(fragment)) {\r\n        return _normalizeAbsolutePath(fragment, hasPushState);\r\n    }\r\n    return _createRootedPath(fragment, baseUrl, hasPushState);\r\n}\r\nfunction _ensureArrayWithSingleRoutePerConfig(config) {\r\n    let routeConfigs = [];\r\n    if (Array.isArray(config.route)) {\r\n        for (let i = 0, ii = config.route.length; i < ii; ++i) {\r\n            let current = Object.assign({}, config);\r\n            current.route = config.route[i];\r\n            routeConfigs.push(current);\r\n        }\r\n    }\r\n    else {\r\n        routeConfigs.push(Object.assign({}, config));\r\n    }\r\n    return routeConfigs;\r\n}\r\nconst isRootedPath = /^#?\\//;\r\nconst isAbsoluteUrl = /^([a-z][a-z0-9+\\-.]*:)?\\/\\//i;\n\n/**\r\n * Class used to configure a [[Router]] instance.\r\n *\r\n * @constructor\r\n */\r\nclass RouterConfiguration {\r\n    constructor() {\r\n        this.instructions = [];\r\n        this.options = {};\r\n        this.pipelineSteps = [];\r\n    }\r\n    /**\r\n     * Adds a step to be run during the [[Router]]'s navigation pipeline.\r\n     *\r\n     * @param name The name of the pipeline slot to insert the step into.\r\n     * @param step The pipeline step.\r\n     * @chainable\r\n     */\r\n    addPipelineStep(name, step) {\r\n        if (step === null || step === undefined) {\r\n            throw new Error('Pipeline step cannot be null or undefined.');\r\n        }\r\n        this.pipelineSteps.push({ name, step });\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a step to be run during the [[Router]]'s authorize pipeline slot.\r\n     *\r\n     * @param step The pipeline step.\r\n     * @chainable\r\n     */\r\n    addAuthorizeStep(step) {\r\n        return this.addPipelineStep(\"authorize\" /* Authorize */, step);\r\n    }\r\n    /**\r\n     * Adds a step to be run during the [[Router]]'s preActivate pipeline slot.\r\n     *\r\n     * @param step The pipeline step.\r\n     * @chainable\r\n     */\r\n    addPreActivateStep(step) {\r\n        return this.addPipelineStep(\"preActivate\" /* PreActivate */, step);\r\n    }\r\n    /**\r\n     * Adds a step to be run during the [[Router]]'s preRender pipeline slot.\r\n     *\r\n     * @param step The pipeline step.\r\n     * @chainable\r\n     */\r\n    addPreRenderStep(step) {\r\n        return this.addPipelineStep(\"preRender\" /* PreRender */, step);\r\n    }\r\n    /**\r\n     * Adds a step to be run during the [[Router]]'s postRender pipeline slot.\r\n     *\r\n     * @param step The pipeline step.\r\n     * @chainable\r\n     */\r\n    addPostRenderStep(step) {\r\n        return this.addPipelineStep(\"postRender\" /* PostRender */, step);\r\n    }\r\n    /**\r\n     * Configures a route that will be used if there is no previous location available on navigation cancellation.\r\n     *\r\n     * @param fragment The URL fragment to use as the navigation destination.\r\n     * @chainable\r\n     */\r\n    fallbackRoute(fragment) {\r\n        this._fallbackRoute = fragment;\r\n        return this;\r\n    }\r\n    /**\r\n     * Maps one or more routes to be registered with the router.\r\n     *\r\n     * @param route The [[RouteConfig]] to map, or an array of [[RouteConfig]] to map.\r\n     * @chainable\r\n     */\r\n    map(route) {\r\n        if (Array.isArray(route)) {\r\n            route.forEach(r => this.map(r));\r\n            return this;\r\n        }\r\n        return this.mapRoute(route);\r\n    }\r\n    /**\r\n     * Configures defaults to use for any view ports.\r\n     *\r\n     * @param viewPortConfig a view port configuration object to use as a\r\n     *  default, of the form { viewPortName: { moduleId } }.\r\n     * @chainable\r\n     */\r\n    useViewPortDefaults(viewPortConfig) {\r\n        this.viewPortDefaults = viewPortConfig;\r\n        return this;\r\n    }\r\n    /**\r\n     * Maps a single route to be registered with the router.\r\n     *\r\n     * @param route The [[RouteConfig]] to map.\r\n     * @chainable\r\n     */\r\n    mapRoute(config) {\r\n        this.instructions.push(router => {\r\n            let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);\r\n            let navModel;\r\n            for (let i = 0, ii = routeConfigs.length; i < ii; ++i) {\r\n                let routeConfig = routeConfigs[i];\r\n                routeConfig.settings = routeConfig.settings || {};\r\n                if (!navModel) {\r\n                    navModel = router.createNavModel(routeConfig);\r\n                }\r\n                router.addRoute(routeConfig, navModel);\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Registers an unknown route handler to be run when the URL fragment doesn't match any registered routes.\r\n     *\r\n     * @param config A string containing a moduleId to load, or a [[RouteConfig]], or a function that takes the\r\n     *  [[NavigationInstruction]] and selects a moduleId to load.\r\n     * @chainable\r\n     */\r\n    mapUnknownRoutes(config) {\r\n        this.unknownRouteConfig = config;\r\n        return this;\r\n    }\r\n    /**\r\n     * Applies the current configuration to the specified [[Router]].\r\n     *\r\n     * @param router The [[Router]] to apply the configuration to.\r\n     */\r\n    exportToRouter(router) {\r\n        let instructions = this.instructions;\r\n        for (let i = 0, ii = instructions.length; i < ii; ++i) {\r\n            instructions[i](router);\r\n        }\r\n        let { title, titleSeparator, unknownRouteConfig, _fallbackRoute, viewPortDefaults } = this;\r\n        if (title) {\r\n            router.title = title;\r\n        }\r\n        if (titleSeparator) {\r\n            router.titleSeparator = titleSeparator;\r\n        }\r\n        if (unknownRouteConfig) {\r\n            router.handleUnknownRoutes(unknownRouteConfig);\r\n        }\r\n        if (_fallbackRoute) {\r\n            router.fallbackRoute = _fallbackRoute;\r\n        }\r\n        if (viewPortDefaults) {\r\n            router.useViewPortDefaults(viewPortDefaults);\r\n        }\r\n        Object.assign(router.options, this.options);\r\n        let pipelineSteps = this.pipelineSteps;\r\n        let pipelineStepCount = pipelineSteps.length;\r\n        if (pipelineStepCount) {\r\n            if (!router.isRoot) {\r\n                throw new Error('Pipeline steps can only be added to the root router');\r\n            }\r\n            let pipelineProvider = router.pipelineProvider;\r\n            for (let i = 0, ii = pipelineStepCount; i < ii; ++i) {\r\n                let { name, step } = pipelineSteps[i];\r\n                pipelineProvider.addStep(name, step);\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * The primary class responsible for handling routing and navigation.\r\n */\r\nclass Router {\r\n    /**\r\n     * @param container The [[Container]] to use when child routers.\r\n     * @param history The [[History]] implementation to delegate navigation requests to.\r\n     */\r\n    constructor(container, history) {\r\n        /**\r\n         * The parent router, or null if this instance is not a child router.\r\n         */\r\n        this.parent = null;\r\n        this.options = {};\r\n        /**\r\n         * The defaults used when a viewport lacks specified content\r\n         */\r\n        this.viewPortDefaults = {};\r\n        /**\r\n         * Extension point to transform the document title before it is built and displayed.\r\n         * By default, child routers delegate to the parent router, and the app router\r\n         * returns the title unchanged.\r\n         */\r\n        this.transformTitle = (title) => {\r\n            if (this.parent) {\r\n                return this.parent.transformTitle(title);\r\n            }\r\n            return title;\r\n        };\r\n        this.container = container;\r\n        this.history = history;\r\n        this.reset();\r\n    }\r\n    /**\r\n     * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.\r\n     * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.\r\n     */\r\n    reset() {\r\n        this.viewPorts = {};\r\n        this.routes = [];\r\n        this.baseUrl = '';\r\n        this.isConfigured = false;\r\n        this.isNavigating = false;\r\n        this.isExplicitNavigation = false;\r\n        this.isExplicitNavigationBack = false;\r\n        this.isNavigatingFirst = false;\r\n        this.isNavigatingNew = false;\r\n        this.isNavigatingRefresh = false;\r\n        this.isNavigatingForward = false;\r\n        this.isNavigatingBack = false;\r\n        this.couldDeactivate = false;\r\n        this.navigation = [];\r\n        this.currentInstruction = null;\r\n        this.viewPortDefaults = {};\r\n        this._fallbackOrder = 100;\r\n        this._recognizer = new aurelia_route_recognizer__WEBPACK_IMPORTED_MODULE_3__[\"RouteRecognizer\"]();\r\n        this._childRecognizer = new aurelia_route_recognizer__WEBPACK_IMPORTED_MODULE_3__[\"RouteRecognizer\"]();\r\n        this._configuredPromise = new Promise(resolve => {\r\n            this._resolveConfiguredPromise = resolve;\r\n        });\r\n    }\r\n    /**\r\n     * Gets a value indicating whether or not this [[Router]] is the root in the router tree. I.e., it has no parent.\r\n     */\r\n    get isRoot() {\r\n        return !this.parent;\r\n    }\r\n    /**\r\n     * Registers a viewPort to be used as a rendering target for activated routes.\r\n     *\r\n     * @param viewPort The viewPort.\r\n     * @param name The name of the viewPort. 'default' if unspecified.\r\n     */\r\n    registerViewPort(viewPort, name) {\r\n        name = name || 'default';\r\n        this.viewPorts[name] = viewPort;\r\n    }\r\n    /**\r\n     * Returns a Promise that resolves when the router is configured.\r\n     */\r\n    ensureConfigured() {\r\n        return this._configuredPromise;\r\n    }\r\n    /**\r\n     * Configures the router.\r\n     *\r\n     * @param callbackOrConfig The [[RouterConfiguration]] or a callback that takes a [[RouterConfiguration]].\r\n     */\r\n    configure(callbackOrConfig) {\r\n        this.isConfigured = true;\r\n        let result = callbackOrConfig;\r\n        let config;\r\n        if (typeof callbackOrConfig === 'function') {\r\n            config = new RouterConfiguration();\r\n            result = callbackOrConfig(config);\r\n        }\r\n        return Promise\r\n            .resolve(result)\r\n            .then((c) => {\r\n            if (c && c.exportToRouter) {\r\n                config = c;\r\n            }\r\n            config.exportToRouter(this);\r\n            this.isConfigured = true;\r\n            this._resolveConfiguredPromise();\r\n        });\r\n    }\r\n    /**\r\n     * Navigates to a new location.\r\n     *\r\n     * @param fragment The URL fragment to use as the navigation destination.\r\n     * @param options The navigation options.\r\n     */\r\n    navigate(fragment, options) {\r\n        if (!this.isConfigured && this.parent) {\r\n            return this.parent.navigate(fragment, options);\r\n        }\r\n        this.isExplicitNavigation = true;\r\n        return this.history.navigate(_resolveUrl(fragment, this.baseUrl, this.history._hasPushState), options);\r\n    }\r\n    /**\r\n     * Navigates to a new location corresponding to the route and params specified. Equivallent to [[Router.generate]] followed\r\n     * by [[Router.navigate]].\r\n     *\r\n     * @param route The name of the route to use when generating the navigation location.\r\n     * @param params The route parameters to be used when populating the route pattern.\r\n     * @param options The navigation options.\r\n     */\r\n    navigateToRoute(route, params, options) {\r\n        let path = this.generate(route, params);\r\n        return this.navigate(path, options);\r\n    }\r\n    /**\r\n     * Navigates back to the most recent location in history.\r\n     */\r\n    navigateBack() {\r\n        this.isExplicitNavigationBack = true;\r\n        this.history.navigateBack();\r\n    }\r\n    /**\r\n     * Creates a child router of the current router.\r\n     *\r\n     * @param container The [[Container]] to provide to the child router. Uses the current [[Router]]'s [[Container]] if unspecified.\r\n     * @returns {Router} The new child Router.\r\n     */\r\n    createChild(container) {\r\n        let childRouter = new Router(container || this.container.createChild(), this.history);\r\n        childRouter.parent = this;\r\n        return childRouter;\r\n    }\r\n    /**\r\n     * Generates a URL fragment matching the specified route pattern.\r\n     *\r\n     * @param name The name of the route whose pattern should be used to generate the fragment.\r\n     * @param params The route params to be used to populate the route pattern.\r\n     * @param options If options.absolute = true, then absolute url will be generated; otherwise, it will be relative url.\r\n     * @returns {string} A string containing the generated URL fragment.\r\n     */\r\n    generate(nameOrRoute, params = {}, options = {}) {\r\n        // A child recognizer generates routes for potential child routes. Any potential child route is added\r\n        // to the childRoute property of params for the childRouter to recognize. When generating routes, we\r\n        // use the childRecognizer when childRoute params are available to generate a child router enabled route.\r\n        let recognizer = 'childRoute' in params ? this._childRecognizer : this._recognizer;\r\n        let hasRoute = recognizer.hasRoute(nameOrRoute);\r\n        if (!hasRoute) {\r\n            if (this.parent) {\r\n                return this.parent.generate(nameOrRoute, params, options);\r\n            }\r\n            throw new Error(`A route with name '${nameOrRoute}' could not be found. Check that \\`name: '${nameOrRoute}'\\` was specified in the route's config.`);\r\n        }\r\n        let path = recognizer.generate(nameOrRoute, params);\r\n        let rootedPath = _createRootedPath(path, this.baseUrl, this.history._hasPushState, options.absolute);\r\n        return options.absolute ? `${this.history.getAbsoluteRoot()}${rootedPath}` : rootedPath;\r\n    }\r\n    /**\r\n     * Creates a [[NavModel]] for the specified route config.\r\n     *\r\n     * @param config The route config.\r\n     */\r\n    createNavModel(config) {\r\n        let navModel = new NavModel(this, 'href' in config\r\n            ? config.href\r\n            // potential error when config.route is a string[] ?\r\n            : config.route);\r\n        navModel.title = config.title;\r\n        navModel.order = config.nav;\r\n        navModel.href = config.href;\r\n        navModel.settings = config.settings;\r\n        navModel.config = config;\r\n        return navModel;\r\n    }\r\n    /**\r\n     * Registers a new route with the router.\r\n     *\r\n     * @param config The [[RouteConfig]].\r\n     * @param navModel The [[NavModel]] to use for the route. May be omitted for single-pattern routes.\r\n     */\r\n    addRoute(config, navModel) {\r\n        if (Array.isArray(config.route)) {\r\n            let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);\r\n            // the following is wrong. todo: fix this after TS refactoring release\r\n            routeConfigs.forEach(this.addRoute.bind(this));\r\n            return;\r\n        }\r\n        validateRouteConfig(config);\r\n        if (!('viewPorts' in config) && !config.navigationStrategy) {\r\n            config.viewPorts = {\r\n                'default': {\r\n                    moduleId: config.moduleId,\r\n                    view: config.view\r\n                }\r\n            };\r\n        }\r\n        if (!navModel) {\r\n            navModel = this.createNavModel(config);\r\n        }\r\n        this.routes.push(config);\r\n        let path = config.route;\r\n        if (path.charAt(0) === '/') {\r\n            path = path.substr(1);\r\n        }\r\n        let caseSensitive = config.caseSensitive === true;\r\n        let state = this._recognizer.add({\r\n            path: path,\r\n            handler: config,\r\n            caseSensitive: caseSensitive\r\n        });\r\n        if (path) {\r\n            let settings = config.settings;\r\n            delete config.settings;\r\n            let withChild = JSON.parse(JSON.stringify(config));\r\n            config.settings = settings;\r\n            withChild.route = `${path}/*childRoute`;\r\n            withChild.hasChildRouter = true;\r\n            this._childRecognizer.add({\r\n                path: withChild.route,\r\n                handler: withChild,\r\n                caseSensitive: caseSensitive\r\n            });\r\n            withChild.navModel = navModel;\r\n            withChild.settings = config.settings;\r\n            withChild.navigationStrategy = config.navigationStrategy;\r\n        }\r\n        config.navModel = navModel;\r\n        let navigation = this.navigation;\r\n        if ((navModel.order || navModel.order === 0) && navigation.indexOf(navModel) === -1) {\r\n            if ((!navModel.href && navModel.href !== '') && (state.types.dynamics || state.types.stars)) {\r\n                throw new Error('Invalid route config for \"' + config.route + '\" : dynamic routes must specify an \"href:\" to be included in the navigation model.');\r\n            }\r\n            if (typeof navModel.order !== 'number') {\r\n                navModel.order = ++this._fallbackOrder;\r\n            }\r\n            navigation.push(navModel);\r\n            // this is a potential error / inconsistency between browsers\r\n            //\r\n            // MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\r\n            // If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other,\r\n            // but sorted with respect to all different elements.\r\n            // Note: the ECMAscript standard does not guarantee this behaviour,\r\n            // and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.\r\n            navigation.sort((a, b) => a.order - b.order);\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value indicating whether or not this [[Router]] or one of its ancestors has a route registered with the specified name.\r\n     *\r\n     * @param name The name of the route to check.\r\n     */\r\n    hasRoute(name) {\r\n        return !!(this._recognizer.hasRoute(name) || this.parent && this.parent.hasRoute(name));\r\n    }\r\n    /**\r\n     * Gets a value indicating whether or not this [[Router]] has a route registered with the specified name.\r\n     *\r\n     * @param name The name of the route to check.\r\n     */\r\n    hasOwnRoute(name) {\r\n        return this._recognizer.hasRoute(name);\r\n    }\r\n    /**\r\n     * Register a handler to use when the incoming URL fragment doesn't match any registered routes.\r\n     *\r\n     * @param config The moduleId, or a function that selects the moduleId, or a [[RouteConfig]].\r\n     */\r\n    handleUnknownRoutes(config) {\r\n        if (!config) {\r\n            throw new Error('Invalid unknown route handler');\r\n        }\r\n        this.catchAllHandler = instruction => {\r\n            return this\r\n                ._createRouteConfig(config, instruction)\r\n                .then(c => {\r\n                instruction.config = c;\r\n                return instruction;\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Updates the document title using the current navigation instruction.\r\n     */\r\n    updateTitle() {\r\n        let parentRouter = this.parent;\r\n        if (parentRouter) {\r\n            return parentRouter.updateTitle();\r\n        }\r\n        let currentInstruction = this.currentInstruction;\r\n        if (currentInstruction) {\r\n            currentInstruction._updateTitle();\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Updates the navigation routes with hrefs relative to the current location.\r\n     * Note: This method will likely move to a plugin in a future release.\r\n     */\r\n    refreshNavigation() {\r\n        let nav = this.navigation;\r\n        for (let i = 0, length = nav.length; i < length; i++) {\r\n            let current = nav[i];\r\n            if (!current.config.href) {\r\n                current.href = _createRootedPath(current.relativeHref, this.baseUrl, this.history._hasPushState);\r\n            }\r\n            else {\r\n                current.href = _normalizeAbsolutePath(current.config.href, this.history._hasPushState);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the default configuration for the view ports. This specifies how to\r\n     *  populate a view port for which no module is specified. The default is\r\n     *  an empty view/view-model pair.\r\n     */\r\n    useViewPortDefaults($viewPortDefaults) {\r\n        // a workaround to have strong typings while not requiring to expose interface ViewPortInstruction\r\n        let viewPortDefaults = $viewPortDefaults;\r\n        for (let viewPortName in viewPortDefaults) {\r\n            let viewPortConfig = viewPortDefaults[viewPortName];\r\n            this.viewPortDefaults[viewPortName] = {\r\n                moduleId: viewPortConfig.moduleId\r\n            };\r\n        }\r\n    }\r\n    /**@internal */\r\n    _refreshBaseUrl() {\r\n        let parentRouter = this.parent;\r\n        if (parentRouter) {\r\n            this.baseUrl = generateBaseUrl(parentRouter, parentRouter.currentInstruction);\r\n        }\r\n    }\r\n    /**@internal */\r\n    _createNavigationInstruction(url = '', parentInstruction = null) {\r\n        let fragment = url;\r\n        let queryString = '';\r\n        let queryIndex = url.indexOf('?');\r\n        if (queryIndex !== -1) {\r\n            fragment = url.substr(0, queryIndex);\r\n            queryString = url.substr(queryIndex + 1);\r\n        }\r\n        let urlRecognizationResults = this._recognizer.recognize(url);\r\n        if (!urlRecognizationResults || !urlRecognizationResults.length) {\r\n            urlRecognizationResults = this._childRecognizer.recognize(url);\r\n        }\r\n        let instructionInit = {\r\n            fragment,\r\n            queryString,\r\n            config: null,\r\n            parentInstruction,\r\n            previousInstruction: this.currentInstruction,\r\n            router: this,\r\n            options: {\r\n                compareQueryParams: this.options.compareQueryParams\r\n            }\r\n        };\r\n        let result;\r\n        if (urlRecognizationResults && urlRecognizationResults.length) {\r\n            let first = urlRecognizationResults[0];\r\n            let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\r\n                params: first.params,\r\n                queryParams: first.queryParams || urlRecognizationResults.queryParams,\r\n                config: first.config || first.handler\r\n            }));\r\n            if (typeof first.handler === 'function') {\r\n                result = evaluateNavigationStrategy(instruction, first.handler, first);\r\n            }\r\n            else if (first.handler && typeof first.handler.navigationStrategy === 'function') {\r\n                result = evaluateNavigationStrategy(instruction, first.handler.navigationStrategy, first.handler);\r\n            }\r\n            else {\r\n                result = Promise.resolve(instruction);\r\n            }\r\n        }\r\n        else if (this.catchAllHandler) {\r\n            let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\r\n                params: { path: fragment },\r\n                queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},\r\n                config: null // config will be created by the catchAllHandler\r\n            }));\r\n            result = evaluateNavigationStrategy(instruction, this.catchAllHandler);\r\n        }\r\n        else if (this.parent) {\r\n            let router = this._parentCatchAllHandler(this.parent);\r\n            if (router) {\r\n                let newParentInstruction = this._findParentInstructionFromRouter(router, parentInstruction);\r\n                let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\r\n                    params: { path: fragment },\r\n                    queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},\r\n                    router: router,\r\n                    parentInstruction: newParentInstruction,\r\n                    parentCatchHandler: true,\r\n                    config: null // config will be created by the chained parent catchAllHandler\r\n                }));\r\n                result = evaluateNavigationStrategy(instruction, router.catchAllHandler);\r\n            }\r\n        }\r\n        if (result && parentInstruction) {\r\n            this.baseUrl = generateBaseUrl(this.parent, parentInstruction);\r\n        }\r\n        return result || Promise.reject(new Error(`Route not found: ${url}`));\r\n    }\r\n    /**@internal */\r\n    _findParentInstructionFromRouter(router, instruction) {\r\n        if (instruction.router === router) {\r\n            instruction.fragment = router.baseUrl; // need to change the fragment in case of a redirect instead of moduleId\r\n            return instruction;\r\n        }\r\n        else if (instruction.parentInstruction) {\r\n            return this._findParentInstructionFromRouter(router, instruction.parentInstruction);\r\n        }\r\n        return undefined;\r\n    }\r\n    /**@internal */\r\n    _parentCatchAllHandler(router) {\r\n        if (router.catchAllHandler) {\r\n            return router;\r\n        }\r\n        else if (router.parent) {\r\n            return this._parentCatchAllHandler(router.parent);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _createRouteConfig(config, instruction) {\r\n        return Promise\r\n            .resolve(config)\r\n            .then((c) => {\r\n            if (typeof c === 'string') {\r\n                return { moduleId: c };\r\n            }\r\n            else if (typeof c === 'function') {\r\n                return c(instruction);\r\n            }\r\n            return c;\r\n        })\r\n            // typing here could be either RouteConfig or RedirectConfig\r\n            // but temporarily treat both as RouteConfig\r\n            // todo: improve typings precision\r\n            .then((c) => typeof c === 'string' ? { moduleId: c } : c)\r\n            .then((c) => {\r\n            c.route = instruction.params.path;\r\n            validateRouteConfig(c);\r\n            if (!c.navModel) {\r\n                c.navModel = this.createNavModel(c);\r\n            }\r\n            return c;\r\n        });\r\n    }\r\n}\r\n/* @internal exported for unit testing */\r\nconst generateBaseUrl = (router, instruction) => {\r\n    return `${router.baseUrl || ''}${instruction.getBaseUrl() || ''}`;\r\n};\r\n/* @internal exported for unit testing */\r\nconst validateRouteConfig = (config) => {\r\n    if (typeof config !== 'object') {\r\n        throw new Error('Invalid Route Config');\r\n    }\r\n    if (typeof config.route !== 'string') {\r\n        let name = config.name || '(no name)';\r\n        throw new Error('Invalid Route Config for \"' + name + '\": You must specify a \"route:\" pattern.');\r\n    }\r\n    if (!('redirect' in config || config.moduleId || config.navigationStrategy || config.viewPorts)) {\r\n        throw new Error('Invalid Route Config for \"' + config.route + '\": You must specify a \"moduleId:\", \"redirect:\", \"navigationStrategy:\", or \"viewPorts:\".');\r\n    }\r\n};\r\n/* @internal exported for unit testing */\r\nconst evaluateNavigationStrategy = (instruction, evaluator, context) => {\r\n    return Promise\r\n        .resolve(evaluator.call(context, instruction))\r\n        .then(() => {\r\n        if (!('viewPorts' in instruction.config)) {\r\n            instruction.config.viewPorts = {\r\n                'default': {\r\n                    moduleId: instruction.config.moduleId\r\n                }\r\n            };\r\n        }\r\n        return instruction;\r\n    });\r\n};\n\n/**@internal exported for unit testing */\r\nconst createNextFn = (instruction, steps) => {\r\n    let index = -1;\r\n    const next = function () {\r\n        index++;\r\n        if (index < steps.length) {\r\n            let currentStep = steps[index];\r\n            try {\r\n                return currentStep(instruction, next);\r\n            }\r\n            catch (e) {\r\n                return next.reject(e);\r\n            }\r\n        }\r\n        else {\r\n            return next.complete();\r\n        }\r\n    };\r\n    next.complete = createCompletionHandler(next, \"completed\" /* Completed */);\r\n    next.cancel = createCompletionHandler(next, \"canceled\" /* Canceled */);\r\n    next.reject = createCompletionHandler(next, \"rejected\" /* Rejected */);\r\n    return next;\r\n};\r\n/**@internal exported for unit testing */\r\nconst createCompletionHandler = (next, status) => {\r\n    return (output) => Promise\r\n        .resolve({\r\n        status,\r\n        output,\r\n        completed: status === \"completed\" /* Completed */\r\n    });\r\n};\n\n/**\r\n * The class responsible for managing and processing the navigation pipeline.\r\n */\r\nclass Pipeline {\r\n    constructor() {\r\n        /**\r\n         * The pipeline steps. And steps added via addStep will be converted to a function\r\n         * The actualy running functions with correct step contexts of this pipeline\r\n         */\r\n        this.steps = [];\r\n    }\r\n    /**\r\n     * Adds a step to the pipeline.\r\n     *\r\n     * @param step The pipeline step.\r\n     */\r\n    addStep(step) {\r\n        let run;\r\n        if (typeof step === 'function') {\r\n            run = step;\r\n        }\r\n        else if (typeof step.getSteps === 'function') {\r\n            // getSteps is to enable support open slots\r\n            // where devs can add multiple steps into the same slot name\r\n            let steps = step.getSteps();\r\n            for (let i = 0, l = steps.length; i < l; i++) {\r\n                this.addStep(steps[i]);\r\n            }\r\n            return this;\r\n        }\r\n        else {\r\n            run = step.run.bind(step);\r\n        }\r\n        this.steps.push(run);\r\n        return this;\r\n    }\r\n    /**\r\n     * Runs the pipeline.\r\n     *\r\n     * @param instruction The navigation instruction to process.\r\n     */\r\n    run(instruction) {\r\n        const nextFn = createNextFn(instruction, this.steps);\r\n        return nextFn();\r\n    }\r\n}\n\n/**\r\n* Determines if the provided object is a navigation command.\r\n* A navigation command is anything with a navigate method.\r\n*\r\n* @param obj The object to check.\r\n*/\r\nfunction isNavigationCommand(obj) {\r\n    return obj && typeof obj.navigate === 'function';\r\n}\r\n/**\r\n* Used during the activation lifecycle to cause a redirect.\r\n*/\r\nclass Redirect {\r\n    /**\r\n     * @param url The URL fragment to use as the navigation destination.\r\n     * @param options The navigation options.\r\n     */\r\n    constructor(url, options = {}) {\r\n        this.url = url;\r\n        this.options = Object.assign({ trigger: true, replace: true }, options);\r\n        this.shouldContinueProcessing = false;\r\n    }\r\n    /**\r\n     * Called by the activation system to set the child router.\r\n     *\r\n     * @param router The router.\r\n     */\r\n    setRouter(router) {\r\n        this.router = router;\r\n    }\r\n    /**\r\n     * Called by the navigation pipeline to navigate.\r\n     *\r\n     * @param appRouter The router to be redirected.\r\n     */\r\n    navigate(appRouter) {\r\n        let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);\r\n        navigatingRouter.navigate(this.url, this.options);\r\n    }\r\n}\r\n/**\r\n * Used during the activation lifecycle to cause a redirect to a named route.\r\n */\r\nclass RedirectToRoute {\r\n    /**\r\n     * @param route The name of the route.\r\n     * @param params The parameters to be sent to the activation method.\r\n     * @param options The options to use for navigation.\r\n     */\r\n    constructor(route, params = {}, options = {}) {\r\n        this.route = route;\r\n        this.params = params;\r\n        this.options = Object.assign({ trigger: true, replace: true }, options);\r\n        this.shouldContinueProcessing = false;\r\n    }\r\n    /**\r\n     * Called by the activation system to set the child router.\r\n     *\r\n     * @param router The router.\r\n     */\r\n    setRouter(router) {\r\n        this.router = router;\r\n    }\r\n    /**\r\n     * Called by the navigation pipeline to navigate.\r\n     *\r\n     * @param appRouter The router to be redirected.\r\n     */\r\n    navigate(appRouter) {\r\n        let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);\r\n        navigatingRouter.navigateToRoute(this.route, this.params, this.options);\r\n    }\r\n}\n\n/**\r\n * @internal exported for unit testing\r\n */\r\nfunction _buildNavigationPlan(instruction, forceLifecycleMinimum) {\r\n    let config = instruction.config;\r\n    if ('redirect' in config) {\r\n        return buildRedirectPlan(instruction);\r\n    }\r\n    const prevInstruction = instruction.previousInstruction;\r\n    const defaultViewPortConfigs = instruction.router.viewPortDefaults;\r\n    if (prevInstruction) {\r\n        return buildTransitionPlans(instruction, prevInstruction, defaultViewPortConfigs, forceLifecycleMinimum);\r\n    }\r\n    // first navigation, only need to prepare a few information for each viewport plan\r\n    const viewPortPlans = {};\r\n    let viewPortConfigs = config.viewPorts;\r\n    for (let viewPortName in viewPortConfigs) {\r\n        let viewPortConfig = viewPortConfigs[viewPortName];\r\n        if (viewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {\r\n            viewPortConfig = defaultViewPortConfigs[viewPortName];\r\n        }\r\n        viewPortPlans[viewPortName] = {\r\n            name: viewPortName,\r\n            strategy: \"replace\" /* Replace */,\r\n            config: viewPortConfig\r\n        };\r\n    }\r\n    return Promise.resolve(viewPortPlans);\r\n}\r\n/**\r\n * Build redirect plan based on config of a navigation instruction\r\n * @internal exported for unit testing\r\n */\r\nconst buildRedirectPlan = (instruction) => {\r\n    const config = instruction.config;\r\n    const router = instruction.router;\r\n    return router\r\n        ._createNavigationInstruction(config.redirect)\r\n        .then(redirectInstruction => {\r\n        const params = {};\r\n        const originalInstructionParams = instruction.params;\r\n        const redirectInstructionParams = redirectInstruction.params;\r\n        for (let key in redirectInstructionParams) {\r\n            // If the param on the redirect points to another param, e.g. { route: first/:this, redirect: second/:this }\r\n            let val = redirectInstructionParams[key];\r\n            if (typeof val === 'string' && val[0] === ':') {\r\n                val = val.slice(1);\r\n                // And if that param is found on the original instruction then use it\r\n                if (val in originalInstructionParams) {\r\n                    params[key] = originalInstructionParams[val];\r\n                }\r\n            }\r\n            else {\r\n                params[key] = redirectInstructionParams[key];\r\n            }\r\n        }\r\n        let redirectLocation = router.generate(redirectInstruction.config, params, instruction.options);\r\n        // Special handling for child routes\r\n        for (let key in originalInstructionParams) {\r\n            redirectLocation = redirectLocation.replace(`:${key}`, originalInstructionParams[key]);\r\n        }\r\n        let queryString = instruction.queryString;\r\n        if (queryString) {\r\n            redirectLocation += '?' + queryString;\r\n        }\r\n        return Promise.resolve(new Redirect(redirectLocation));\r\n    });\r\n};\r\n/**\r\n * @param viewPortPlans the Plan record that holds information about built plans\r\n * @internal exported for unit testing\r\n */\r\nconst buildTransitionPlans = (currentInstruction, previousInstruction, defaultViewPortConfigs, forceLifecycleMinimum) => {\r\n    let viewPortPlans = {};\r\n    let newInstructionConfig = currentInstruction.config;\r\n    let hasNewParams = hasDifferentParameterValues(previousInstruction, currentInstruction);\r\n    let pending = [];\r\n    let previousViewPortInstructions = previousInstruction.viewPortInstructions;\r\n    for (let viewPortName in previousViewPortInstructions) {\r\n        const prevViewPortInstruction = previousViewPortInstructions[viewPortName];\r\n        const prevViewPortComponent = prevViewPortInstruction.component;\r\n        const newInstructionViewPortConfigs = newInstructionConfig.viewPorts;\r\n        // if this is invoked on a viewport without any changes, based on new url,\r\n        // newViewPortConfig will be the existing viewport instruction\r\n        let nextViewPortConfig = viewPortName in newInstructionViewPortConfigs\r\n            ? newInstructionViewPortConfigs[viewPortName]\r\n            : prevViewPortInstruction;\r\n        if (nextViewPortConfig.moduleId === null && viewPortName in defaultViewPortConfigs) {\r\n            nextViewPortConfig = defaultViewPortConfigs[viewPortName];\r\n        }\r\n        const viewPortActivationStrategy = determineActivationStrategy(currentInstruction, prevViewPortInstruction, nextViewPortConfig, hasNewParams, forceLifecycleMinimum);\r\n        const viewPortPlan = viewPortPlans[viewPortName] = {\r\n            name: viewPortName,\r\n            // ViewPortInstruction can quack like a RouteConfig\r\n            config: nextViewPortConfig,\r\n            prevComponent: prevViewPortComponent,\r\n            prevModuleId: prevViewPortInstruction.moduleId,\r\n            strategy: viewPortActivationStrategy\r\n        };\r\n        // recursively build nav plans for all existing child routers/viewports of this viewport\r\n        // this is possible because existing child viewports and routers already have necessary information\r\n        // to process the wildcard path from parent instruction\r\n        if (viewPortActivationStrategy !== \"replace\" /* Replace */ && prevViewPortInstruction.childRouter) {\r\n            const path = currentInstruction.getWildcardPath();\r\n            const task = prevViewPortInstruction\r\n                .childRouter\r\n                ._createNavigationInstruction(path, currentInstruction)\r\n                .then((childInstruction) => {\r\n                viewPortPlan.childNavigationInstruction = childInstruction;\r\n                return _buildNavigationPlan(childInstruction, \r\n                // is it safe to assume viewPortPlan has not been changed from previous assignment?\r\n                // if so, can just use local variable viewPortPlanStrategy\r\n                // there could be user code modifying viewport plan during _createNavigationInstruction?\r\n                viewPortPlan.strategy === \"invoke-lifecycle\" /* InvokeLifecycle */)\r\n                    .then(childPlan => {\r\n                    if (childPlan instanceof Redirect) {\r\n                        return Promise.reject(childPlan);\r\n                    }\r\n                    childInstruction.plan = childPlan;\r\n                    // for bluebird ?\r\n                    return null;\r\n                });\r\n            });\r\n            pending.push(task);\r\n        }\r\n    }\r\n    return Promise.all(pending).then(() => viewPortPlans);\r\n};\r\n/**\r\n * @param newViewPortConfig if this is invoked on a viewport without any changes, based on new url, newViewPortConfig will be the existing viewport instruction\r\n * @internal exported for unit testing\r\n */\r\nconst determineActivationStrategy = (currentNavInstruction, prevViewPortInstruction, newViewPortConfig, \r\n// indicates whether there is difference between old and new url params\r\nhasNewParams, forceLifecycleMinimum) => {\r\n    let newInstructionConfig = currentNavInstruction.config;\r\n    let prevViewPortViewModel = prevViewPortInstruction.component.viewModel;\r\n    let viewPortPlanStrategy;\r\n    if (prevViewPortInstruction.moduleId !== newViewPortConfig.moduleId) {\r\n        viewPortPlanStrategy = \"replace\" /* Replace */;\r\n    }\r\n    else if ('determineActivationStrategy' in prevViewPortViewModel) {\r\n        viewPortPlanStrategy = prevViewPortViewModel.determineActivationStrategy(...currentNavInstruction.lifecycleArgs);\r\n    }\r\n    else if (newInstructionConfig.activationStrategy) {\r\n        viewPortPlanStrategy = newInstructionConfig.activationStrategy;\r\n    }\r\n    else if (hasNewParams || forceLifecycleMinimum) {\r\n        viewPortPlanStrategy = \"invoke-lifecycle\" /* InvokeLifecycle */;\r\n    }\r\n    else {\r\n        viewPortPlanStrategy = \"no-change\" /* NoChange */;\r\n    }\r\n    return viewPortPlanStrategy;\r\n};\r\n/**@internal exported for unit testing */\r\nconst hasDifferentParameterValues = (prev, next) => {\r\n    let prevParams = prev.params;\r\n    let nextParams = next.params;\r\n    let nextWildCardName = next.config.hasChildRouter ? next.getWildCardName() : null;\r\n    for (let key in nextParams) {\r\n        if (key === nextWildCardName) {\r\n            continue;\r\n        }\r\n        if (prevParams[key] !== nextParams[key]) {\r\n            return true;\r\n        }\r\n    }\r\n    for (let key in prevParams) {\r\n        if (key === nextWildCardName) {\r\n            continue;\r\n        }\r\n        if (prevParams[key] !== nextParams[key]) {\r\n            return true;\r\n        }\r\n    }\r\n    if (!next.options.compareQueryParams) {\r\n        return false;\r\n    }\r\n    let prevQueryParams = prev.queryParams;\r\n    let nextQueryParams = next.queryParams;\r\n    for (let key in nextQueryParams) {\r\n        if (prevQueryParams[key] !== nextQueryParams[key]) {\r\n            return true;\r\n        }\r\n    }\r\n    for (let key in prevQueryParams) {\r\n        if (prevQueryParams[key] !== nextQueryParams[key]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Transform a navigation instruction into viewport plan record object,\r\n * or a redirect request if user viewmodel demands\r\n */\r\nclass BuildNavigationPlanStep {\r\n    run(navigationInstruction, next) {\r\n        return _buildNavigationPlan(navigationInstruction)\r\n            .then(plan => {\r\n            if (plan instanceof Redirect) {\r\n                return next.cancel(plan);\r\n            }\r\n            navigationInstruction.plan = plan;\r\n            return next();\r\n        })\r\n            .catch(next.cancel);\r\n    }\r\n}\n\n/**\r\n * @internal Exported for unit testing\r\n */\r\nconst loadNewRoute = (routeLoader, navigationInstruction) => {\r\n    let loadingPlans = determineLoadingPlans(navigationInstruction);\r\n    let loadPromises = loadingPlans.map((loadingPlan) => loadRoute(routeLoader, loadingPlan.navigationInstruction, loadingPlan.viewPortPlan));\r\n    return Promise.all(loadPromises);\r\n};\r\n/**\r\n * @internal Exported for unit testing\r\n */\r\nconst determineLoadingPlans = (navigationInstruction, loadingPlans = []) => {\r\n    let viewPortPlans = navigationInstruction.plan;\r\n    for (let viewPortName in viewPortPlans) {\r\n        let viewPortPlan = viewPortPlans[viewPortName];\r\n        let childNavInstruction = viewPortPlan.childNavigationInstruction;\r\n        if (viewPortPlan.strategy === \"replace\" /* Replace */) {\r\n            loadingPlans.push({ viewPortPlan, navigationInstruction });\r\n            if (childNavInstruction) {\r\n                determineLoadingPlans(childNavInstruction, loadingPlans);\r\n            }\r\n        }\r\n        else {\r\n            let viewPortInstruction = navigationInstruction.addViewPortInstruction({\r\n                name: viewPortName,\r\n                strategy: viewPortPlan.strategy,\r\n                moduleId: viewPortPlan.prevModuleId,\r\n                component: viewPortPlan.prevComponent\r\n            });\r\n            if (childNavInstruction) {\r\n                viewPortInstruction.childNavigationInstruction = childNavInstruction;\r\n                determineLoadingPlans(childNavInstruction, loadingPlans);\r\n            }\r\n        }\r\n    }\r\n    return loadingPlans;\r\n};\r\n/**\r\n * @internal Exported for unit testing\r\n */\r\nconst loadRoute = (routeLoader, navigationInstruction, viewPortPlan) => {\r\n    let planConfig = viewPortPlan.config;\r\n    let moduleId = planConfig ? planConfig.moduleId : null;\r\n    return loadComponent(routeLoader, navigationInstruction, planConfig)\r\n        .then((component) => {\r\n        let viewPortInstruction = navigationInstruction.addViewPortInstruction({\r\n            name: viewPortPlan.name,\r\n            strategy: viewPortPlan.strategy,\r\n            moduleId: moduleId,\r\n            component: component\r\n        });\r\n        let childRouter = component.childRouter;\r\n        if (childRouter) {\r\n            let path = navigationInstruction.getWildcardPath();\r\n            return childRouter\r\n                ._createNavigationInstruction(path, navigationInstruction)\r\n                .then((childInstruction) => {\r\n                viewPortPlan.childNavigationInstruction = childInstruction;\r\n                return _buildNavigationPlan(childInstruction)\r\n                    .then((childPlan) => {\r\n                    if (childPlan instanceof Redirect) {\r\n                        return Promise.reject(childPlan);\r\n                    }\r\n                    childInstruction.plan = childPlan;\r\n                    viewPortInstruction.childNavigationInstruction = childInstruction;\r\n                    return loadNewRoute(routeLoader, childInstruction);\r\n                });\r\n            });\r\n        }\r\n        // ts complains without this, though they are same\r\n        return void 0;\r\n    });\r\n};\r\n/**\r\n * Load a routed-component based on navigation instruction and route config\r\n * @internal exported for unit testing only\r\n */\r\nconst loadComponent = (routeLoader, navigationInstruction, config) => {\r\n    let router = navigationInstruction.router;\r\n    let lifecycleArgs = navigationInstruction.lifecycleArgs;\r\n    return Promise.resolve()\r\n        .then(() => routeLoader.loadRoute(router, config, navigationInstruction))\r\n        .then(\r\n    /**\r\n     * @param component an object carrying information about loaded route\r\n     * typically contains information about view model, childContainer, view and router\r\n     */\r\n    (component) => {\r\n        let { viewModel, childContainer } = component;\r\n        component.router = router;\r\n        component.config = config;\r\n        if ('configureRouter' in viewModel) {\r\n            let childRouter = childContainer.getChildRouter();\r\n            component.childRouter = childRouter;\r\n            return childRouter\r\n                .configure(c => viewModel.configureRouter(c, childRouter, lifecycleArgs[0], lifecycleArgs[1], lifecycleArgs[2]))\r\n                .then(() => component);\r\n        }\r\n        return component;\r\n    });\r\n};\n\n/**\r\n * Abstract class that is responsible for loading view / view model from a route config\r\n * The default implementation can be found in `aurelia-templating-router`\r\n */\r\nclass RouteLoader {\r\n    /**\r\n     * Load a route config based on its viewmodel / view configuration\r\n     */\r\n    // return typing: return typings used to be never\r\n    // as it was a throw. Changing it to Promise<any> should not cause any issues\r\n    loadRoute(router, config, navigationInstruction) {\r\n        throw new Error('Route loaders must implement \"loadRoute(router, config, navigationInstruction)\".');\r\n    }\r\n}\n\n/**\r\n * A pipeline step responsible for loading a route config of a navigation instruction\r\n */\r\nclass LoadRouteStep {\r\n    /**@internal */\r\n    static inject() { return [RouteLoader]; }\r\n    constructor(routeLoader) {\r\n        this.routeLoader = routeLoader;\r\n    }\r\n    /**\r\n     * Run the internal to load route config of a navigation instruction to prepare for next steps in the pipeline\r\n     */\r\n    run(navigationInstruction, next) {\r\n        return loadNewRoute(this.routeLoader, navigationInstruction)\r\n            .then(next, next.cancel);\r\n    }\r\n}\n\n/**\r\n * A pipeline step for instructing a piepline to commit changes on a navigation instruction\r\n */\r\nclass CommitChangesStep {\r\n    run(navigationInstruction, next) {\r\n        return navigationInstruction\r\n            ._commitChanges(/*wait to swap?*/ true)\r\n            .then(() => {\r\n            navigationInstruction._updateTitle();\r\n            return next();\r\n        });\r\n    }\r\n}\n\n/**\r\n * An optional interface describing the available activation strategies.\r\n * @internal Used internally.\r\n */\r\nvar InternalActivationStrategy;\r\n(function (InternalActivationStrategy) {\r\n    /**\r\n     * Reuse the existing view model, without invoking Router lifecycle hooks.\r\n     */\r\n    InternalActivationStrategy[\"NoChange\"] = \"no-change\";\r\n    /**\r\n     * Reuse the existing view model, invoking Router lifecycle hooks.\r\n     */\r\n    InternalActivationStrategy[\"InvokeLifecycle\"] = \"invoke-lifecycle\";\r\n    /**\r\n     * Replace the existing view model, invoking Router lifecycle hooks.\r\n     */\r\n    InternalActivationStrategy[\"Replace\"] = \"replace\";\r\n})(InternalActivationStrategy || (InternalActivationStrategy = {}));\r\n/**\r\n * The strategy to use when activating modules during navigation.\r\n */\r\n// kept for compat reason\r\nconst activationStrategy = {\r\n    noChange: \"no-change\" /* NoChange */,\r\n    invokeLifecycle: \"invoke-lifecycle\" /* InvokeLifecycle */,\r\n    replace: \"replace\" /* Replace */\r\n};\n\n/**\r\n * Recursively find list of deactivate-able view models\r\n * and invoke the either 'canDeactivate' or 'deactivate' on each\r\n * @internal exported for unit testing\r\n */\r\nconst processDeactivatable = (navigationInstruction, callbackName, next, ignoreResult) => {\r\n    let plan = navigationInstruction.plan;\r\n    let infos = findDeactivatable(plan, callbackName);\r\n    let i = infos.length; // query from inside out\r\n    function inspect(val) {\r\n        if (ignoreResult || shouldContinue(val)) {\r\n            return iterate();\r\n        }\r\n        return next.cancel(val);\r\n    }\r\n    function iterate() {\r\n        if (i--) {\r\n            try {\r\n                let viewModel = infos[i];\r\n                let result = viewModel[callbackName](navigationInstruction);\r\n                return processPotential(result, inspect, next.cancel);\r\n            }\r\n            catch (error) {\r\n                return next.cancel(error);\r\n            }\r\n        }\r\n        navigationInstruction.router.couldDeactivate = true;\r\n        return next();\r\n    }\r\n    return iterate();\r\n};\r\n/**\r\n * Recursively find and returns a list of deactivate-able view models\r\n * @internal exported for unit testing\r\n */\r\nconst findDeactivatable = (plan, callbackName, list = []) => {\r\n    for (let viewPortName in plan) {\r\n        let viewPortPlan = plan[viewPortName];\r\n        let prevComponent = viewPortPlan.prevComponent;\r\n        if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle || viewPortPlan.strategy === activationStrategy.replace)\r\n            && prevComponent) {\r\n            let viewModel = prevComponent.viewModel;\r\n            if (callbackName in viewModel) {\r\n                list.push(viewModel);\r\n            }\r\n        }\r\n        if (viewPortPlan.strategy === activationStrategy.replace && prevComponent) {\r\n            addPreviousDeactivatable(prevComponent, callbackName, list);\r\n        }\r\n        else if (viewPortPlan.childNavigationInstruction) {\r\n            findDeactivatable(viewPortPlan.childNavigationInstruction.plan, callbackName, list);\r\n        }\r\n    }\r\n    return list;\r\n};\r\n/**\r\n * @internal exported for unit testing\r\n */\r\nconst addPreviousDeactivatable = (component, callbackName, list) => {\r\n    let childRouter = component.childRouter;\r\n    if (childRouter && childRouter.currentInstruction) {\r\n        let viewPortInstructions = childRouter.currentInstruction.viewPortInstructions;\r\n        for (let viewPortName in viewPortInstructions) {\r\n            let viewPortInstruction = viewPortInstructions[viewPortName];\r\n            let prevComponent = viewPortInstruction.component;\r\n            let prevViewModel = prevComponent.viewModel;\r\n            if (callbackName in prevViewModel) {\r\n                list.push(prevViewModel);\r\n            }\r\n            addPreviousDeactivatable(prevComponent, callbackName, list);\r\n        }\r\n    }\r\n};\r\n/**\r\n * @internal exported for unit testing\r\n */\r\nconst processActivatable = (navigationInstruction, callbackName, next, ignoreResult) => {\r\n    let infos = findActivatable(navigationInstruction, callbackName);\r\n    let length = infos.length;\r\n    let i = -1; // query from top down\r\n    function inspect(val, router) {\r\n        if (ignoreResult || shouldContinue(val, router)) {\r\n            return iterate();\r\n        }\r\n        return next.cancel(val);\r\n    }\r\n    function iterate() {\r\n        i++;\r\n        if (i < length) {\r\n            try {\r\n                let current = infos[i];\r\n                let result = current.viewModel[callbackName](...current.lifecycleArgs);\r\n                return processPotential(result, (val) => inspect(val, current.router), next.cancel);\r\n            }\r\n            catch (error) {\r\n                return next.cancel(error);\r\n            }\r\n        }\r\n        return next();\r\n    }\r\n    return iterate();\r\n};\r\n/**\r\n * Find list of activatable view model and add to list (3rd parameter)\r\n * @internal exported for unit testing\r\n */\r\nconst findActivatable = (navigationInstruction, callbackName, list = [], router) => {\r\n    let plan = navigationInstruction.plan;\r\n    Object\r\n        .keys(plan)\r\n        .forEach((viewPortName) => {\r\n        let viewPortPlan = plan[viewPortName];\r\n        let viewPortInstruction = navigationInstruction.viewPortInstructions[viewPortName];\r\n        let viewPortComponent = viewPortInstruction.component;\r\n        let viewModel = viewPortComponent.viewModel;\r\n        if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle\r\n            || viewPortPlan.strategy === activationStrategy.replace)\r\n            && callbackName in viewModel) {\r\n            list.push({\r\n                viewModel,\r\n                lifecycleArgs: viewPortInstruction.lifecycleArgs,\r\n                router\r\n            });\r\n        }\r\n        let childNavInstruction = viewPortPlan.childNavigationInstruction;\r\n        if (childNavInstruction) {\r\n            findActivatable(childNavInstruction, callbackName, list, viewPortComponent.childRouter || router);\r\n        }\r\n    });\r\n    return list;\r\n};\r\nconst shouldContinue = (output, router) => {\r\n    if (output instanceof Error) {\r\n        return false;\r\n    }\r\n    if (isNavigationCommand(output)) {\r\n        if (typeof output.setRouter === 'function') {\r\n            output.setRouter(router);\r\n        }\r\n        return !!output.shouldContinueProcessing;\r\n    }\r\n    if (output === undefined) {\r\n        return true;\r\n    }\r\n    return output;\r\n};\r\n/**\r\n * wraps a subscription, allowing unsubscribe calls even if\r\n * the first value comes synchronously\r\n */\r\nclass SafeSubscription {\r\n    constructor(subscriptionFunc) {\r\n        this._subscribed = true;\r\n        this._subscription = subscriptionFunc(this);\r\n        if (!this._subscribed) {\r\n            this.unsubscribe();\r\n        }\r\n    }\r\n    get subscribed() {\r\n        return this._subscribed;\r\n    }\r\n    unsubscribe() {\r\n        if (this._subscribed && this._subscription) {\r\n            this._subscription.unsubscribe();\r\n        }\r\n        this._subscribed = false;\r\n    }\r\n}\r\n/**\r\n * A function to process return value from `activate`/`canActivate` steps\r\n * Supports observable/promise\r\n *\r\n * For observable, resolve at first next() or on complete()\r\n */\r\nconst processPotential = (obj, resolve, reject) => {\r\n    // if promise like\r\n    if (obj && typeof obj.then === 'function') {\r\n        return Promise.resolve(obj).then(resolve).catch(reject);\r\n    }\r\n    // if observable\r\n    if (obj && typeof obj.subscribe === 'function') {\r\n        let obs = obj;\r\n        return new SafeSubscription(sub => obs.subscribe({\r\n            next() {\r\n                if (sub.subscribed) {\r\n                    sub.unsubscribe();\r\n                    resolve(obj);\r\n                }\r\n            },\r\n            error(error) {\r\n                if (sub.subscribed) {\r\n                    sub.unsubscribe();\r\n                    reject(error);\r\n                }\r\n            },\r\n            complete() {\r\n                if (sub.subscribed) {\r\n                    sub.unsubscribe();\r\n                    resolve(obj);\r\n                }\r\n            }\r\n        }));\r\n    }\r\n    // else just resolve\r\n    try {\r\n        return resolve(obj);\r\n    }\r\n    catch (error) {\r\n        return reject(error);\r\n    }\r\n};\n\n/**\r\n * A pipeline step responsible for finding and activating method `canDeactivate` on a view model of a route\r\n */\r\nclass CanDeactivatePreviousStep {\r\n    run(navigationInstruction, next) {\r\n        return processDeactivatable(navigationInstruction, 'canDeactivate', next);\r\n    }\r\n}\r\n/**\r\n * A pipeline step responsible for finding and activating method `canActivate` on a view model of a route\r\n */\r\nclass CanActivateNextStep {\r\n    run(navigationInstruction, next) {\r\n        return processActivatable(navigationInstruction, 'canActivate', next);\r\n    }\r\n}\r\n/**\r\n * A pipeline step responsible for finding and activating method `deactivate` on a view model of a route\r\n */\r\nclass DeactivatePreviousStep {\r\n    run(navigationInstruction, next) {\r\n        return processDeactivatable(navigationInstruction, 'deactivate', next, true);\r\n    }\r\n}\r\n/**\r\n * A pipeline step responsible for finding and activating method `activate` on a view model of a route\r\n */\r\nclass ActivateNextStep {\r\n    run(navigationInstruction, next) {\r\n        return processActivatable(navigationInstruction, 'activate', next, true);\r\n    }\r\n}\n\n/**\r\n * A multi-slots Pipeline Placeholder Step for hooking into a pipeline execution\r\n */\r\nclass PipelineSlot {\r\n    constructor(container, name, alias) {\r\n        this.steps = [];\r\n        this.container = container;\r\n        this.slotName = name;\r\n        this.slotAlias = alias;\r\n    }\r\n    getSteps() {\r\n        return this.steps.map(x => this.container.get(x));\r\n    }\r\n}\r\n/**\r\n * Class responsible for creating the navigation pipeline.\r\n */\r\nclass PipelineProvider {\r\n    /**@internal */\r\n    static inject() { return [aurelia_dependency_injection__WEBPACK_IMPORTED_MODULE_1__[\"Container\"]]; }\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.steps = [\r\n            BuildNavigationPlanStep,\r\n            CanDeactivatePreviousStep,\r\n            LoadRouteStep,\r\n            createPipelineSlot(container, \"authorize\" /* Authorize */),\r\n            CanActivateNextStep,\r\n            createPipelineSlot(container, \"preActivate\" /* PreActivate */, 'modelbind'),\r\n            // NOTE: app state changes start below - point of no return\r\n            DeactivatePreviousStep,\r\n            ActivateNextStep,\r\n            createPipelineSlot(container, \"preRender\" /* PreRender */, 'precommit'),\r\n            CommitChangesStep,\r\n            createPipelineSlot(container, \"postRender\" /* PostRender */, 'postcomplete')\r\n        ];\r\n    }\r\n    /**\r\n     * Create the navigation pipeline.\r\n     */\r\n    createPipeline(useCanDeactivateStep = true) {\r\n        let pipeline = new Pipeline();\r\n        this.steps.forEach(step => {\r\n            if (useCanDeactivateStep || step !== CanDeactivatePreviousStep) {\r\n                pipeline.addStep(this.container.get(step));\r\n            }\r\n        });\r\n        return pipeline;\r\n    }\r\n    /**@internal */\r\n    _findStep(name) {\r\n        // Steps that are not PipelineSlots are constructor functions, and they will automatically fail. Probably.\r\n        return this.steps.find(x => x.slotName === name || x.slotAlias === name);\r\n    }\r\n    /**\r\n     * Adds a step into the pipeline at a known slot location.\r\n     */\r\n    addStep(name, step) {\r\n        let found = this._findStep(name);\r\n        if (found) {\r\n            let slotSteps = found.steps;\r\n            // prevent duplicates\r\n            if (!slotSteps.includes(step)) {\r\n                slotSteps.push(step);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(`Invalid pipeline slot name: ${name}.`);\r\n        }\r\n    }\r\n    /**\r\n     * Removes a step from a slot in the pipeline\r\n     */\r\n    removeStep(name, step) {\r\n        let slot = this._findStep(name);\r\n        if (slot) {\r\n            let slotSteps = slot.steps;\r\n            slotSteps.splice(slotSteps.indexOf(step), 1);\r\n        }\r\n    }\r\n    /**\r\n     * Clears all steps from a slot in the pipeline\r\n     * @internal\r\n     */\r\n    _clearSteps(name = '') {\r\n        let slot = this._findStep(name);\r\n        if (slot) {\r\n            slot.steps = [];\r\n        }\r\n    }\r\n    /**\r\n     * Resets all pipeline slots\r\n     */\r\n    reset() {\r\n        this._clearSteps(\"authorize\" /* Authorize */);\r\n        this._clearSteps(\"preActivate\" /* PreActivate */);\r\n        this._clearSteps(\"preRender\" /* PreRender */);\r\n        this._clearSteps(\"postRender\" /* PostRender */);\r\n    }\r\n}\r\n/**@internal */\r\nconst createPipelineSlot = (container, name, alias) => {\r\n    return new PipelineSlot(container, name, alias);\r\n};\n\nconst logger = Object(aurelia_logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"])('app-router');\r\n/**\r\n * The main application router.\r\n */\r\nclass AppRouter extends Router {\r\n    /**@internal */\r\n    static inject() { return [aurelia_dependency_injection__WEBPACK_IMPORTED_MODULE_1__[\"Container\"], aurelia_history__WEBPACK_IMPORTED_MODULE_2__[\"History\"], PipelineProvider, aurelia_event_aggregator__WEBPACK_IMPORTED_MODULE_4__[\"EventAggregator\"]]; }\r\n    constructor(container, history, pipelineProvider, events) {\r\n        super(container, history); // Note the super will call reset internally.\r\n        this.pipelineProvider = pipelineProvider;\r\n        this.events = events;\r\n    }\r\n    /**\r\n     * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.\r\n     * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.\r\n     */\r\n    reset() {\r\n        super.reset();\r\n        this.maxInstructionCount = 10;\r\n        if (!this._queue) {\r\n            this._queue = [];\r\n        }\r\n        else {\r\n            this._queue.length = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Loads the specified URL.\r\n     *\r\n     * @param url The URL fragment to load.\r\n     */\r\n    loadUrl(url) {\r\n        return this\r\n            ._createNavigationInstruction(url)\r\n            .then(instruction => this._queueInstruction(instruction))\r\n            .catch(error => {\r\n            logger.error(error);\r\n            restorePreviousLocation(this);\r\n        });\r\n    }\r\n    /**\r\n     * Registers a viewPort to be used as a rendering target for activated routes.\r\n     *\r\n     * @param viewPort The viewPort. This is typically a <router-view/> element in Aurelia default impl\r\n     * @param name The name of the viewPort. 'default' if unspecified.\r\n     */\r\n    registerViewPort(viewPort, name) {\r\n        // having strong typing without changing public API\r\n        const $viewPort = viewPort;\r\n        super.registerViewPort($viewPort, name);\r\n        // beside adding viewport to the registry of this instance\r\n        // AppRouter also configure routing/history to start routing functionality\r\n        // There are situation where there are more than 1 <router-view/> element at root view\r\n        // in that case, still only activate once via the following guard\r\n        if (!this.isActive) {\r\n            const viewModel = this._findViewModel($viewPort);\r\n            if ('configureRouter' in viewModel) {\r\n                // If there are more than one <router-view/> element at root view\r\n                // use this flag to guard against configure method being invoked multiple times\r\n                // this flag is set inside method configure\r\n                if (!this.isConfigured) {\r\n                    // replace the real resolve with a noop to guarantee that any action in base class Router\r\n                    // won't resolve the configurePromise prematurely\r\n                    const resolveConfiguredPromise = this._resolveConfiguredPromise;\r\n                    this._resolveConfiguredPromise = () => { };\r\n                    return this\r\n                        .configure(config => Promise\r\n                        .resolve(viewModel.configureRouter(config, this))\r\n                        // an issue with configure interface. Should be fixed there\r\n                        // todo: fix this via configure interface in router\r\n                        .then(() => config))\r\n                        .then(() => {\r\n                        this.activate();\r\n                        resolveConfiguredPromise();\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                this.activate();\r\n            }\r\n        }\r\n        // when a viewport is added dynamically to a root view that is already activated\r\n        // just process the navigation instruction\r\n        else {\r\n            this._dequeueInstruction();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Activates the router. This instructs the router to begin listening for history changes and processing instructions.\r\n     *\r\n     * @params options The set of options to activate the router with.\r\n     */\r\n    activate(options) {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n        this.isActive = true;\r\n        // route handler property is responsible for handling url change\r\n        // the interface of aurelia-history isn't clear on this perspective\r\n        this.options = Object.assign({ routeHandler: this.loadUrl.bind(this) }, this.options, options);\r\n        this.history.activate(this.options);\r\n        this._dequeueInstruction();\r\n    }\r\n    /**\r\n     * Deactivates the router.\r\n     */\r\n    deactivate() {\r\n        this.isActive = false;\r\n        this.history.deactivate();\r\n    }\r\n    /**@internal */\r\n    _queueInstruction(instruction) {\r\n        return new Promise((resolve) => {\r\n            instruction.resolve = resolve;\r\n            this._queue.unshift(instruction);\r\n            this._dequeueInstruction();\r\n        });\r\n    }\r\n    /**@internal */\r\n    _dequeueInstruction(instructionCount = 0) {\r\n        return Promise.resolve().then(() => {\r\n            if (this.isNavigating && !instructionCount) {\r\n                // ts complains about inconsistent returns without void 0\r\n                return void 0;\r\n            }\r\n            let instruction = this._queue.shift();\r\n            this._queue.length = 0;\r\n            if (!instruction) {\r\n                // ts complains about inconsistent returns without void 0\r\n                return void 0;\r\n            }\r\n            this.isNavigating = true;\r\n            let navtracker = this.history.getState('NavigationTracker');\r\n            let currentNavTracker = this.currentNavigationTracker;\r\n            if (!navtracker && !currentNavTracker) {\r\n                this.isNavigatingFirst = true;\r\n                this.isNavigatingNew = true;\r\n            }\r\n            else if (!navtracker) {\r\n                this.isNavigatingNew = true;\r\n            }\r\n            else if (!currentNavTracker) {\r\n                this.isNavigatingRefresh = true;\r\n            }\r\n            else if (currentNavTracker < navtracker) {\r\n                this.isNavigatingForward = true;\r\n            }\r\n            else if (currentNavTracker > navtracker) {\r\n                this.isNavigatingBack = true;\r\n            }\r\n            if (!navtracker) {\r\n                navtracker = Date.now();\r\n                this.history.setState('NavigationTracker', navtracker);\r\n            }\r\n            this.currentNavigationTracker = navtracker;\r\n            instruction.previousInstruction = this.currentInstruction;\r\n            let maxInstructionCount = this.maxInstructionCount;\r\n            if (!instructionCount) {\r\n                this.events.publish(\"router:navigation:processing\" /* Processing */, { instruction });\r\n            }\r\n            else if (instructionCount === maxInstructionCount - 1) {\r\n                logger.error(`${instructionCount + 1} navigation instructions have been attempted without success. Restoring last known good location.`);\r\n                restorePreviousLocation(this);\r\n                return this._dequeueInstruction(instructionCount + 1);\r\n            }\r\n            else if (instructionCount > maxInstructionCount) {\r\n                throw new Error('Maximum navigation attempts exceeded. Giving up.');\r\n            }\r\n            let pipeline = this.pipelineProvider.createPipeline(!this.couldDeactivate);\r\n            return pipeline\r\n                .run(instruction)\r\n                .then(result => processResult(instruction, result, instructionCount, this))\r\n                .catch(error => {\r\n                return { output: error instanceof Error ? error : new Error(error) };\r\n            })\r\n                .then(result => resolveInstruction(instruction, result, !!instructionCount, this));\r\n        });\r\n    }\r\n    /**@internal */\r\n    _findViewModel(viewPort) {\r\n        if (this.container.viewModel) {\r\n            return this.container.viewModel;\r\n        }\r\n        if (viewPort.container) {\r\n            let container = viewPort.container;\r\n            while (container) {\r\n                if (container.viewModel) {\r\n                    this.container.viewModel = container.viewModel;\r\n                    return container.viewModel;\r\n                }\r\n                container = container.parent;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nconst processResult = (instruction, result, instructionCount, router) => {\r\n    if (!(result && 'completed' in result && 'output' in result)) {\r\n        result = result || {};\r\n        result.output = new Error(`Expected router pipeline to return a navigation result, but got [${JSON.stringify(result)}] instead.`);\r\n    }\r\n    let finalResult = null;\r\n    let navigationCommandResult = null;\r\n    if (isNavigationCommand(result.output)) {\r\n        navigationCommandResult = result.output.navigate(router);\r\n    }\r\n    else {\r\n        finalResult = result;\r\n        if (!result.completed) {\r\n            if (result.output instanceof Error) {\r\n                logger.error(result.output.toString());\r\n            }\r\n            restorePreviousLocation(router);\r\n        }\r\n    }\r\n    return Promise.resolve(navigationCommandResult)\r\n        .then(_ => router._dequeueInstruction(instructionCount + 1))\r\n        .then(innerResult => finalResult || innerResult || result);\r\n};\r\nconst resolveInstruction = (instruction, result, isInnerInstruction, router) => {\r\n    instruction.resolve(result);\r\n    let eventAggregator = router.events;\r\n    let eventArgs = { instruction, result };\r\n    if (!isInnerInstruction) {\r\n        router.isNavigating = false;\r\n        router.isExplicitNavigation = false;\r\n        router.isExplicitNavigationBack = false;\r\n        router.isNavigatingFirst = false;\r\n        router.isNavigatingNew = false;\r\n        router.isNavigatingRefresh = false;\r\n        router.isNavigatingForward = false;\r\n        router.isNavigatingBack = false;\r\n        router.couldDeactivate = false;\r\n        let eventName;\r\n        if (result.output instanceof Error) {\r\n            eventName = \"router:navigation:error\" /* Error */;\r\n        }\r\n        else if (!result.completed) {\r\n            eventName = \"router:navigation:canceled\" /* Canceled */;\r\n        }\r\n        else {\r\n            let queryString = instruction.queryString ? ('?' + instruction.queryString) : '';\r\n            router.history.previousLocation = instruction.fragment + queryString;\r\n            eventName = \"router:navigation:success\" /* Success */;\r\n        }\r\n        eventAggregator.publish(eventName, eventArgs);\r\n        eventAggregator.publish(\"router:navigation:complete\" /* Complete */, eventArgs);\r\n    }\r\n    else {\r\n        eventAggregator.publish(\"router:navigation:child:complete\" /* ChildComplete */, eventArgs);\r\n    }\r\n    return result;\r\n};\r\nconst restorePreviousLocation = (router) => {\r\n    let previousLocation = router.history.previousLocation;\r\n    if (previousLocation) {\r\n        router.navigate(previousLocation, { trigger: false, replace: true });\r\n    }\r\n    else if (router.fallbackRoute) {\r\n        router.navigate(router.fallbackRoute, { trigger: true, replace: true });\r\n    }\r\n    else {\r\n        logger.error('Router navigation failed, and no previous location or fallbackRoute could be restored.');\r\n    }\r\n};\n\n/**\r\n* The status of a Pipeline.\r\n*/\r\nvar PipelineStatus;\r\n(function (PipelineStatus) {\r\n    PipelineStatus[\"Completed\"] = \"completed\";\r\n    PipelineStatus[\"Canceled\"] = \"canceled\";\r\n    PipelineStatus[\"Rejected\"] = \"rejected\";\r\n    PipelineStatus[\"Running\"] = \"running\";\r\n})(PipelineStatus || (PipelineStatus = {}));\n\n/**\r\n * A list of known router events used by the Aurelia router\r\n * to signal the pipeline has come to a certain state\r\n */\r\n// const enum is preserved in tsconfig\r\nvar RouterEvent;\r\n(function (RouterEvent) {\r\n    RouterEvent[\"Processing\"] = \"router:navigation:processing\";\r\n    RouterEvent[\"Error\"] = \"router:navigation:error\";\r\n    RouterEvent[\"Canceled\"] = \"router:navigation:canceled\";\r\n    RouterEvent[\"Complete\"] = \"router:navigation:complete\";\r\n    RouterEvent[\"Success\"] = \"router:navigation:success\";\r\n    RouterEvent[\"ChildComplete\"] = \"router:navigation:child:complete\";\r\n})(RouterEvent || (RouterEvent = {}));\n\n/**\r\n * Available pipeline slot names to insert interceptor into router pipeline\r\n */\r\n// const enum is preserved in tsconfig\r\nvar PipelineSlotName;\r\n(function (PipelineSlotName) {\r\n    /**\r\n     * Authorization slot. Invoked early in the pipeline,\r\n     * before `canActivate` hook of incoming route\r\n     */\r\n    PipelineSlotName[\"Authorize\"] = \"authorize\";\r\n    /**\r\n     * Pre-activation slot. Invoked early in the pipeline,\r\n     * Invoked timing:\r\n     *   - after Authorization slot\r\n     *   - after canActivate hook on new view model\r\n     *   - before deactivate hook on old view model\r\n     *   - before activate hook on new view model\r\n     */\r\n    PipelineSlotName[\"PreActivate\"] = \"preActivate\";\r\n    /**\r\n     * Pre-render slot. Invoked later in the pipeline\r\n     * Invokcation timing:\r\n     *   - after activate hook on new view model\r\n     *   - before commit step on new navigation instruction\r\n     */\r\n    PipelineSlotName[\"PreRender\"] = \"preRender\";\r\n    /**\r\n     * Post-render slot. Invoked last in the pipeline\r\n     */\r\n    PipelineSlotName[\"PostRender\"] = \"postRender\";\r\n})(PipelineSlotName || (PipelineSlotName = {}));\n\n\n//# sourceMappingURL=aurelia-router.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promise-polyfill */ \"B/eG\")[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///IA8k\n");

/***/ }),

/***/ "KKpb":
/*!*********************************************************************!*\
  !*** ./node_modules/aurelia-logging/dist/es2015/aurelia-logging.js ***!
  \*********************************************************************/
/*! exports provided: logLevel, getLogger, addAppender, removeAppender, getAppenders, clearAppenders, addCustomLevel, removeCustomLevel, setLevel, getLevel, Logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"logLevel\", function() { return logLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLogger\", function() { return getLogger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addAppender\", function() { return addAppender; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeAppender\", function() { return removeAppender; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAppenders\", function() { return getAppenders; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clearAppenders\", function() { return clearAppenders; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addCustomLevel\", function() { return addCustomLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeCustomLevel\", function() { return removeCustomLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setLevel\", function() { return setLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLevel\", function() { return getLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Logger\", function() { return Logger; });\n\nconst logLevel = {\n  none: 0,\n  error: 10,\n  warn: 20,\n  info: 30,\n  debug: 40\n};\n\nlet loggers = {};\nlet appenders = [];\nlet globalDefaultLevel = logLevel.none;\n\nconst standardLevels = ['none', 'error', 'warn', 'info', 'debug'];\nfunction isStandardLevel(level) {\n  return standardLevels.filter(l => l === level).length > 0;\n}\n\nfunction appendArgs() {\n  return [this, ...arguments];\n}\n\nfunction logFactory(level) {\n  const threshold = logLevel[level];\n  return function () {\n    if (this.level < threshold) {\n      return;\n    }\n\n    const args = appendArgs.apply(this, arguments);\n    let i = appenders.length;\n    while (i--) {\n      appenders[i][level](...args);\n    }\n  };\n}\n\nfunction logFactoryCustom(level) {\n  const threshold = logLevel[level];\n  return function () {\n    if (this.level < threshold) {\n      return;\n    }\n\n    const args = appendArgs.apply(this, arguments);\n    let i = appenders.length;\n    while (i--) {\n      const appender = appenders[i];\n      if (appender[level] !== undefined) {\n        appender[level](...args);\n      }\n    }\n  };\n}\n\nfunction connectLoggers() {\n  let proto = Logger.prototype;\n  for (let level in logLevel) {\n    if (isStandardLevel(level)) {\n      if (level !== 'none') {\n        proto[level] = logFactory(level);\n      }\n    } else {\n      proto[level] = logFactoryCustom(level);\n    }\n  }\n}\n\nfunction disconnectLoggers() {\n  let proto = Logger.prototype;\n  for (let level in logLevel) {\n    if (level !== 'none') {\n      proto[level] = function () {};\n    }\n  }\n}\n\nfunction getLogger(id) {\n  return loggers[id] || new Logger(id);\n}\n\nfunction addAppender(appender) {\n  if (appenders.push(appender) === 1) {\n    connectLoggers();\n  }\n}\n\nfunction removeAppender(appender) {\n  appenders = appenders.filter(a => a !== appender);\n}\n\nfunction getAppenders() {\n  return [...appenders];\n}\n\nfunction clearAppenders() {\n  appenders = [];\n  disconnectLoggers();\n}\n\nfunction addCustomLevel(name, value) {\n  if (logLevel[name] !== undefined) {\n    throw Error(`Log level \"${name}\" already exists.`);\n  }\n\n  if (isNaN(value)) {\n    throw Error('Value must be a number.');\n  }\n\n  logLevel[name] = value;\n\n  if (appenders.length > 0) {\n    connectLoggers();\n  } else {\n    Logger.prototype[name] = function () {};\n  }\n}\n\nfunction removeCustomLevel(name) {\n  if (logLevel[name] === undefined) {\n    return;\n  }\n\n  if (isStandardLevel(name)) {\n    throw Error(`Built-in log level \"${name}\" cannot be removed.`);\n  }\n\n  delete logLevel[name];\n  delete Logger.prototype[name];\n}\n\nfunction setLevel(level) {\n  globalDefaultLevel = level;\n  for (let key in loggers) {\n    loggers[key].setLevel(level);\n  }\n}\n\nfunction getLevel() {\n  return globalDefaultLevel;\n}\n\nlet Logger = class Logger {\n  constructor(id) {\n    let cached = loggers[id];\n    if (cached) {\n      return cached;\n    }\n\n    loggers[id] = this;\n    this.id = id;\n    this.level = globalDefaultLevel;\n  }\n\n  debug(message, ...rest) {}\n\n  info(message, ...rest) {}\n\n  warn(message, ...rest) {}\n\n  error(message, ...rest) {}\n\n  setLevel(level) {\n    this.level = level;\n  }\n\n  isDebugEnabled() {\n    return this.level === logLevel.debug;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS0twYi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWxvZ2dpbmcvZGlzdC9lczIwMTUvYXVyZWxpYS1sb2dnaW5nLmpzPzI4YWEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgY29uc3QgbG9nTGV2ZWwgPSB7XG4gIG5vbmU6IDAsXG4gIGVycm9yOiAxMCxcbiAgd2FybjogMjAsXG4gIGluZm86IDMwLFxuICBkZWJ1ZzogNDBcbn07XG5cbmxldCBsb2dnZXJzID0ge307XG5sZXQgYXBwZW5kZXJzID0gW107XG5sZXQgZ2xvYmFsRGVmYXVsdExldmVsID0gbG9nTGV2ZWwubm9uZTtcblxuY29uc3Qgc3RhbmRhcmRMZXZlbHMgPSBbJ25vbmUnLCAnZXJyb3InLCAnd2FybicsICdpbmZvJywgJ2RlYnVnJ107XG5mdW5jdGlvbiBpc1N0YW5kYXJkTGV2ZWwobGV2ZWwpIHtcbiAgcmV0dXJuIHN0YW5kYXJkTGV2ZWxzLmZpbHRlcihsID0+IGwgPT09IGxldmVsKS5sZW5ndGggPiAwO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRBcmdzKCkge1xuICByZXR1cm4gW3RoaXMsIC4uLmFyZ3VtZW50c107XG59XG5cbmZ1bmN0aW9uIGxvZ0ZhY3RvcnkobGV2ZWwpIHtcbiAgY29uc3QgdGhyZXNob2xkID0gbG9nTGV2ZWxbbGV2ZWxdO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmxldmVsIDwgdGhyZXNob2xkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYXJncyA9IGFwcGVuZEFyZ3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBsZXQgaSA9IGFwcGVuZGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgYXBwZW5kZXJzW2ldW2xldmVsXSguLi5hcmdzKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxvZ0ZhY3RvcnlDdXN0b20obGV2ZWwpIHtcbiAgY29uc3QgdGhyZXNob2xkID0gbG9nTGV2ZWxbbGV2ZWxdO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmxldmVsIDwgdGhyZXNob2xkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYXJncyA9IGFwcGVuZEFyZ3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBsZXQgaSA9IGFwcGVuZGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3QgYXBwZW5kZXIgPSBhcHBlbmRlcnNbaV07XG4gICAgICBpZiAoYXBwZW5kZXJbbGV2ZWxdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXBwZW5kZXJbbGV2ZWxdKC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29ubmVjdExvZ2dlcnMoKSB7XG4gIGxldCBwcm90byA9IExvZ2dlci5wcm90b3R5cGU7XG4gIGZvciAobGV0IGxldmVsIGluIGxvZ0xldmVsKSB7XG4gICAgaWYgKGlzU3RhbmRhcmRMZXZlbChsZXZlbCkpIHtcbiAgICAgIGlmIChsZXZlbCAhPT0gJ25vbmUnKSB7XG4gICAgICAgIHByb3RvW2xldmVsXSA9IGxvZ0ZhY3RvcnkobGV2ZWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwcm90b1tsZXZlbF0gPSBsb2dGYWN0b3J5Q3VzdG9tKGxldmVsKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlzY29ubmVjdExvZ2dlcnMoKSB7XG4gIGxldCBwcm90byA9IExvZ2dlci5wcm90b3R5cGU7XG4gIGZvciAobGV0IGxldmVsIGluIGxvZ0xldmVsKSB7XG4gICAgaWYgKGxldmVsICE9PSAnbm9uZScpIHtcbiAgICAgIHByb3RvW2xldmVsXSA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKGlkKSB7XG4gIHJldHVybiBsb2dnZXJzW2lkXSB8fCBuZXcgTG9nZ2VyKGlkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFwcGVuZGVyKGFwcGVuZGVyKSB7XG4gIGlmIChhcHBlbmRlcnMucHVzaChhcHBlbmRlcikgPT09IDEpIHtcbiAgICBjb25uZWN0TG9nZ2VycygpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBcHBlbmRlcihhcHBlbmRlcikge1xuICBhcHBlbmRlcnMgPSBhcHBlbmRlcnMuZmlsdGVyKGEgPT4gYSAhPT0gYXBwZW5kZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBwZW5kZXJzKCkge1xuICByZXR1cm4gWy4uLmFwcGVuZGVyc107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckFwcGVuZGVycygpIHtcbiAgYXBwZW5kZXJzID0gW107XG4gIGRpc2Nvbm5lY3RMb2dnZXJzKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRDdXN0b21MZXZlbChuYW1lLCB2YWx1ZSkge1xuICBpZiAobG9nTGV2ZWxbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IEVycm9yKGBMb2cgbGV2ZWwgXCIke25hbWV9XCIgYWxyZWFkeSBleGlzdHMuYCk7XG4gIH1cblxuICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgdGhyb3cgRXJyb3IoJ1ZhbHVlIG11c3QgYmUgYSBudW1iZXIuJyk7XG4gIH1cblxuICBsb2dMZXZlbFtuYW1lXSA9IHZhbHVlO1xuXG4gIGlmIChhcHBlbmRlcnMubGVuZ3RoID4gMCkge1xuICAgIGNvbm5lY3RMb2dnZXJzKCk7XG4gIH0gZWxzZSB7XG4gICAgTG9nZ2VyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICgpIHt9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDdXN0b21MZXZlbChuYW1lKSB7XG4gIGlmIChsb2dMZXZlbFtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzU3RhbmRhcmRMZXZlbChuYW1lKSkge1xuICAgIHRocm93IEVycm9yKGBCdWlsdC1pbiBsb2cgbGV2ZWwgXCIke25hbWV9XCIgY2Fubm90IGJlIHJlbW92ZWQuYCk7XG4gIH1cblxuICBkZWxldGUgbG9nTGV2ZWxbbmFtZV07XG4gIGRlbGV0ZSBMb2dnZXIucHJvdG90eXBlW25hbWVdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0TGV2ZWwobGV2ZWwpIHtcbiAgZ2xvYmFsRGVmYXVsdExldmVsID0gbGV2ZWw7XG4gIGZvciAobGV0IGtleSBpbiBsb2dnZXJzKSB7XG4gICAgbG9nZ2Vyc1trZXldLnNldExldmVsKGxldmVsKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGV2ZWwoKSB7XG4gIHJldHVybiBnbG9iYWxEZWZhdWx0TGV2ZWw7XG59XG5cbmV4cG9ydCBsZXQgTG9nZ2VyID0gY2xhc3MgTG9nZ2VyIHtcbiAgY29uc3RydWN0b3IoaWQpIHtcbiAgICBsZXQgY2FjaGVkID0gbG9nZ2Vyc1tpZF07XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG5cbiAgICBsb2dnZXJzW2lkXSA9IHRoaXM7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMubGV2ZWwgPSBnbG9iYWxEZWZhdWx0TGV2ZWw7XG4gIH1cblxuICBkZWJ1ZyhtZXNzYWdlLCAuLi5yZXN0KSB7fVxuXG4gIGluZm8obWVzc2FnZSwgLi4ucmVzdCkge31cblxuICB3YXJuKG1lc3NhZ2UsIC4uLnJlc3QpIHt9XG5cbiAgZXJyb3IobWVzc2FnZSwgLi4ucmVzdCkge31cblxuICBzZXRMZXZlbChsZXZlbCkge1xuICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgfVxuXG4gIGlzRGVidWdFbmFibGVkKCkge1xuICAgIHJldHVybiB0aGlzLmxldmVsID09PSBsb2dMZXZlbC5kZWJ1ZztcbiAgfVxufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///KKpb\n");

/***/ }),

/***/ "SGXf":
/*!***********************************************************************!*\
  !*** ./node_modules/aurelia-metadata/dist/es2015/aurelia-metadata.js ***!
  \***********************************************************************/
/*! exports provided: metadata, Origin, decorators, deprecated, mixin, protocol */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"metadata\", function() { return metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Origin\", function() { return Origin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"decorators\", function() { return decorators; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deprecated\", function() { return deprecated; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mixin\", function() { return mixin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"protocol\", function() { return protocol; });\n/* harmony import */ var aurelia_pal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-pal */ \"xIXs\");\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\nfunction isObject(val) {\n  return val && (typeof val === 'function' || typeof val === 'object');\n}\n\nconst metadata = {\n  resource: 'aurelia:resource',\n  paramTypes: 'design:paramtypes',\n  propertyType: 'design:type',\n  properties: 'design:properties',\n  get(metadataKey, target, targetKey) {\n    if (!isObject(target)) {\n      return undefined;\n    }\n    let result = metadata.getOwn(metadataKey, target, targetKey);\n    return result === undefined ? metadata.get(metadataKey, Object.getPrototypeOf(target), targetKey) : result;\n  },\n  getOwn(metadataKey, target, targetKey) {\n    if (!isObject(target)) {\n      return undefined;\n    }\n    return Reflect.getOwnMetadata(metadataKey, target, targetKey);\n  },\n  define(metadataKey, metadataValue, target, targetKey) {\n    Reflect.defineMetadata(metadataKey, metadataValue, target, targetKey);\n  },\n  getOrCreateOwn(metadataKey, Type, target, targetKey) {\n    let result = metadata.getOwn(metadataKey, target, targetKey);\n\n    if (result === undefined) {\n      result = new Type();\n      Reflect.defineMetadata(metadataKey, result, target, targetKey);\n    }\n\n    return result;\n  }\n};\n\nconst originStorage = new Map();\nconst unknownOrigin = Object.freeze({ moduleId: undefined, moduleMember: undefined });\n\nlet Origin = class Origin {\n  constructor(moduleId, moduleMember) {\n    this.moduleId = moduleId;\n    this.moduleMember = moduleMember;\n  }\n\n  static get(fn) {\n    let origin = originStorage.get(fn);\n\n    if (origin === undefined) {\n      aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"PLATFORM\"].eachModule((key, value) => {\n        if (typeof value === 'object') {\n          for (let name in value) {\n            try {\n              let exp = value[name];\n              if (exp === fn) {\n                originStorage.set(fn, origin = new Origin(key, name));\n                return true;\n              }\n            } catch (e) {}\n          }\n        }\n\n        if (value === fn) {\n          originStorage.set(fn, origin = new Origin(key, 'default'));\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    return origin || unknownOrigin;\n  }\n\n  static set(fn, origin) {\n    originStorage.set(fn, origin);\n  }\n};\n\nfunction decorators(...rest) {\n  let applicator = function (target, key, descriptor) {\n    let i = rest.length;\n\n    if (key) {\n      descriptor = descriptor || {\n        value: target[key],\n        writable: true,\n        configurable: true,\n        enumerable: true\n      };\n\n      while (i--) {\n        descriptor = rest[i](target, key, descriptor) || descriptor;\n      }\n\n      Object.defineProperty(target, key, descriptor);\n    } else {\n      while (i--) {\n        target = rest[i](target) || target;\n      }\n    }\n\n    return target;\n  };\n\n  applicator.on = applicator;\n  return applicator;\n}\n\nfunction deprecated(optionsOrTarget, maybeKey, maybeDescriptor) {\n  function decorator(target, key, descriptor) {\n    const methodSignature = `${target.constructor.name}#${key}`;\n    let options = maybeKey ? {} : optionsOrTarget || {};\n    let message = `DEPRECATION - ${methodSignature}`;\n\n    if (typeof descriptor.value !== 'function') {\n      throw new SyntaxError('Only methods can be marked as deprecated.');\n    }\n\n    if (options.message) {\n      message += ` - ${options.message}`;\n    }\n\n    return _extends({}, descriptor, {\n      value: function deprecationWrapper() {\n        if (options.error) {\n          throw new Error(message);\n        } else {\n          console.warn(message);\n        }\n\n        return descriptor.value.apply(this, arguments);\n      }\n    });\n  }\n\n  return maybeKey ? decorator(optionsOrTarget, maybeKey, maybeDescriptor) : decorator;\n}\n\nfunction mixin(behavior) {\n  const instanceKeys = Object.keys(behavior);\n\n  function _mixin(possible) {\n    let decorator = function (target) {\n      let resolvedTarget = typeof target === 'function' ? target.prototype : target;\n\n      let i = instanceKeys.length;\n      while (i--) {\n        let property = instanceKeys[i];\n        Object.defineProperty(resolvedTarget, property, {\n          value: behavior[property],\n          writable: true\n        });\n      }\n    };\n\n    return possible ? decorator(possible) : decorator;\n  }\n\n  return _mixin;\n}\n\nfunction alwaysValid() {\n  return true;\n}\nfunction noCompose() {}\n\nfunction ensureProtocolOptions(options) {\n  if (options === undefined) {\n    options = {};\n  } else if (typeof options === 'function') {\n    options = {\n      validate: options\n    };\n  }\n\n  if (!options.validate) {\n    options.validate = alwaysValid;\n  }\n\n  if (!options.compose) {\n    options.compose = noCompose;\n  }\n\n  return options;\n}\n\nfunction createProtocolValidator(validate) {\n  return function (target) {\n    let result = validate(target);\n    return result === true;\n  };\n}\n\nfunction createProtocolAsserter(name, validate) {\n  return function (target) {\n    let result = validate(target);\n    if (result !== true) {\n      throw new Error(result || `${name} was not correctly implemented.`);\n    }\n  };\n}\n\nfunction protocol(name, options) {\n  options = ensureProtocolOptions(options);\n\n  let result = function (target) {\n    let resolvedTarget = typeof target === 'function' ? target.prototype : target;\n\n    options.compose(resolvedTarget);\n    result.assert(resolvedTarget);\n\n    Object.defineProperty(resolvedTarget, 'protocol:' + name, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: true\n    });\n  };\n\n  result.validate = createProtocolValidator(options.validate);\n  result.assert = createProtocolAsserter(name, options.validate);\n\n  return result;\n}\n\nprotocol.create = function (name, options) {\n  options = ensureProtocolOptions(options);\n  let hidden = 'protocol:' + name;\n  let result = function (target) {\n    let decorator = protocol(name, options);\n    return target ? decorator(target) : decorator;\n  };\n\n  result.decorates = function (obj) {\n    return obj[hidden] === true;\n  };\n  result.validate = createProtocolValidator(options.validate);\n  result.assert = createProtocolAsserter(name, options.validate);\n\n  return result;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///SGXf\n");

/***/ }),

/***/ "UOa9":
/*!*********************************************************************!*\
  !*** ./node_modules/aurelia-history/dist/es2015/aurelia-history.js ***!
  \*********************************************************************/
/*! exports provided: History */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"History\", function() { return History; });\n\n\nfunction mi(name) {\n  throw new Error(`History must implement ${name}().`);\n}\n\nlet History = class History {\n  activate(options) {\n    mi('activate');\n  }\n\n  deactivate() {\n    mi('deactivate');\n  }\n\n  getAbsoluteRoot() {\n    mi('getAbsoluteRoot');\n  }\n\n  navigate(fragment, options) {\n    mi('navigate');\n  }\n\n  navigateBack() {\n    mi('navigateBack');\n  }\n\n  setTitle(title) {\n    mi('setTitle');\n  }\n\n  setState(key, value) {\n    mi('setState');\n  }\n\n  getState(key) {\n    mi('getState');\n  }\n\n  getHistoryIndex() {\n    mi('getHistoryIndex');\n  }\n\n  go(movement) {\n    mi('go');\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVU9hOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWhpc3RvcnkvZGlzdC9lczIwMTUvYXVyZWxpYS1oaXN0b3J5LmpzPzUwZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmZ1bmN0aW9uIG1pKG5hbWUpIHtcbiAgdGhyb3cgbmV3IEVycm9yKGBIaXN0b3J5IG11c3QgaW1wbGVtZW50ICR7bmFtZX0oKS5gKTtcbn1cblxuZXhwb3J0IGxldCBIaXN0b3J5ID0gY2xhc3MgSGlzdG9yeSB7XG4gIGFjdGl2YXRlKG9wdGlvbnMpIHtcbiAgICBtaSgnYWN0aXZhdGUnKTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgbWkoJ2RlYWN0aXZhdGUnKTtcbiAgfVxuXG4gIGdldEFic29sdXRlUm9vdCgpIHtcbiAgICBtaSgnZ2V0QWJzb2x1dGVSb290Jyk7XG4gIH1cblxuICBuYXZpZ2F0ZShmcmFnbWVudCwgb3B0aW9ucykge1xuICAgIG1pKCduYXZpZ2F0ZScpO1xuICB9XG5cbiAgbmF2aWdhdGVCYWNrKCkge1xuICAgIG1pKCduYXZpZ2F0ZUJhY2snKTtcbiAgfVxuXG4gIHNldFRpdGxlKHRpdGxlKSB7XG4gICAgbWkoJ3NldFRpdGxlJyk7XG4gIH1cblxuICBzZXRTdGF0ZShrZXksIHZhbHVlKSB7XG4gICAgbWkoJ3NldFN0YXRlJyk7XG4gIH1cblxuICBnZXRTdGF0ZShrZXkpIHtcbiAgICBtaSgnZ2V0U3RhdGUnKTtcbiAgfVxuXG4gIGdldEhpc3RvcnlJbmRleCgpIHtcbiAgICBtaSgnZ2V0SGlzdG9yeUluZGV4Jyk7XG4gIH1cblxuICBnbyhtb3ZlbWVudCkge1xuICAgIG1pKCdnbycpO1xuICB9XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///UOa9\n");

/***/ }),

/***/ "aurelia-history-browser":
/*!*************************************************************************************!*\
  !*** ./node_modules/aurelia-history-browser/dist/es2015/aurelia-history-browser.js ***!
  \*************************************************************************************/
/*! exports provided: BrowserHistory, DefaultLinkHandler, LinkHandler, configure */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrowserHistory\", function() { return BrowserHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultLinkHandler\", function() { return DefaultLinkHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinkHandler\", function() { return LinkHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"configure\", function() { return configure; });\n/* harmony import */ var aurelia_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-history */ \"UOa9\");\n/* harmony import */ var aurelia_pal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aurelia-pal */ \"xIXs\");\n\n\n\nclass LinkHandler {\r\n    activate(history) { }\r\n    deactivate() { }\r\n}\r\nclass DefaultLinkHandler extends LinkHandler {\r\n    constructor() {\r\n        super();\r\n        this.handler = (e) => {\r\n            let { shouldHandleEvent, href } = DefaultLinkHandler.getEventInfo(e);\r\n            if (shouldHandleEvent) {\r\n                e.preventDefault();\r\n                this.history.navigate(href);\r\n            }\r\n        };\r\n    }\r\n    activate(history) {\r\n        if (history._hasPushState) {\r\n            this.history = history;\r\n            aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].addEventListener('click', this.handler, true);\r\n        }\r\n    }\r\n    deactivate() {\r\n        aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].removeEventListener('click', this.handler, true);\r\n    }\r\n    static getEventInfo(event) {\r\n        let $event = event;\r\n        let info = {\r\n            shouldHandleEvent: false,\r\n            href: null,\r\n            anchor: null\r\n        };\r\n        let target = DefaultLinkHandler.findClosestAnchor($event.target);\r\n        if (!target || !DefaultLinkHandler.targetIsThisWindow(target)) {\r\n            return info;\r\n        }\r\n        if (hasAttribute(target, 'download')\r\n            || hasAttribute(target, 'router-ignore')\r\n            || hasAttribute(target, 'data-router-ignore')) {\r\n            return info;\r\n        }\r\n        if ($event.altKey || $event.ctrlKey || $event.metaKey || $event.shiftKey) {\r\n            return info;\r\n        }\r\n        let href = target.getAttribute('href');\r\n        info.anchor = target;\r\n        info.href = href;\r\n        let leftButtonClicked = $event.which === 1;\r\n        let isRelative = href && !(href.charAt(0) === '#' || (/^[a-z]+:/i).test(href));\r\n        info.shouldHandleEvent = leftButtonClicked && isRelative;\r\n        return info;\r\n    }\r\n    static findClosestAnchor(el) {\r\n        while (el) {\r\n            if (el.tagName === 'A') {\r\n                return el;\r\n            }\r\n            el = el.parentNode;\r\n        }\r\n    }\r\n    static targetIsThisWindow(target) {\r\n        let targetWindow = target.getAttribute('target');\r\n        let win = aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].global;\r\n        return !targetWindow ||\r\n            targetWindow === win.name ||\r\n            targetWindow === '_self';\r\n    }\r\n}\r\nconst hasAttribute = (el, attr) => el.hasAttribute(attr);\n\nclass BrowserHistory extends aurelia_history__WEBPACK_IMPORTED_MODULE_0__[\"History\"] {\r\n    constructor(linkHandler) {\r\n        super();\r\n        this._isActive = false;\r\n        this._checkUrlCallback = this._checkUrl.bind(this);\r\n        this.location = aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].location;\r\n        this.history = aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].history;\r\n        this.linkHandler = linkHandler;\r\n    }\r\n    activate(options) {\r\n        if (this._isActive) {\r\n            throw new Error('History has already been activated.');\r\n        }\r\n        let $history = this.history;\r\n        let wantsPushState = !!options.pushState;\r\n        this._isActive = true;\r\n        let normalizedOptions = this.options = Object.assign({}, { root: '/' }, this.options, options);\r\n        let rootUrl = this.root = ('/' + normalizedOptions.root + '/').replace(rootStripper, '/');\r\n        let wantsHashChange = this._wantsHashChange = normalizedOptions.hashChange !== false;\r\n        let hasPushState = this._hasPushState = !!(normalizedOptions.pushState && $history && $history.pushState);\r\n        let eventName;\r\n        if (hasPushState) {\r\n            eventName = 'popstate';\r\n        }\r\n        else if (wantsHashChange) {\r\n            eventName = 'hashchange';\r\n        }\r\n        aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].addEventListener(eventName, this._checkUrlCallback);\r\n        if (wantsHashChange && wantsPushState) {\r\n            let $location = this.location;\r\n            let atRoot = $location.pathname.replace(/[^\\/]$/, '$&/') === rootUrl;\r\n            if (!hasPushState && !atRoot) {\r\n                let fragment = this.fragment = this._getFragment(null, true);\r\n                $location.replace(rootUrl + $location.search + '#' + fragment);\r\n                return true;\r\n            }\r\n            else if (hasPushState && atRoot && $location.hash) {\r\n                let fragment = this.fragment = this._getHash().replace(routeStripper, '');\r\n                $history.replaceState({}, aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].title, rootUrl + fragment + $location.search);\r\n            }\r\n        }\r\n        if (!this.fragment) {\r\n            this.fragment = this._getFragment('');\r\n        }\r\n        this.linkHandler.activate(this);\r\n        if (!normalizedOptions.silent) {\r\n            return this._loadUrl('');\r\n        }\r\n    }\r\n    deactivate() {\r\n        const handler = this._checkUrlCallback;\r\n        aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].removeEventListener('popstate', handler);\r\n        aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].removeEventListener('hashchange', handler);\r\n        this._isActive = false;\r\n        this.linkHandler.deactivate();\r\n    }\r\n    getAbsoluteRoot() {\r\n        let $location = this.location;\r\n        let origin = createOrigin($location.protocol, $location.hostname, $location.port);\r\n        return `${origin}${this.root}`;\r\n    }\r\n    navigate(fragment, { trigger = true, replace = false } = {}) {\r\n        let location = this.location;\r\n        if (fragment && absoluteUrl.test(fragment)) {\r\n            location.href = fragment;\r\n            return true;\r\n        }\r\n        if (!this._isActive) {\r\n            return false;\r\n        }\r\n        fragment = this._getFragment(fragment || '');\r\n        if (this.fragment === fragment && !replace) {\r\n            return false;\r\n        }\r\n        this.fragment = fragment;\r\n        let url = this.root + fragment;\r\n        if (fragment === '' && url !== '/') {\r\n            url = url.slice(0, -1);\r\n        }\r\n        if (this._hasPushState) {\r\n            url = url.replace('//', '/');\r\n            this.history[replace ? 'replaceState' : 'pushState']({}, aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].title, url);\r\n        }\r\n        else if (this._wantsHashChange) {\r\n            updateHash(location, fragment, replace);\r\n        }\r\n        else {\r\n            location.assign(url);\r\n        }\r\n        if (trigger) {\r\n            return this._loadUrl(fragment);\r\n        }\r\n        return true;\r\n    }\r\n    navigateBack() {\r\n        this.history.back();\r\n    }\r\n    setTitle(title) {\r\n        aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].title = title;\r\n    }\r\n    setState(key, value) {\r\n        let $history = this.history;\r\n        let state = Object.assign({}, $history.state);\r\n        let { pathname, search, hash } = this.location;\r\n        state[key] = value;\r\n        $history.replaceState(state, null, `${pathname}${search}${hash}`);\r\n    }\r\n    getState(key) {\r\n        let state = Object.assign({}, this.history.state);\r\n        return state[key];\r\n    }\r\n    getHistoryIndex() {\r\n        let historyIndex = this.getState('HistoryIndex');\r\n        if (historyIndex === undefined) {\r\n            historyIndex = this.history.length - 1;\r\n            this.setState('HistoryIndex', historyIndex);\r\n        }\r\n        return historyIndex;\r\n    }\r\n    go(movement) {\r\n        this.history.go(movement);\r\n    }\r\n    _getHash() {\r\n        return this.location.hash.substr(1);\r\n    }\r\n    _getFragment(fragment, forcePushState) {\r\n        let rootUrl;\r\n        if (!fragment) {\r\n            if (this._hasPushState || !this._wantsHashChange || forcePushState) {\r\n                let location = this.location;\r\n                fragment = location.pathname + location.search;\r\n                rootUrl = this.root.replace(trailingSlash, '');\r\n                if (!fragment.indexOf(rootUrl)) {\r\n                    fragment = fragment.substr(rootUrl.length);\r\n                }\r\n            }\r\n            else {\r\n                fragment = this._getHash();\r\n            }\r\n        }\r\n        return '/' + fragment.replace(routeStripper, '');\r\n    }\r\n    _checkUrl() {\r\n        let current = this._getFragment('');\r\n        if (current !== this.fragment) {\r\n            this._loadUrl('');\r\n        }\r\n    }\r\n    _loadUrl(fragmentOverride) {\r\n        let fragment = this.fragment = this._getFragment(fragmentOverride);\r\n        return this.options.routeHandler ?\r\n            this.options.routeHandler(fragment) :\r\n            false;\r\n    }\r\n}\r\nBrowserHistory.inject = [LinkHandler];\r\nconst routeStripper = /^#?\\/*|\\s+$/g;\r\nconst rootStripper = /^\\/+|\\/+$/g;\r\nconst trailingSlash = /\\/$/;\r\nconst absoluteUrl = /^([a-z][a-z0-9+\\-.]*:)?\\/\\//i;\r\nfunction updateHash($location, fragment, replace) {\r\n    if (replace) {\r\n        let href = $location.href.replace(/(javascript:|#).*$/, '');\r\n        $location.replace(href + '#' + fragment);\r\n    }\r\n    else {\r\n        $location.hash = '#' + fragment;\r\n    }\r\n}\r\nfunction createOrigin(protocol, hostname, port) {\r\n    return `${protocol}//${hostname}${port ? ':' + port : ''}`;\r\n}\n\nfunction configure(config) {\r\n    const $config = config;\r\n    $config.singleton(aurelia_history__WEBPACK_IMPORTED_MODULE_0__[\"History\"], BrowserHistory);\r\n    $config.transient(LinkHandler, DefaultLinkHandler);\r\n}\n\n\n//# sourceMappingURL=aurelia-history-browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-history-browser\n");

/***/ }),

/***/ "aurelia-logging-console":
/*!*************************************************************************************!*\
  !*** ./node_modules/aurelia-logging-console/dist/es2015/aurelia-logging-console.js ***!
  \*************************************************************************************/
/*! exports provided: ConsoleAppender */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConsoleAppender\", function() { return ConsoleAppender; });\n\nlet ConsoleAppender = class ConsoleAppender {\n  debug(logger, ...rest) {\n    console.debug(`DEBUG [${logger.id}]`, ...rest);\n  }\n\n  info(logger, ...rest) {\n    console.info(`INFO [${logger.id}]`, ...rest);\n  }\n\n  warn(logger, ...rest) {\n    console.warn(`WARN [${logger.id}]`, ...rest);\n  }\n\n  error(logger, ...rest) {\n    console.error(`ERROR [${logger.id}]`, ...rest);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1sb2dnaW5nLWNvbnNvbGUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXVyZWxpYS1sb2dnaW5nLWNvbnNvbGUvZGlzdC9lczIwMTUvYXVyZWxpYS1sb2dnaW5nLWNvbnNvbGUuanM/MjExNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBsZXQgQ29uc29sZUFwcGVuZGVyID0gY2xhc3MgQ29uc29sZUFwcGVuZGVyIHtcbiAgZGVidWcobG9nZ2VyLCAuLi5yZXN0KSB7XG4gICAgY29uc29sZS5kZWJ1ZyhgREVCVUcgWyR7bG9nZ2VyLmlkfV1gLCAuLi5yZXN0KTtcbiAgfVxuXG4gIGluZm8obG9nZ2VyLCAuLi5yZXN0KSB7XG4gICAgY29uc29sZS5pbmZvKGBJTkZPIFske2xvZ2dlci5pZH1dYCwgLi4ucmVzdCk7XG4gIH1cblxuICB3YXJuKGxvZ2dlciwgLi4ucmVzdCkge1xuICAgIGNvbnNvbGUud2FybihgV0FSTiBbJHtsb2dnZXIuaWR9XWAsIC4uLnJlc3QpO1xuICB9XG5cbiAgZXJyb3IobG9nZ2VyLCAuLi5yZXN0KSB7XG4gICAgY29uc29sZS5lcnJvcihgRVJST1IgWyR7bG9nZ2VyLmlkfV1gLCAuLi5yZXN0KTtcbiAgfVxufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///aurelia-logging-console\n");

/***/ }),

/***/ "aurelia-pal-browser":
/*!*****************************************************************************!*\
  !*** ./node_modules/aurelia-pal-browser/dist/es2015/aurelia-pal-browser.js ***!
  \*****************************************************************************/
/*! exports provided: _PLATFORM, _FEATURE, _DOM, initialize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_PLATFORM\", function() { return _PLATFORM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_FEATURE\", function() { return _FEATURE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"_DOM\", function() { return _DOM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initialize\", function() { return initialize; });\n/* harmony import */ var aurelia_pal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-pal */ \"xIXs\");\n\n\nconst _PLATFORM = {\n  location: window.location,\n  history: window.history,\n  addEventListener(eventName, callback, capture) {\n    this.global.addEventListener(eventName, callback, capture);\n  },\n  removeEventListener(eventName, callback, capture) {\n    this.global.removeEventListener(eventName, callback, capture);\n  },\n  performance: window.performance,\n  requestAnimationFrame(callback) {\n    return this.global.requestAnimationFrame(callback);\n  }\n};\n\nif (false) {}\n\nif (false) {}\n\nif (false) {}\n\nif (false) {}\n\nif (false) {}\n\nif (Element && !Element.prototype.matches) {\n  let proto = Element.prototype;\n  proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;\n}\n\nconst _FEATURE = {\n  shadowDOM: !!HTMLElement.prototype.attachShadow,\n  scopedCSS: 'scoped' in document.createElement('style'),\n  htmlTemplateElement: function () {\n    let d = document.createElement('div');\n    d.innerHTML = '<template></template>';\n    return 'content' in d.children[0];\n  }(),\n  mutationObserver: !!(window.MutationObserver || window.WebKitMutationObserver),\n  ensureHTMLTemplateElement: t => t\n};\n\nif (false) {}\n\nlet shadowPoly = window.ShadowDOMPolyfill || null;\n\nconst _DOM = {\n  Element: Element,\n  NodeList: NodeList,\n  SVGElement: SVGElement,\n  boundary: 'aurelia-dom-boundary',\n  addEventListener(eventName, callback, capture) {\n    document.addEventListener(eventName, callback, capture);\n  },\n  removeEventListener(eventName, callback, capture) {\n    document.removeEventListener(eventName, callback, capture);\n  },\n  adoptNode(node) {\n    return document.adoptNode(node);\n  },\n  createAttribute(name) {\n    return document.createAttribute(name);\n  },\n  createElement(tagName) {\n    return document.createElement(tagName);\n  },\n  createTextNode(text) {\n    return document.createTextNode(text);\n  },\n  createComment(text) {\n    return document.createComment(text);\n  },\n  createDocumentFragment() {\n    return document.createDocumentFragment();\n  },\n  createTemplateElement() {\n    let template = document.createElement('template');\n    return _FEATURE.ensureHTMLTemplateElement(template);\n  },\n  createMutationObserver(callback) {\n    return new (window.MutationObserver || window.WebKitMutationObserver)(callback);\n  },\n  createCustomEvent(eventType, options) {\n    return new window.CustomEvent(eventType, options);\n  },\n  dispatchEvent(evt) {\n    document.dispatchEvent(evt);\n  },\n  getComputedStyle(element) {\n    return window.getComputedStyle(element);\n  },\n  getElementById(id) {\n    return document.getElementById(id);\n  },\n  querySelector(query) {\n    return document.querySelector(query);\n  },\n  querySelectorAll(query) {\n    return document.querySelectorAll(query);\n  },\n  nextElementSibling(element) {\n    if (element.nextElementSibling) {\n      return element.nextElementSibling;\n    }\n    do {\n      element = element.nextSibling;\n    } while (element && element.nodeType !== 1);\n    return element;\n  },\n  createTemplateFromMarkup(markup) {\n    let parser = document.createElement('div');\n    parser.innerHTML = markup;\n\n    let temp = parser.firstElementChild;\n    if (!temp || temp.nodeName !== 'TEMPLATE') {\n      throw new Error('Template markup must be wrapped in a <template> element e.g. <template> <!-- markup here --> </template>');\n    }\n\n    return _FEATURE.ensureHTMLTemplateElement(temp);\n  },\n  appendNode(newNode, parentNode) {\n    (parentNode || document.body).appendChild(newNode);\n  },\n  replaceNode(newNode, node, parentNode) {\n    if (node.parentNode) {\n      node.parentNode.replaceChild(newNode, node);\n    } else if (shadowPoly !== null) {\n      shadowPoly.unwrap(parentNode).replaceChild(shadowPoly.unwrap(newNode), shadowPoly.unwrap(node));\n    } else {\n      parentNode.replaceChild(newNode, node);\n    }\n  },\n  removeNode(node, parentNode) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    } else if (parentNode) {\n      if (shadowPoly !== null) {\n        shadowPoly.unwrap(parentNode).removeChild(shadowPoly.unwrap(node));\n      } else {\n        parentNode.removeChild(node);\n      }\n    }\n  },\n  injectStyles(styles, destination, prepend, id) {\n    if (id) {\n      let oldStyle = document.getElementById(id);\n      if (oldStyle) {\n        let isStyleTag = oldStyle.tagName.toLowerCase() === 'style';\n\n        if (isStyleTag) {\n          oldStyle.innerHTML = styles;\n          return;\n        }\n\n        throw new Error('The provided id does not indicate a style tag.');\n      }\n    }\n\n    let node = document.createElement('style');\n    node.innerHTML = styles;\n    node.type = 'text/css';\n\n    if (id) {\n      node.id = id;\n    }\n\n    destination = destination || document.head;\n\n    if (prepend && destination.childNodes.length > 0) {\n      destination.insertBefore(node, destination.childNodes[0]);\n    } else {\n      destination.appendChild(node);\n    }\n\n    return node;\n  }\n};\n\nfunction initialize() {\n  if (aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"isInitialized\"]) {\n    return;\n  }\n\n  Object(aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"initializePAL\"])((platform, feature, dom) => {\n    Object.assign(platform, _PLATFORM);\n    Object.assign(feature, _FEATURE);\n    Object.assign(dom, _DOM);\n\n    Object.defineProperty(dom, 'title', {\n      get: () => document.title,\n      set: value => {\n        document.title = value;\n      }\n    });\n\n    Object.defineProperty(dom, 'activeElement', {\n      get: () => document.activeElement\n    });\n\n    Object.defineProperty(platform, 'XMLHttpRequest', {\n      get: () => platform.global.XMLHttpRequest\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-pal-browser\n");

/***/ }),

/***/ "kDLR":
/*!*************************************************************************!*\
  !*** ./node_modules/aurelia-polyfills/dist/es2015/aurelia-polyfills.js ***!
  \*************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var aurelia_pal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-pal */ \"xIXs\");\n\n\nif (typeof FEATURE_NO_ES2015 === 'undefined') {\n\n  (function (Object, GOPS) {\n    'use strict';\n\n    if (GOPS in Object) return;\n\n    var setDescriptor,\n        G = aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"PLATFORM\"].global,\n        id = 0,\n        random = '' + Math.random(),\n        prefix = '__\\x01symbol:',\n        prefixLength = prefix.length,\n        internalSymbol = '__\\x01symbol@@' + random,\n        DP = 'defineProperty',\n        DPies = 'defineProperties',\n        GOPN = 'getOwnPropertyNames',\n        GOPD = 'getOwnPropertyDescriptor',\n        PIE = 'propertyIsEnumerable',\n        gOPN = Object[GOPN],\n        gOPD = Object[GOPD],\n        create = Object.create,\n        keys = Object.keys,\n        defineProperty = Object[DP],\n        $defineProperties = Object[DPies],\n        descriptor = gOPD(Object, GOPN),\n        ObjectProto = Object.prototype,\n        hOP = ObjectProto.hasOwnProperty,\n        pIE = ObjectProto[PIE],\n        toString = ObjectProto.toString,\n        indexOf = Array.prototype.indexOf || function (v) {\n      for (var i = this.length; i-- && this[i] !== v;) {}\n      return i;\n    },\n        addInternalIfNeeded = function (o, uid, enumerable) {\n      if (!hOP.call(o, internalSymbol)) {\n        defineProperty(o, internalSymbol, {\n          enumerable: false,\n          configurable: false,\n          writable: false,\n          value: {}\n        });\n      }\n      o[internalSymbol]['@@' + uid] = enumerable;\n    },\n        createWithSymbols = function (proto, descriptors) {\n      var self = create(proto);\n      if (descriptors !== null && typeof descriptors === 'object') {\n        gOPN(descriptors).forEach(function (key) {\n          if (propertyIsEnumerable.call(descriptors, key)) {\n            $defineProperty(self, key, descriptors[key]);\n          }\n        });\n      }\n      return self;\n    },\n        copyAsNonEnumerable = function (descriptor) {\n      var newDescriptor = create(descriptor);\n      newDescriptor.enumerable = false;\n      return newDescriptor;\n    },\n        get = function get() {},\n        onlyNonSymbols = function (name) {\n      return name != internalSymbol && !hOP.call(source, name);\n    },\n        onlySymbols = function (name) {\n      return name != internalSymbol && hOP.call(source, name);\n    },\n        propertyIsEnumerable = function propertyIsEnumerable(key) {\n      var uid = '' + key;\n      return onlySymbols(uid) ? hOP.call(this, uid) && this[internalSymbol] && this[internalSymbol]['@@' + uid] : pIE.call(this, key);\n    },\n        setAndGetSymbol = function (uid) {\n      var descriptor = {\n        enumerable: false,\n        configurable: true,\n        get: get,\n        set: function (value) {\n          setDescriptor(this, uid, {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value: value\n          });\n          addInternalIfNeeded(this, uid, true);\n        }\n      };\n      defineProperty(ObjectProto, uid, descriptor);\n      return source[uid] = defineProperty(Object(uid), 'constructor', sourceConstructor);\n    },\n        Symbol = function Symbol(description) {\n      if (this && this !== G) {\n        throw new TypeError('Symbol is not a constructor');\n      }\n      return setAndGetSymbol(prefix.concat(description || '', random, ++id));\n    },\n        source = create(null),\n        sourceConstructor = { value: Symbol },\n        sourceMap = function (uid) {\n      return source[uid];\n    },\n        $defineProperty = function defineProp(o, key, descriptor) {\n      var uid = '' + key;\n      if (onlySymbols(uid)) {\n        setDescriptor(o, uid, descriptor.enumerable ? copyAsNonEnumerable(descriptor) : descriptor);\n        addInternalIfNeeded(o, uid, !!descriptor.enumerable);\n      } else {\n        defineProperty(o, key, descriptor);\n      }\n      return o;\n    },\n        $getOwnPropertySymbols = function getOwnPropertySymbols(o) {\n      var cof = toString.call(o);\n      o = cof === '[object String]' ? o.split('') : Object(o);\n      return gOPN(o).filter(onlySymbols).map(sourceMap);\n    };\n\n    descriptor.value = $defineProperty;\n    defineProperty(Object, DP, descriptor);\n\n    descriptor.value = $getOwnPropertySymbols;\n    defineProperty(Object, GOPS, descriptor);\n\n    var cachedWindowNames = typeof window === 'object' ? Object.getOwnPropertyNames(window) : [];\n    var originalObjectGetOwnPropertyNames = Object.getOwnPropertyNames;\n    descriptor.value = function getOwnPropertyNames(o) {\n      if (toString.call(o) === '[object Window]') {\n        try {\n          return originalObjectGetOwnPropertyNames(o);\n        } catch (e) {\n          return [].concat([], cachedWindowNames);\n        }\n      }\n      return gOPN(o).filter(onlyNonSymbols);\n    };\n    defineProperty(Object, GOPN, descriptor);\n\n    descriptor.value = function defineProperties(o, descriptors) {\n      var symbols = $getOwnPropertySymbols(descriptors);\n      if (symbols.length) {\n        keys(descriptors).concat(symbols).forEach(function (uid) {\n          if (propertyIsEnumerable.call(descriptors, uid)) {\n            $defineProperty(o, uid, descriptors[uid]);\n          }\n        });\n      } else {\n        $defineProperties(o, descriptors);\n      }\n      return o;\n    };\n    defineProperty(Object, DPies, descriptor);\n\n    descriptor.value = propertyIsEnumerable;\n    defineProperty(ObjectProto, PIE, descriptor);\n\n    descriptor.value = Symbol;\n    defineProperty(G, 'Symbol', descriptor);\n\n    descriptor.value = function (key) {\n      var uid = prefix.concat(prefix, key, random);\n      return uid in ObjectProto ? source[uid] : setAndGetSymbol(uid);\n    };\n    defineProperty(Symbol, 'for', descriptor);\n\n    descriptor.value = function (symbol) {\n      return hOP.call(source, symbol) ? symbol.slice(prefixLength * 2, -random.length) : void 0;\n    };\n    defineProperty(Symbol, 'keyFor', descriptor);\n\n    descriptor.value = function getOwnPropertyDescriptor(o, key) {\n      var descriptor = gOPD(o, key);\n      if (descriptor && onlySymbols(key)) {\n        descriptor.enumerable = propertyIsEnumerable.call(o, key);\n      }\n      return descriptor;\n    };\n    defineProperty(Object, GOPD, descriptor);\n\n    descriptor.value = function (proto, descriptors) {\n      return arguments.length === 1 ? create(proto) : createWithSymbols(proto, descriptors);\n    };\n    defineProperty(Object, 'create', descriptor);\n\n    descriptor.value = function () {\n      var str = toString.call(this);\n      return str === '[object String]' && onlySymbols(this) ? '[object Symbol]' : str;\n    };\n    defineProperty(ObjectProto, 'toString', descriptor);\n\n    try {\n      setDescriptor = create(defineProperty({}, prefix, {\n        get: function () {\n          return defineProperty(this, prefix, { value: false })[prefix];\n        }\n      }))[prefix] || defineProperty;\n    } catch (o_O) {\n      setDescriptor = function (o, key, descriptor) {\n        var protoDescriptor = gOPD(ObjectProto, key);\n        delete ObjectProto[key];\n        defineProperty(o, key, descriptor);\n        defineProperty(ObjectProto, key, protoDescriptor);\n      };\n    }\n  })(Object, 'getOwnPropertySymbols');\n\n  (function (O, S) {\n    var dP = O.defineProperty,\n        ObjectProto = O.prototype,\n        toString = ObjectProto.toString,\n        toStringTag = 'toStringTag',\n        descriptor;\n    ['iterator', 'match', 'replace', 'search', 'split', 'hasInstance', 'isConcatSpreadable', 'unscopables', 'species', 'toPrimitive', toStringTag].forEach(function (name) {\n      if (!(name in Symbol)) {\n        dP(Symbol, name, { value: Symbol(name) });\n        switch (name) {\n          case toStringTag:\n            descriptor = O.getOwnPropertyDescriptor(ObjectProto, 'toString');\n            descriptor.value = function () {\n              var str = toString.call(this),\n                  tst = typeof this === 'undefined' || this === null ? undefined : this[Symbol.toStringTag];\n              return typeof tst === 'undefined' ? str : '[object ' + tst + ']';\n            };\n            dP(ObjectProto, 'toString', descriptor);\n            break;\n        }\n      }\n    });\n  })(Object, Symbol);\n\n  (function (Si, AP, SP) {\n\n    function returnThis() {\n      return this;\n    }\n\n    if (!AP[Si]) AP[Si] = function () {\n      var i = 0,\n          self = this,\n          iterator = {\n        next: function next() {\n          var done = self.length <= i;\n          return done ? { done: done } : { done: done, value: self[i++] };\n        }\n      };\n      iterator[Si] = returnThis;\n      return iterator;\n    };\n\n    if (!SP[Si]) SP[Si] = function () {\n      var fromCodePoint = String.fromCodePoint,\n          self = this,\n          i = 0,\n          length = self.length,\n          iterator = {\n        next: function next() {\n          var done = length <= i,\n              c = done ? '' : fromCodePoint(self.codePointAt(i));\n          i += c.length;\n          return done ? { done: done } : { done: done, value: c };\n        }\n      };\n      iterator[Si] = returnThis;\n      return iterator;\n    };\n  })(Symbol.iterator, Array.prototype, String.prototype);\n}\n\nif (typeof FEATURE_NO_ES2015 === 'undefined') {\n\n  Number.isNaN = Number.isNaN || function (value) {\n    return value !== value;\n  };\n\n  Number.isFinite = Number.isFinite || function (value) {\n    return typeof value === \"number\" && isFinite(value);\n  };\n}\n\nif (!String.prototype.endsWith || function () {\n  try {\n    return !\"ab\".endsWith(\"a\", 1);\n  } catch (e) {\n    return true;\n  }\n}()) {\n  String.prototype.endsWith = function (searchString, position) {\n    let subjectString = this.toString();\n    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n      position = subjectString.length;\n    }\n    position -= searchString.length;\n    let lastIndex = subjectString.indexOf(searchString, position);\n    return lastIndex !== -1 && lastIndex === position;\n  };\n}\n\nif (!String.prototype.startsWith || function () {\n  try {\n    return !\"ab\".startsWith(\"b\", 1);\n  } catch (e) {\n    return true;\n  }\n}()) {\n  String.prototype.startsWith = function (searchString, position) {\n    position = position || 0;\n    return this.substr(position, searchString.length) === searchString;\n  };\n}\n\nif (typeof FEATURE_NO_ES2015 === 'undefined') {\n\n  if (!Array.from) {\n    Array.from = function () {\n      var toInteger = function (it) {\n        return isNaN(it = +it) ? 0 : (it > 0 ? Math.floor : Math.ceil)(it);\n      };\n      var toLength = function (it) {\n        return it > 0 ? Math.min(toInteger(it), 0x1fffffffffffff) : 0;\n      };\n      var iterCall = function (iter, fn, val, index) {\n        try {\n          return fn(val, index);\n        } catch (E) {\n          if (typeof iter.return == 'function') iter.return();\n          throw E;\n        }\n      };\n\n      return function from(arrayLike) {\n        var O = Object(arrayLike),\n            C = typeof this == 'function' ? this : Array,\n            aLen = arguments.length,\n            mapfn = aLen > 1 ? arguments[1] : undefined,\n            mapping = mapfn !== undefined,\n            index = 0,\n            iterFn = O[Symbol.iterator],\n            length,\n            result,\n            step,\n            iterator;\n        if (mapping) mapfn = mapfn.bind(aLen > 2 ? arguments[2] : undefined);\n        if (iterFn != undefined && !Array.isArray(arrayLike)) {\n          for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n            result[index] = mapping ? iterCall(iterator, mapfn, step.value, index) : step.value;\n          }\n        } else {\n          length = toLength(O.length);\n          for (result = new C(length); length > index; index++) {\n            result[index] = mapping ? mapfn(O[index], index) : O[index];\n          }\n        }\n        result.length = index;\n        return result;\n      };\n    }();\n  }\n\n  if (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n      configurable: true,\n      writable: true,\n      enumerable: false,\n      value: function (predicate) {\n        if (this === null) {\n          throw new TypeError('Array.prototype.find called on null or undefined');\n        }\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        }\n        var list = Object(this);\n        var length = list.length >>> 0;\n        var thisArg = arguments[1];\n        var value;\n\n        for (var i = 0; i < length; i++) {\n          value = list[i];\n          if (predicate.call(thisArg, value, i, list)) {\n            return value;\n          }\n        }\n        return undefined;\n      }\n    });\n  }\n\n  if (!Array.prototype.findIndex) {\n    Object.defineProperty(Array.prototype, 'findIndex', {\n      configurable: true,\n      writable: true,\n      enumerable: false,\n      value: function (predicate) {\n        if (this === null) {\n          throw new TypeError('Array.prototype.findIndex called on null or undefined');\n        }\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        }\n        var list = Object(this);\n        var length = list.length >>> 0;\n        var thisArg = arguments[1];\n        var value;\n\n        for (var i = 0; i < length; i++) {\n          value = list[i];\n          if (predicate.call(thisArg, value, i, list)) {\n            return i;\n          }\n        }\n        return -1;\n      }\n    });\n  }\n}\n\nif (typeof FEATURE_NO_ES2016 === 'undefined' && !Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, 'includes', {\n    configurable: true,\n    writable: true,\n    enumerable: false,\n    value: function (searchElement) {\n      var O = Object(this);\n      var len = parseInt(O.length) || 0;\n      if (len === 0) {\n        return false;\n      }\n      var n = parseInt(arguments[1]) || 0;\n      var k;\n      if (n >= 0) {\n        k = n;\n      } else {\n        k = len + n;\n        if (k < 0) {\n          k = 0;\n        }\n      }\n      var currentElement;\n      while (k < len) {\n        currentElement = O[k];\n        if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {\n          return true;\n        }\n        k++;\n      }\n      return false;\n    }\n  });\n}\n\nif (typeof FEATURE_NO_ES2015 === 'undefined') {\n\n  (function () {\n    let needsFix = false;\n\n    try {\n      let s = Object.keys('a');\n      needsFix = s.length !== 1 || s[0] !== '0';\n    } catch (e) {\n      needsFix = true;\n    }\n\n    if (needsFix) {\n      Object.keys = function () {\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n            hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),\n            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],\n            dontEnumsLength = dontEnums.length;\n\n        return function (obj) {\n          if (obj === undefined || obj === null) {\n            throw TypeError(`Cannot convert undefined or null to object`);\n          }\n\n          obj = Object(obj);\n\n          var result = [],\n              prop,\n              i;\n\n          for (prop in obj) {\n            if (hasOwnProperty.call(obj, prop)) {\n              result.push(prop);\n            }\n          }\n\n          if (hasDontEnumBug) {\n            for (i = 0; i < dontEnumsLength; i++) {\n              if (hasOwnProperty.call(obj, dontEnums[i])) {\n                result.push(dontEnums[i]);\n              }\n            }\n          }\n\n          return result;\n        };\n      }();\n    }\n  })();\n\n  (function (O) {\n    if ('assign' in O) {\n      return;\n    }\n\n    O.defineProperty(O, 'assign', {\n      configurable: true,\n      writable: true,\n      value: function () {\n        var gOPS = O.getOwnPropertySymbols,\n            pIE = O.propertyIsEnumerable,\n            filterOS = gOPS ? function (self) {\n          return gOPS(self).filter(pIE, self);\n        } : function () {\n          return Array.prototype;\n        };\n\n        return function assign(where) {\n          if (gOPS && !(where instanceof O)) {\n            console.warn('problematic Symbols', where);\n          }\n\n          function set(keyOrSymbol) {\n            where[keyOrSymbol] = arg[keyOrSymbol];\n          }\n\n          for (var i = 1, ii = arguments.length; i < ii; ++i) {\n            var arg = arguments[i];\n\n            if (arg === null || arg === undefined) {\n              continue;\n            }\n\n            O.keys(arg).concat(filterOS(arg)).forEach(set);\n          }\n\n          return where;\n        };\n      }()\n    });\n  })(Object);\n\n  if (!Object.is) {\n    Object.is = function (x, y) {\n      if (x === y) {\n        return x !== 0 || 1 / x === 1 / y;\n      } else {\n        return x !== x && y !== y;\n      }\n    };\n  }\n}\n\nif (typeof FEATURE_NO_ES2015 === 'undefined') {\n\n  (function (global) {\n    var i;\n\n    var defineProperty = Object.defineProperty,\n        is = function (a, b) {\n      return a === b || a !== a && b !== b;\n    };\n\n    if (typeof WeakMap == 'undefined') {\n      global.WeakMap = createCollection({\n        'delete': sharedDelete,\n\n        clear: sharedClear,\n\n        get: sharedGet,\n\n        has: mapHas,\n\n        set: sharedSet\n      }, true);\n    }\n\n    if (typeof Map == 'undefined' || typeof new Map().values !== 'function' || !new Map().values().next) {\n      global.Map = createCollection({\n        'delete': sharedDelete,\n\n        has: mapHas,\n\n        get: sharedGet,\n\n        set: sharedSet,\n\n        keys: sharedKeys,\n\n        values: sharedValues,\n\n        entries: mapEntries,\n\n        forEach: sharedForEach,\n\n        clear: sharedClear,\n\n        [Symbol.iterator]: mapEntries\n      });\n    }\n\n    if (typeof Set == 'undefined' || typeof new Set().values !== 'function' || !new Set().values().next) {\n      global.Set = createCollection({\n        has: setHas,\n\n        add: sharedAdd,\n\n        'delete': sharedDelete,\n\n        clear: sharedClear,\n\n        keys: sharedValues,\n        values: sharedValues,\n\n        entries: setEntries,\n\n        forEach: sharedForEach,\n\n        [Symbol.iterator]: sharedValues\n      });\n    }\n\n    if (typeof WeakSet == 'undefined') {\n      global.WeakSet = createCollection({\n        'delete': sharedDelete,\n\n        add: sharedAdd,\n\n        clear: sharedClear,\n\n        has: setHas\n      }, true);\n    }\n\n    function createCollection(proto, objectOnly) {\n      function Collection(a) {\n        if (!this || this.constructor !== Collection) return new Collection(a);\n        this._keys = [];\n        this._values = [];\n        this._itp = [];\n        this.objectOnly = objectOnly;\n\n        if (a) init.call(this, a);\n      }\n\n      if (!objectOnly) {\n        defineProperty(proto, 'size', {\n          get: sharedSize\n        });\n      }\n\n      proto.constructor = Collection;\n      Collection.prototype = proto;\n\n      return Collection;\n    }\n\n    function init(a) {\n      var i;\n\n      if (this.add) a.forEach(this.add, this);else a.forEach(function (a) {\n          this.set(a[0], a[1]);\n        }, this);\n    }\n\n    function sharedDelete(key) {\n      if (this.has(key)) {\n        this._keys.splice(i, 1);\n        this._values.splice(i, 1);\n\n        this._itp.forEach(function (p) {\n          if (i < p[0]) p[0]--;\n        });\n      }\n\n      return -1 < i;\n    };\n\n    function sharedGet(key) {\n      return this.has(key) ? this._values[i] : undefined;\n    }\n\n    function has(list, key) {\n      if (this.objectOnly && key !== Object(key)) throw new TypeError(\"Invalid value used as weak collection key\");\n\n      if (key != key || key === 0) for (i = list.length; i-- && !is(list[i], key);) {} else i = list.indexOf(key);\n      return -1 < i;\n    }\n\n    function setHas(value) {\n      return has.call(this, this._values, value);\n    }\n\n    function mapHas(value) {\n      return has.call(this, this._keys, value);\n    }\n\n    function sharedSet(key, value) {\n      this.has(key) ? this._values[i] = value : this._values[this._keys.push(key) - 1] = value;\n      return this;\n    }\n\n    function sharedAdd(value) {\n      if (!this.has(value)) this._values.push(value);\n      return this;\n    }\n\n    function sharedClear() {\n      (this._keys || 0).length = this._values.length = 0;\n    }\n\n    function sharedKeys() {\n      return sharedIterator(this._itp, this._keys);\n    }\n\n    function sharedValues() {\n      return sharedIterator(this._itp, this._values);\n    }\n\n    function mapEntries() {\n      return sharedIterator(this._itp, this._keys, this._values);\n    }\n\n    function setEntries() {\n      return sharedIterator(this._itp, this._values, this._values);\n    }\n\n    function sharedIterator(itp, array, array2) {\n      var p = [0],\n          done = false;\n      itp.push(p);\n      return {\n        [Symbol.iterator]: function () {\n          return this;\n        },\n        next: function () {\n          var v,\n              k = p[0];\n          if (!done && k < array.length) {\n            v = array2 ? [array[k], array2[k]] : array[k];\n            p[0]++;\n          } else {\n            done = true;\n            itp.splice(itp.indexOf(p), 1);\n          }\n          return { done: done, value: v };\n        }\n      };\n    }\n\n    function sharedSize() {\n      return this._values.length;\n    }\n\n    function sharedForEach(callback, context) {\n      var it = this.entries();\n      for (;;) {\n        var r = it.next();\n        if (r.done) break;\n        callback.call(context, r.value[1], r.value[0], this);\n      }\n    }\n  })(aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"PLATFORM\"].global);\n}\n\nif (typeof FEATURE_NO_ES2015 === 'undefined') {\n\n  const bind = Function.prototype.bind;\n\n  if (typeof aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"PLATFORM\"].global.Reflect === 'undefined') {\n    aurelia_pal__WEBPACK_IMPORTED_MODULE_0__[\"PLATFORM\"].global.Reflect = {};\n  }\n\n  if (typeof Reflect.defineProperty !== 'function') {\n    Reflect.defineProperty = function (target, propertyKey, descriptor) {\n      if (typeof target === 'object' ? target === null : typeof target !== 'function') {\n        throw new TypeError('Reflect.defineProperty called on non-object');\n      }\n      try {\n        Object.defineProperty(target, propertyKey, descriptor);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    };\n  }\n\n  if (typeof Reflect.construct !== 'function') {\n    Reflect.construct = function (Target, args) {\n      if (args) {\n        switch (args.length) {\n          case 0:\n            return new Target();\n          case 1:\n            return new Target(args[0]);\n          case 2:\n            return new Target(args[0], args[1]);\n          case 3:\n            return new Target(args[0], args[1], args[2]);\n          case 4:\n            return new Target(args[0], args[1], args[2], args[3]);\n        }\n      }\n\n      var a = [null];\n      a.push.apply(a, args);\n      return new (bind.apply(Target, a))();\n    };\n  }\n\n  if (typeof Reflect.ownKeys !== 'function') {\n    Reflect.ownKeys = function (o) {\n      return Object.getOwnPropertyNames(o).concat(Object.getOwnPropertySymbols(o));\n    };\n  }\n}\n\nif (typeof FEATURE_NO_ESNEXT === 'undefined') {\n\n  const emptyMetadata = Object.freeze({});\n  const metadataContainerKey = '__metadata__';\n\n  if (typeof Reflect.getOwnMetadata !== 'function') {\n    Reflect.getOwnMetadata = function (metadataKey, target, targetKey) {\n      if (target.hasOwnProperty(metadataContainerKey)) {\n        return (target[metadataContainerKey][targetKey] || emptyMetadata)[metadataKey];\n      }\n    };\n  }\n\n  if (typeof Reflect.defineMetadata !== 'function') {\n    Reflect.defineMetadata = function (metadataKey, metadataValue, target, targetKey) {\n      let metadataContainer = target.hasOwnProperty(metadataContainerKey) ? target[metadataContainerKey] : target[metadataContainerKey] = {};\n      let targetContainer = metadataContainer[targetKey] || (metadataContainer[targetKey] = {});\n      targetContainer[metadataKey] = metadataValue;\n    };\n  }\n\n  if (typeof Reflect.metadata !== 'function') {\n    Reflect.metadata = function (metadataKey, metadataValue) {\n      return function (target, targetKey) {\n        Reflect.defineMetadata(metadataKey, metadataValue, target, targetKey);\n      };\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///kDLR\n");

/***/ }),

/***/ "n+sw":
/*!***************************************************************!*\
  !*** ./node_modules/aurelia-path/dist/es2015/aurelia-path.js ***!
  \***************************************************************/
/*! exports provided: relativeToFile, join, buildQueryString, parseQueryString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"relativeToFile\", function() { return relativeToFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"join\", function() { return join; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildQueryString\", function() { return buildQueryString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseQueryString\", function() { return parseQueryString; });\n\nfunction trimDots(ary) {\n  for (let i = 0; i < ary.length; ++i) {\n    let part = ary[i];\n    if (part === '.') {\n      ary.splice(i, 1);\n      i -= 1;\n    } else if (part === '..') {\n      if (i === 0 || i === 1 && ary[2] === '..' || ary[i - 1] === '..') {\n        continue;\n      } else if (i > 0) {\n        ary.splice(i - 1, 2);\n        i -= 2;\n      }\n    }\n  }\n}\n\nfunction relativeToFile(name, file) {\n  let fileParts = file && file.split('/');\n  let nameParts = name.trim().split('/');\n\n  if (nameParts[0].charAt(0) === '.' && fileParts) {\n    let normalizedBaseParts = fileParts.slice(0, fileParts.length - 1);\n    nameParts.unshift(...normalizedBaseParts);\n  }\n\n  trimDots(nameParts);\n\n  return nameParts.join('/');\n}\n\nfunction join(path1, path2) {\n  if (!path1) {\n    return path2;\n  }\n\n  if (!path2) {\n    return path1;\n  }\n\n  let schemeMatch = path1.match(/^([^/]*?:)\\//);\n  let scheme = schemeMatch && schemeMatch.length > 0 ? schemeMatch[1] : '';\n  path1 = path1.substr(scheme.length);\n\n  let urlPrefix;\n  if (path1.indexOf('///') === 0 && scheme === 'file:') {\n    urlPrefix = '///';\n  } else if (path1.indexOf('//') === 0) {\n    urlPrefix = '//';\n  } else if (path1.indexOf('/') === 0) {\n    urlPrefix = '/';\n  } else {\n    urlPrefix = '';\n  }\n\n  let trailingSlash = path2.slice(-1) === '/' ? '/' : '';\n\n  let url1 = path1.split('/');\n  let url2 = path2.split('/');\n  let url3 = [];\n\n  for (let i = 0, ii = url1.length; i < ii; ++i) {\n    if (url1[i] === '..') {\n      if (url3.length && url3[url3.length - 1] !== '..') {\n        url3.pop();\n      } else {\n        url3.push(url1[i]);\n      }\n    } else if (url1[i] === '.' || url1[i] === '') {\n      continue;\n    } else {\n      url3.push(url1[i]);\n    }\n  }\n\n  for (let i = 0, ii = url2.length; i < ii; ++i) {\n    if (url2[i] === '..') {\n      if (url3.length && url3[url3.length - 1] !== '..') {\n        url3.pop();\n      } else {\n        url3.push(url2[i]);\n      }\n    } else if (url2[i] === '.' || url2[i] === '') {\n      continue;\n    } else {\n      url3.push(url2[i]);\n    }\n  }\n\n  return scheme + urlPrefix + url3.join('/') + trailingSlash;\n}\n\nlet encode = encodeURIComponent;\nlet encodeKey = k => encode(k).replace('%24', '$');\n\nfunction buildParam(key, value, traditional) {\n  let result = [];\n  if (value === null || value === undefined) {\n    return result;\n  }\n  if (Array.isArray(value)) {\n    for (let i = 0, l = value.length; i < l; i++) {\n      if (traditional) {\n        result.push(`${encodeKey(key)}=${encode(value[i])}`);\n      } else {\n        let arrayKey = key + '[' + (typeof value[i] === 'object' && value[i] !== null ? i : '') + ']';\n        result = result.concat(buildParam(arrayKey, value[i]));\n      }\n    }\n  } else if (typeof value === 'object' && !traditional) {\n    for (let propertyName in value) {\n      result = result.concat(buildParam(key + '[' + propertyName + ']', value[propertyName]));\n    }\n  } else {\n    result.push(`${encodeKey(key)}=${encode(value)}`);\n  }\n  return result;\n}\n\nfunction buildQueryString(params, traditional) {\n  let pairs = [];\n  let keys = Object.keys(params || {}).sort();\n  for (let i = 0, len = keys.length; i < len; i++) {\n    let key = keys[i];\n    pairs = pairs.concat(buildParam(key, params[key], traditional));\n  }\n\n  if (pairs.length === 0) {\n    return '';\n  }\n\n  return pairs.join('&');\n}\n\nfunction processScalarParam(existedParam, value) {\n  if (Array.isArray(existedParam)) {\n    existedParam.push(value);\n    return existedParam;\n  }\n  if (existedParam !== undefined) {\n    return [existedParam, value];\n  }\n\n  return value;\n}\n\nfunction parseComplexParam(queryParams, keys, value) {\n  let currentParams = queryParams;\n  let keysLastIndex = keys.length - 1;\n  for (let j = 0; j <= keysLastIndex; j++) {\n    let key = keys[j] === '' ? currentParams.length : keys[j];\n    if (j < keysLastIndex) {\n      let prevValue = !currentParams[key] || typeof currentParams[key] === 'object' ? currentParams[key] : [currentParams[key]];\n      currentParams = currentParams[key] = prevValue || (isNaN(keys[j + 1]) ? {} : []);\n    } else {\n      currentParams = currentParams[key] = value;\n    }\n  }\n}\n\nfunction parseQueryString(queryString) {\n  let queryParams = {};\n  if (!queryString || typeof queryString !== 'string') {\n    return queryParams;\n  }\n\n  let query = queryString;\n  if (query.charAt(0) === '?') {\n    query = query.substr(1);\n  }\n\n  let pairs = query.replace(/\\+/g, ' ').split('&');\n  for (let i = 0; i < pairs.length; i++) {\n    let pair = pairs[i].split('=');\n    let key = decodeURIComponent(pair[0]);\n    if (!key) {\n      continue;\n    }\n\n    let keys = key.split('][');\n    let keysLastIndex = keys.length - 1;\n\n    if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keysLastIndex])) {\n      keys[keysLastIndex] = keys[keysLastIndex].replace(/\\]$/, '');\n      keys = keys.shift().split('[').concat(keys);\n      keysLastIndex = keys.length - 1;\n    } else {\n      keysLastIndex = 0;\n    }\n\n    if (pair.length >= 2) {\n      let value = pair[1] ? decodeURIComponent(pair[1]) : '';\n      if (keysLastIndex) {\n        parseComplexParam(queryParams, keys, value);\n      } else {\n        queryParams[key] = processScalarParam(queryParams[key], value);\n      }\n    } else {\n      queryParams[key] = true;\n    }\n  }\n  return queryParams;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///n+sw\n");

/***/ }),

/***/ "xIXs":
/*!*************************************************************!*\
  !*** ./node_modules/aurelia-pal/dist/es2015/aurelia-pal.js ***!
  \*************************************************************/
/*! exports provided: AggregateError, FEATURE, PLATFORM, DOM, isInitialized, initializePAL, reset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AggregateError\", function() { return AggregateError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FEATURE\", function() { return FEATURE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PLATFORM\", function() { return PLATFORM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOM\", function() { return DOM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isInitialized\", function() { return isInitialized; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initializePAL\", function() { return initializePAL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reset\", function() { return reset; });\n\nfunction AggregateError(message, innerError, skipIfAlreadyAggregate) {\n  if (innerError) {\n    if (innerError.innerError && skipIfAlreadyAggregate) {\n      return innerError;\n    }\n\n    const separator = '\\n------------------------------------------------\\n';\n\n    message += `${separator}Inner Error:\\n`;\n\n    if (typeof innerError === 'string') {\n      message += `Message: ${innerError}`;\n    } else {\n      if (innerError.message) {\n        message += `Message: ${innerError.message}`;\n      } else {\n        message += `Unknown Inner Error Type. Displaying Inner Error as JSON:\\n ${JSON.stringify(innerError, null, '  ')}`;\n      }\n\n      if (innerError.stack) {\n        message += `\\nInner Error Stack:\\n${innerError.stack}`;\n        message += '\\nEnd Inner Error Stack';\n      }\n    }\n\n    message += separator;\n  }\n\n  let e = new Error(message);\n  if (innerError) {\n    e.innerError = innerError;\n  }\n\n  return e;\n}\n\nconst FEATURE = {};\n\nconst PLATFORM = {\n  noop() {},\n  eachModule() {},\n  moduleName(moduleName) {\n    return moduleName;\n  }\n};\n\nPLATFORM.global = function () {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  return new Function('return this')();\n}();\n\nconst DOM = {};\nlet isInitialized = false;\n\nfunction initializePAL(callback) {\n  if (isInitialized) {\n    return;\n  }\n  isInitialized = true;\n  if (typeof Object.getPropertyDescriptor !== 'function') {\n    Object.getPropertyDescriptor = function (subject, name) {\n      let pd = Object.getOwnPropertyDescriptor(subject, name);\n      let proto = Object.getPrototypeOf(subject);\n      while (typeof pd === 'undefined' && proto !== null) {\n        pd = Object.getOwnPropertyDescriptor(proto, name);\n        proto = Object.getPrototypeOf(proto);\n      }\n      return pd;\n    };\n  }\n\n  callback(PLATFORM, FEATURE, DOM);\n}\nfunction reset() {\n  isInitialized = false;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"yLpj\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieElYcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLXBhbC9kaXN0L2VzMjAxNS9hdXJlbGlhLXBhbC5qcz9jNDg1Il0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKG1lc3NhZ2UsIGlubmVyRXJyb3IsIHNraXBJZkFscmVhZHlBZ2dyZWdhdGUpIHtcbiAgaWYgKGlubmVyRXJyb3IpIHtcbiAgICBpZiAoaW5uZXJFcnJvci5pbm5lckVycm9yICYmIHNraXBJZkFscmVhZHlBZ2dyZWdhdGUpIHtcbiAgICAgIHJldHVybiBpbm5lckVycm9yO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcGFyYXRvciA9ICdcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nO1xuXG4gICAgbWVzc2FnZSArPSBgJHtzZXBhcmF0b3J9SW5uZXIgRXJyb3I6XFxuYDtcblxuICAgIGlmICh0eXBlb2YgaW5uZXJFcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1lc3NhZ2UgKz0gYE1lc3NhZ2U6ICR7aW5uZXJFcnJvcn1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaW5uZXJFcnJvci5tZXNzYWdlKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gYE1lc3NhZ2U6ICR7aW5uZXJFcnJvci5tZXNzYWdlfWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlICs9IGBVbmtub3duIElubmVyIEVycm9yIFR5cGUuIERpc3BsYXlpbmcgSW5uZXIgRXJyb3IgYXMgSlNPTjpcXG4gJHtKU09OLnN0cmluZ2lmeShpbm5lckVycm9yLCBudWxsLCAnICAnKX1gO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5uZXJFcnJvci5zdGFjaykge1xuICAgICAgICBtZXNzYWdlICs9IGBcXG5Jbm5lciBFcnJvciBTdGFjazpcXG4ke2lubmVyRXJyb3Iuc3RhY2t9YDtcbiAgICAgICAgbWVzc2FnZSArPSAnXFxuRW5kIElubmVyIEVycm9yIFN0YWNrJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZXNzYWdlICs9IHNlcGFyYXRvcjtcbiAgfVxuXG4gIGxldCBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICBpZiAoaW5uZXJFcnJvcikge1xuICAgIGUuaW5uZXJFcnJvciA9IGlubmVyRXJyb3I7XG4gIH1cblxuICByZXR1cm4gZTtcbn1cblxuZXhwb3J0IGNvbnN0IEZFQVRVUkUgPSB7fTtcblxuZXhwb3J0IGNvbnN0IFBMQVRGT1JNID0ge1xuICBub29wKCkge30sXG4gIGVhY2hNb2R1bGUoKSB7fSxcbiAgbW9kdWxlTmFtZShtb2R1bGVOYW1lKSB7XG4gICAgcmV0dXJuIG1vZHVsZU5hbWU7XG4gIH1cbn07XG5cblBMQVRGT1JNLmdsb2JhbCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGdsb2JhbDtcbiAgfVxuXG4gIHJldHVybiBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn0oKTtcblxuZXhwb3J0IGNvbnN0IERPTSA9IHt9O1xuZXhwb3J0IGxldCBpc0luaXRpYWxpemVkID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplUEFMKGNhbGxiYWNrKSB7XG4gIGlmIChpc0luaXRpYWxpemVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICBpZiAodHlwZW9mIE9iamVjdC5nZXRQcm9wZXJ0eURlc2NyaXB0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBPYmplY3QuZ2V0UHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKHN1YmplY3QsIG5hbWUpIHtcbiAgICAgIGxldCBwZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc3ViamVjdCwgbmFtZSk7XG4gICAgICBsZXQgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc3ViamVjdCk7XG4gICAgICB3aGlsZSAodHlwZW9mIHBkID09PSAndW5kZWZpbmVkJyAmJiBwcm90byAhPT0gbnVsbCkge1xuICAgICAgICBwZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIG5hbWUpO1xuICAgICAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGQ7XG4gICAgfTtcbiAgfVxuXG4gIGNhbGxiYWNrKFBMQVRGT1JNLCBGRUFUVVJFLCBET00pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KCkge1xuICBpc0luaXRpYWxpemVkID0gZmFsc2U7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///xIXs\n");

/***/ })

}]);