(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~0ba1d959"],{

/***/ "GViq":
/*!*******************************************************************************!*\
  !*** ./node_modules/aurelia-bootstrapper/dist/es2015/aurelia-bootstrapper.js ***!
  \*******************************************************************************/
/*! exports provided: bootstrap, starting */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Promise, process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bootstrap\", function() { return bootstrap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"starting\", function() { return starting; });\n/* harmony import */ var aurelia_polyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-polyfills */ \"kDLR\");\n/* harmony import */ var aurelia_pal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aurelia-pal */ \"xIXs\");\n\n\n\nlet bootstrapPromises = [];\nlet startResolve;\n\nconst startPromise = new Promise(resolve => startResolve = resolve);\nconst host = aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].global;\nconst isNodeLike = typeof process !== 'undefined' && !process.browser;\n\nfunction ready() {\n  if (!host.document || host.document.readyState === 'complete') {\n    return Promise.resolve();\n  }\n\n  return new Promise(resolve => {\n    host.document.addEventListener('DOMContentLoaded', completed);\n    host.addEventListener('load', completed);\n\n    function completed() {\n      host.document.removeEventListener('DOMContentLoaded', completed);\n      host.removeEventListener('load', completed);\n      resolve();\n    }\n  });\n}\n\nfunction createLoader() {\n  if (aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].Loader) {\n    return Promise.resolve(new aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].Loader());\n  }\n\n  if (false) {}\n\n  return Promise.reject('No PLATFORM.Loader is defined and there is neither a System API (ES6) or a Require API (AMD) globally available to load your app.');\n}\n\nfunction initializePal(loader) {\n  if (aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"isInitialized\"]) return Promise.resolve();\n\n  let type;\n\n  const isRenderer = isNodeLike && (process.type === 'renderer' || process.versions['node-webkit']);\n\n  if (isNodeLike && !isRenderer) {\n    type = 'nodejs';\n  } else if (typeof window !== 'undefined') {\n    type = 'browser';\n  } else if (typeof self !== 'undefined') {\n    type = 'worker';\n  } else {\n    throw new Error('Could not determine platform implementation to load.');\n  }\n\n  return loader.loadModule('aurelia-pal-' + type).then(palModule => type === 'nodejs' && !aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"isInitialized\"] && palModule.globalize() || palModule.initialize());\n}\n\nfunction preparePlatform(loader) {\n  const map = (moduleId, relativeTo) => loader.normalize(moduleId, relativeTo).then(normalized => {\n    loader.map(moduleId, normalized);\n    return normalized;\n  });\n\n  return initializePal(loader).then(() => loader.normalize('aurelia-bootstrapper')).then(bootstrapperName => {\n    const frameworkPromise = map('aurelia-framework', bootstrapperName);\n\n    return Promise.all([frameworkPromise, frameworkPromise.then(frameworkName => map('aurelia-dependency-injection', frameworkName)), map('aurelia-router', bootstrapperName), map('aurelia-logging-console', bootstrapperName)]);\n  }).then(([frameworkName]) => loader.loadModule(frameworkName)).then(fx => startResolve(() => new fx.Aurelia(loader)));\n}\n\nfunction config(appHost, configModuleId, aurelia) {\n  aurelia.host = appHost;\n  aurelia.configModuleId = configModuleId || null;\n\n  if (configModuleId) {\n    return aurelia.loader.loadModule(configModuleId).then(customConfig => {\n      if (!customConfig.configure) {\n        throw new Error(`Cannot initialize module '${configModuleId}' without a configure function.`);\n      }\n\n      return customConfig.configure(aurelia);\n    });\n  }\n\n  aurelia.use.standardConfiguration().developmentLogging();\n\n  return aurelia.start().then(() => aurelia.setRoot());\n}\n\nfunction run() {\n  return ready().then(createLoader).then(preparePlatform).then(() => {\n    const appHosts = host.document.querySelectorAll('[aurelia-app],[data-aurelia-app]');\n    for (let i = 0, ii = appHosts.length; i < ii; ++i) {\n      const appHost = appHosts[i];\n      const moduleId = appHost.getAttribute('aurelia-app') || appHost.getAttribute('data-aurelia-app');\n      bootstrap(config.bind(null, appHost, moduleId));\n    }\n\n    const toConsole = console.error.bind(console);\n    const bootstraps = bootstrapPromises.map(p => p.catch(toConsole));\n    bootstrapPromises = null;\n    return Promise.all(bootstraps);\n  });\n}\n\nfunction bootstrap(configure) {\n  const p = startPromise.then(factory => configure(factory()));\n  if (bootstrapPromises) bootstrapPromises.push(p);\n  return p;\n}\n\nconst starting = run();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promise-polyfill */ \"B/eG\")[\"default\"], __webpack_require__(/*! ./../../../process/browser.js */ \"8oxB\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR1ZpcS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWJvb3RzdHJhcHBlci9kaXN0L2VzMjAxNS9hdXJlbGlhLWJvb3RzdHJhcHBlci5qcz8xOTU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnYXVyZWxpYS1wb2x5ZmlsbHMnO1xuaW1wb3J0IHsgUExBVEZPUk0sIGlzSW5pdGlhbGl6ZWQgfSBmcm9tICdhdXJlbGlhLXBhbCc7XG5cbmxldCBib290c3RyYXBQcm9taXNlcyA9IFtdO1xubGV0IHN0YXJ0UmVzb2x2ZTtcblxuY29uc3Qgc3RhcnRQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzdGFydFJlc29sdmUgPSByZXNvbHZlKTtcbmNvbnN0IGhvc3QgPSBQTEFURk9STS5nbG9iYWw7XG5jb25zdCBpc05vZGVMaWtlID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICFwcm9jZXNzLmJyb3dzZXI7XG5cbmZ1bmN0aW9uIHJlYWR5KCkge1xuICBpZiAoIWhvc3QuZG9jdW1lbnQgfHwgaG9zdC5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIGhvc3QuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGNvbXBsZXRlZCk7XG4gICAgaG9zdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgY29tcGxldGVkKTtcblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcbiAgICAgIGhvc3QuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGNvbXBsZXRlZCk7XG4gICAgICBob3N0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBjb21wbGV0ZWQpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvYWRlcigpIHtcbiAgaWYgKFBMQVRGT1JNLkxvYWRlcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IFBMQVRGT1JNLkxvYWRlcigpKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgQVVSRUxJQV9XRUJQQUNLXzJfMCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBtID0gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1aXJlLnJlc29sdmUoJ2F1cmVsaWEtbG9hZGVyLXdlYnBhY2snKSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBtLldlYnBhY2tMb2FkZXIoKSk7XG4gICAgfVxuXG4gICAgaWYgKGhvc3QuU3lzdGVtICYmIHR5cGVvZiBob3N0LlN5c3RlbS5jb25maWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBob3N0LlN5c3RlbS5ub3JtYWxpemUoJ2F1cmVsaWEtYm9vdHN0cmFwcGVyJykudGhlbihic24gPT4ge1xuICAgICAgICByZXR1cm4gaG9zdC5TeXN0ZW0ubm9ybWFsaXplKCdhdXJlbGlhLWxvYWRlci1kZWZhdWx0JywgYnNuKTtcbiAgICAgIH0pLnRoZW4obG9hZGVyTmFtZSA9PiB7XG4gICAgICAgIHJldHVybiBob3N0LlN5c3RlbS5pbXBvcnQobG9hZGVyTmFtZSkudGhlbihtID0+IG5ldyBtLkRlZmF1bHRMb2FkZXIoKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGhvc3QucmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaG9zdC5kZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGhvc3QuZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBob3N0LnJlcXVpcmUoWydhdXJlbGlhLWxvYWRlci1kZWZhdWx0J10sIG0gPT4gcmVzb2x2ZShuZXcgbS5EZWZhdWx0TG9hZGVyKCkpLCByZWplY3QpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOb2RlTGlrZSAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLnJlcXVpcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBtID0gbW9kdWxlLnJlcXVpcmUoJ2F1cmVsaWEtbG9hZGVyLW5vZGVqcycpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgbS5Ob2RlSnNMb2FkZXIoKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdObyBQTEFURk9STS5Mb2FkZXIgaXMgZGVmaW5lZCBhbmQgdGhlcmUgaXMgbmVpdGhlciBhIFN5c3RlbSBBUEkgKEVTNikgb3IgYSBSZXF1aXJlIEFQSSAoQU1EKSBnbG9iYWxseSBhdmFpbGFibGUgdG8gbG9hZCB5b3VyIGFwcC4nKTtcbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVBhbChsb2FkZXIpIHtcbiAgaWYgKGlzSW5pdGlhbGl6ZWQpIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICBsZXQgdHlwZTtcblxuICBjb25zdCBpc1JlbmRlcmVyID0gaXNOb2RlTGlrZSAmJiAocHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHByb2Nlc3MudmVyc2lvbnNbJ25vZGUtd2Via2l0J10pO1xuXG4gIGlmIChpc05vZGVMaWtlICYmICFpc1JlbmRlcmVyKSB7XG4gICAgdHlwZSA9ICdub2RlanMnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdHlwZSA9ICdicm93c2VyJztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0eXBlID0gJ3dvcmtlcic7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZGV0ZXJtaW5lIHBsYXRmb3JtIGltcGxlbWVudGF0aW9uIHRvIGxvYWQuJyk7XG4gIH1cblxuICByZXR1cm4gbG9hZGVyLmxvYWRNb2R1bGUoJ2F1cmVsaWEtcGFsLScgKyB0eXBlKS50aGVuKHBhbE1vZHVsZSA9PiB0eXBlID09PSAnbm9kZWpzJyAmJiAhaXNJbml0aWFsaXplZCAmJiBwYWxNb2R1bGUuZ2xvYmFsaXplKCkgfHwgcGFsTW9kdWxlLmluaXRpYWxpemUoKSk7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVQbGF0Zm9ybShsb2FkZXIpIHtcbiAgY29uc3QgbWFwID0gKG1vZHVsZUlkLCByZWxhdGl2ZVRvKSA9PiBsb2FkZXIubm9ybWFsaXplKG1vZHVsZUlkLCByZWxhdGl2ZVRvKS50aGVuKG5vcm1hbGl6ZWQgPT4ge1xuICAgIGxvYWRlci5tYXAobW9kdWxlSWQsIG5vcm1hbGl6ZWQpO1xuICAgIHJldHVybiBub3JtYWxpemVkO1xuICB9KTtcblxuICByZXR1cm4gaW5pdGlhbGl6ZVBhbChsb2FkZXIpLnRoZW4oKCkgPT4gbG9hZGVyLm5vcm1hbGl6ZSgnYXVyZWxpYS1ib290c3RyYXBwZXInKSkudGhlbihib290c3RyYXBwZXJOYW1lID0+IHtcbiAgICBjb25zdCBmcmFtZXdvcmtQcm9taXNlID0gbWFwKFBMQVRGT1JNLm1vZHVsZU5hbWUoJ2F1cmVsaWEtZnJhbWV3b3JrJywgeyBleHBvcnRzOiBbJ0F1cmVsaWEnXSB9KSwgYm9vdHN0cmFwcGVyTmFtZSk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2ZyYW1ld29ya1Byb21pc2UsIGZyYW1ld29ya1Byb21pc2UudGhlbihmcmFtZXdvcmtOYW1lID0+IG1hcCgnYXVyZWxpYS1kZXBlbmRlbmN5LWluamVjdGlvbicsIGZyYW1ld29ya05hbWUpKSwgbWFwKCdhdXJlbGlhLXJvdXRlcicsIGJvb3RzdHJhcHBlck5hbWUpLCBtYXAoJ2F1cmVsaWEtbG9nZ2luZy1jb25zb2xlJywgYm9vdHN0cmFwcGVyTmFtZSldKTtcbiAgfSkudGhlbigoW2ZyYW1ld29ya05hbWVdKSA9PiBsb2FkZXIubG9hZE1vZHVsZShmcmFtZXdvcmtOYW1lKSkudGhlbihmeCA9PiBzdGFydFJlc29sdmUoKCkgPT4gbmV3IGZ4LkF1cmVsaWEobG9hZGVyKSkpO1xufVxuXG5mdW5jdGlvbiBjb25maWcoYXBwSG9zdCwgY29uZmlnTW9kdWxlSWQsIGF1cmVsaWEpIHtcbiAgYXVyZWxpYS5ob3N0ID0gYXBwSG9zdDtcbiAgYXVyZWxpYS5jb25maWdNb2R1bGVJZCA9IGNvbmZpZ01vZHVsZUlkIHx8IG51bGw7XG5cbiAgaWYgKGNvbmZpZ01vZHVsZUlkKSB7XG4gICAgcmV0dXJuIGF1cmVsaWEubG9hZGVyLmxvYWRNb2R1bGUoY29uZmlnTW9kdWxlSWQpLnRoZW4oY3VzdG9tQ29uZmlnID0+IHtcbiAgICAgIGlmICghY3VzdG9tQ29uZmlnLmNvbmZpZ3VyZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBpbml0aWFsaXplIG1vZHVsZSAnJHtjb25maWdNb2R1bGVJZH0nIHdpdGhvdXQgYSBjb25maWd1cmUgZnVuY3Rpb24uYCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXN0b21Db25maWcuY29uZmlndXJlKGF1cmVsaWEpO1xuICAgIH0pO1xuICB9XG5cbiAgYXVyZWxpYS51c2Uuc3RhbmRhcmRDb25maWd1cmF0aW9uKCkuZGV2ZWxvcG1lbnRMb2dnaW5nKCk7XG5cbiAgcmV0dXJuIGF1cmVsaWEuc3RhcnQoKS50aGVuKCgpID0+IGF1cmVsaWEuc2V0Um9vdCgpKTtcbn1cblxuZnVuY3Rpb24gcnVuKCkge1xuICByZXR1cm4gcmVhZHkoKS50aGVuKGNyZWF0ZUxvYWRlcikudGhlbihwcmVwYXJlUGxhdGZvcm0pLnRoZW4oKCkgPT4ge1xuICAgIGNvbnN0IGFwcEhvc3RzID0gaG9zdC5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbYXVyZWxpYS1hcHBdLFtkYXRhLWF1cmVsaWEtYXBwXScpO1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGFwcEhvc3RzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgIGNvbnN0IGFwcEhvc3QgPSBhcHBIb3N0c1tpXTtcbiAgICAgIGNvbnN0IG1vZHVsZUlkID0gYXBwSG9zdC5nZXRBdHRyaWJ1dGUoJ2F1cmVsaWEtYXBwJykgfHwgYXBwSG9zdC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYXVyZWxpYS1hcHAnKTtcbiAgICAgIGJvb3RzdHJhcChjb25maWcuYmluZChudWxsLCBhcHBIb3N0LCBtb2R1bGVJZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IHRvQ29uc29sZSA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbiAgICBjb25zdCBib290c3RyYXBzID0gYm9vdHN0cmFwUHJvbWlzZXMubWFwKHAgPT4gcC5jYXRjaCh0b0NvbnNvbGUpKTtcbiAgICBib290c3RyYXBQcm9taXNlcyA9IG51bGw7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGJvb3RzdHJhcHMpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJvb3RzdHJhcChjb25maWd1cmUpIHtcbiAgY29uc3QgcCA9IHN0YXJ0UHJvbWlzZS50aGVuKGZhY3RvcnkgPT4gY29uZmlndXJlKGZhY3RvcnkoKSkpO1xuICBpZiAoYm9vdHN0cmFwUHJvbWlzZXMpIGJvb3RzdHJhcFByb21pc2VzLnB1c2gocCk7XG4gIHJldHVybiBwO1xufVxuXG5leHBvcnQgY29uc3Qgc3RhcnRpbmcgPSBydW4oKTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///GViq\n");

/***/ }),

/***/ "NDtI":
/*!*********************************************************************!*\
  !*** ./node_modules/aurelia-binding/dist/es2015/aurelia-binding.js ***!
  \*********************************************************************/
/*! exports provided: targetContext, sourceContext, camelCase, createOverrideContext, getContextFor, createScopeForTest, connectable, enqueueBindingConnect, setConnectQueueThreshold, enableConnectQueue, disableConnectQueue, getConnectQueueSize, subscriberCollection, ExpressionObserver, calcSplices, mergeSplice, projectArraySplices, getChangeRecords, ModifyCollectionObserver, CollectionLengthObserver, getArrayObserver, Expression, BindingBehavior, ValueConverter, Assign, Conditional, AccessThis, AccessScope, AccessMember, AccessKeyed, CallScope, CallMember, CallFunction, Binary, Unary, LiteralPrimitive, LiteralString, LiteralTemplate, LiteralArray, LiteralObject, Unparser, ExpressionCloner, cloneExpression, bindingMode, Parser, ParserImplementation, getMapObserver, delegationStrategy, EventManager, EventSubscriber, DirtyChecker, DirtyCheckProperty, propertyAccessor, PrimitiveObserver, SetterObserver, XLinkAttributeObserver, dataAttributeAccessor, DataAttributeObserver, StyleObserver, ValueAttributeObserver, CheckedObserver, SelectValueObserver, ClassObserver, hasDeclaredDependencies, declarePropertyDependencies, computedFrom, ComputedExpression, createComputedObserver, elements, presentationElements, presentationAttributes, SVGAnalyzer, ObserverLocator, ObjectObservationAdapter, BindingExpression, Binding, CallExpression, Call, ValueConverterResource, valueConverter, BindingBehaviorResource, bindingBehavior, ListenerExpression, Listener, NameExpression, BindingEngine, getSetObserver, observable, connectBindingToSignal, signalBindings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"targetContext\", function() { return targetContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sourceContext\", function() { return sourceContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"camelCase\", function() { return camelCase; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createOverrideContext\", function() { return createOverrideContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getContextFor\", function() { return getContextFor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createScopeForTest\", function() { return createScopeForTest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"connectable\", function() { return connectable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enqueueBindingConnect\", function() { return enqueueBindingConnect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setConnectQueueThreshold\", function() { return setConnectQueueThreshold; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enableConnectQueue\", function() { return enableConnectQueue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"disableConnectQueue\", function() { return disableConnectQueue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getConnectQueueSize\", function() { return getConnectQueueSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"subscriberCollection\", function() { return subscriberCollection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ExpressionObserver\", function() { return ExpressionObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calcSplices\", function() { return calcSplices; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mergeSplice\", function() { return mergeSplice; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"projectArraySplices\", function() { return projectArraySplices; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getChangeRecords\", function() { return getChangeRecords; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ModifyCollectionObserver\", function() { return ModifyCollectionObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CollectionLengthObserver\", function() { return CollectionLengthObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getArrayObserver\", function() { return getArrayObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Expression\", function() { return Expression; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BindingBehavior\", function() { return BindingBehavior; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ValueConverter\", function() { return ValueConverter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Assign\", function() { return Assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Conditional\", function() { return Conditional; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AccessThis\", function() { return AccessThis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AccessScope\", function() { return AccessScope; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AccessMember\", function() { return AccessMember; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AccessKeyed\", function() { return AccessKeyed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CallScope\", function() { return CallScope; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CallMember\", function() { return CallMember; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CallFunction\", function() { return CallFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Binary\", function() { return Binary; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Unary\", function() { return Unary; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LiteralPrimitive\", function() { return LiteralPrimitive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LiteralString\", function() { return LiteralString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LiteralTemplate\", function() { return LiteralTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LiteralArray\", function() { return LiteralArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LiteralObject\", function() { return LiteralObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Unparser\", function() { return Unparser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ExpressionCloner\", function() { return ExpressionCloner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cloneExpression\", function() { return cloneExpression; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindingMode\", function() { return bindingMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return Parser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParserImplementation\", function() { return ParserImplementation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMapObserver\", function() { return getMapObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"delegationStrategy\", function() { return delegationStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventManager\", function() { return EventManager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventSubscriber\", function() { return EventSubscriber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DirtyChecker\", function() { return DirtyChecker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DirtyCheckProperty\", function() { return DirtyCheckProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"propertyAccessor\", function() { return propertyAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PrimitiveObserver\", function() { return PrimitiveObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SetterObserver\", function() { return SetterObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"XLinkAttributeObserver\", function() { return XLinkAttributeObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dataAttributeAccessor\", function() { return dataAttributeAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DataAttributeObserver\", function() { return DataAttributeObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StyleObserver\", function() { return StyleObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ValueAttributeObserver\", function() { return ValueAttributeObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CheckedObserver\", function() { return CheckedObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectValueObserver\", function() { return SelectValueObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ClassObserver\", function() { return ClassObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasDeclaredDependencies\", function() { return hasDeclaredDependencies; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"declarePropertyDependencies\", function() { return declarePropertyDependencies; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"computedFrom\", function() { return computedFrom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComputedExpression\", function() { return ComputedExpression; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createComputedObserver\", function() { return createComputedObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"elements\", function() { return elements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"presentationElements\", function() { return presentationElements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"presentationAttributes\", function() { return presentationAttributes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SVGAnalyzer\", function() { return SVGAnalyzer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObserverLocator\", function() { return ObserverLocator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObjectObservationAdapter\", function() { return ObjectObservationAdapter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BindingExpression\", function() { return BindingExpression; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Binding\", function() { return Binding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CallExpression\", function() { return CallExpression; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Call\", function() { return Call; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ValueConverterResource\", function() { return ValueConverterResource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"valueConverter\", function() { return valueConverter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BindingBehaviorResource\", function() { return BindingBehaviorResource; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bindingBehavior\", function() { return bindingBehavior; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ListenerExpression\", function() { return ListenerExpression; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Listener\", function() { return Listener; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NameExpression\", function() { return NameExpression; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BindingEngine\", function() { return BindingEngine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSetObserver\", function() { return getSetObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"observable\", function() { return observable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"connectBindingToSignal\", function() { return connectBindingToSignal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"signalBindings\", function() { return signalBindings; });\n/* harmony import */ var aurelia_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aurelia-logging */ \"KKpb\");\n/* harmony import */ var aurelia_pal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aurelia-pal */ \"xIXs\");\n/* harmony import */ var aurelia_task_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! aurelia-task-queue */ \"aWZo\");\n/* harmony import */ var aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! aurelia-metadata */ \"SGXf\");\nvar _dec, _dec2, _class, _dec3, _class2, _dec4, _class3, _dec5, _class5, _dec6, _class7, _dec7, _class8, _dec8, _class9, _dec9, _class10, _class11, _temp, _dec10, _class12, _class13, _temp2;\n\n\n\n\n\n\nconst targetContext = 'Binding:target';\nconst sourceContext = 'Binding:source';\n\nconst map = Object.create(null);\n\nfunction camelCase(name) {\n  if (name in map) {\n    return map[name];\n  }\n  const result = name.charAt(0).toLowerCase() + name.slice(1).replace(/[_.-](\\w|$)/g, (_, x) => x.toUpperCase());\n  map[name] = result;\n  return result;\n}\n\nfunction createOverrideContext(bindingContext, parentOverrideContext) {\n  return {\n    bindingContext: bindingContext,\n    parentOverrideContext: parentOverrideContext || null\n  };\n}\n\nfunction getContextFor(name, scope, ancestor) {\n  let oc = scope.overrideContext;\n\n  if (ancestor) {\n    while (ancestor && oc) {\n      ancestor--;\n      oc = oc.parentOverrideContext;\n    }\n    if (ancestor || !oc) {\n      return undefined;\n    }\n    return name in oc ? oc : oc.bindingContext;\n  }\n\n  while (oc && !(name in oc) && !(oc.bindingContext && name in oc.bindingContext)) {\n    oc = oc.parentOverrideContext;\n  }\n  if (oc) {\n    return name in oc ? oc : oc.bindingContext;\n  }\n\n  return scope.bindingContext || scope.overrideContext;\n}\n\nfunction createScopeForTest(bindingContext, parentBindingContext) {\n  if (parentBindingContext) {\n    return {\n      bindingContext,\n      overrideContext: createOverrideContext(bindingContext, createOverrideContext(parentBindingContext))\n    };\n  }\n  return {\n    bindingContext,\n    overrideContext: createOverrideContext(bindingContext)\n  };\n}\n\nconst slotNames = [];\nconst versionSlotNames = [];\nlet lastSlot = -1;\nfunction ensureEnoughSlotNames(currentSlot) {\n  if (currentSlot === lastSlot) {\n    lastSlot += 5;\n    const ii = slotNames.length = versionSlotNames.length = lastSlot + 1;\n    for (let i = currentSlot + 1; i < ii; ++i) {\n      slotNames[i] = `_observer${i}`;\n      versionSlotNames[i] = `_observerVersion${i}`;\n    }\n  }\n}\nensureEnoughSlotNames(-1);\n\nfunction addObserver(observer) {\n  let observerSlots = this._observerSlots === undefined ? 0 : this._observerSlots;\n  let i = observerSlots;\n  while (i-- && this[slotNames[i]] !== observer) {}\n\n  if (i === -1) {\n    i = 0;\n    while (this[slotNames[i]]) {\n      i++;\n    }\n    this[slotNames[i]] = observer;\n    observer.subscribe(sourceContext, this);\n\n    if (i === observerSlots) {\n      this._observerSlots = i + 1;\n    }\n  }\n\n  if (this._version === undefined) {\n    this._version = 0;\n  }\n  this[versionSlotNames[i]] = this._version;\n  ensureEnoughSlotNames(i);\n}\n\nfunction observeProperty(obj, propertyName) {\n  let observer = this.observerLocator.getObserver(obj, propertyName);\n  addObserver.call(this, observer);\n}\n\nfunction observeArray(array) {\n  let observer = this.observerLocator.getArrayObserver(array);\n  addObserver.call(this, observer);\n}\n\nfunction unobserve(all) {\n  let i = this._observerSlots;\n  while (i--) {\n    if (all || this[versionSlotNames[i]] !== this._version) {\n      let observer = this[slotNames[i]];\n      this[slotNames[i]] = null;\n      if (observer) {\n        observer.unsubscribe(sourceContext, this);\n      }\n    }\n  }\n}\n\nfunction connectable() {\n  return function (target) {\n    target.prototype.observeProperty = observeProperty;\n    target.prototype.observeArray = observeArray;\n    target.prototype.unobserve = unobserve;\n    target.prototype.addObserver = addObserver;\n  };\n}\n\nconst queue = [];\nconst queued = {};\nlet nextId = 0;\nlet minimumImmediate = 100;\nconst frameBudget = 15;\n\nlet isFlushRequested = false;\nlet immediate = 0;\n\nfunction flush(animationFrameStart) {\n  const length = queue.length;\n  let i = 0;\n  while (i < length) {\n    const binding = queue[i];\n    queued[binding.__connectQueueId] = false;\n    binding.connect(true);\n    i++;\n\n    if (i % 100 === 0 && aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].performance.now() - animationFrameStart > frameBudget) {\n      break;\n    }\n  }\n  queue.splice(0, i);\n\n  if (queue.length) {\n    aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].requestAnimationFrame(flush);\n  } else {\n    isFlushRequested = false;\n    immediate = 0;\n  }\n}\n\nfunction enqueueBindingConnect(binding) {\n  if (immediate < minimumImmediate) {\n    immediate++;\n    binding.connect(false);\n  } else {\n    let id = binding.__connectQueueId;\n    if (id === undefined) {\n      id = nextId;\n      nextId++;\n      binding.__connectQueueId = id;\n    }\n\n    if (!queued[id]) {\n      queue.push(binding);\n      queued[id] = true;\n    }\n  }\n  if (!isFlushRequested) {\n    isFlushRequested = true;\n    aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"PLATFORM\"].requestAnimationFrame(flush);\n  }\n}\n\nfunction setConnectQueueThreshold(value) {\n  minimumImmediate = value;\n}\n\nfunction enableConnectQueue() {\n  setConnectQueueThreshold(100);\n}\n\nfunction disableConnectQueue() {\n  setConnectQueueThreshold(Number.MAX_SAFE_INTEGER);\n}\n\nfunction getConnectQueueSize() {\n  return queue.length;\n}\n\nfunction addSubscriber(context, callable) {\n  if (this.hasSubscriber(context, callable)) {\n    return false;\n  }\n  if (!this._context0) {\n    this._context0 = context;\n    this._callable0 = callable;\n    return true;\n  }\n  if (!this._context1) {\n    this._context1 = context;\n    this._callable1 = callable;\n    return true;\n  }\n  if (!this._context2) {\n    this._context2 = context;\n    this._callable2 = callable;\n    return true;\n  }\n  if (!this._contextsRest) {\n    this._contextsRest = [context];\n    this._callablesRest = [callable];\n    return true;\n  }\n  this._contextsRest.push(context);\n  this._callablesRest.push(callable);\n  return true;\n}\n\nfunction removeSubscriber(context, callable) {\n  if (this._context0 === context && this._callable0 === callable) {\n    this._context0 = null;\n    this._callable0 = null;\n    return true;\n  }\n  if (this._context1 === context && this._callable1 === callable) {\n    this._context1 = null;\n    this._callable1 = null;\n    return true;\n  }\n  if (this._context2 === context && this._callable2 === callable) {\n    this._context2 = null;\n    this._callable2 = null;\n    return true;\n  }\n  const callables = this._callablesRest;\n  if (callables === undefined || callables.length === 0) {\n    return false;\n  }\n  const contexts = this._contextsRest;\n  let i = 0;\n  while (!(callables[i] === callable && contexts[i] === context) && callables.length > i) {\n    i++;\n  }\n  if (i >= callables.length) {\n    return false;\n  }\n  contexts.splice(i, 1);\n  callables.splice(i, 1);\n  return true;\n}\n\nlet arrayPool1 = [];\nlet arrayPool2 = [];\nlet poolUtilization = [];\n\nfunction callSubscribers(newValue, oldValue) {\n  let context0 = this._context0;\n  let callable0 = this._callable0;\n  let context1 = this._context1;\n  let callable1 = this._callable1;\n  let context2 = this._context2;\n  let callable2 = this._callable2;\n  let length = this._contextsRest ? this._contextsRest.length : 0;\n  let contextsRest;\n  let callablesRest;\n  let poolIndex;\n  let i;\n  if (length) {\n    poolIndex = poolUtilization.length;\n    while (poolIndex-- && poolUtilization[poolIndex]) {}\n    if (poolIndex < 0) {\n      poolIndex = poolUtilization.length;\n      contextsRest = [];\n      callablesRest = [];\n      poolUtilization.push(true);\n      arrayPool1.push(contextsRest);\n      arrayPool2.push(callablesRest);\n    } else {\n      poolUtilization[poolIndex] = true;\n      contextsRest = arrayPool1[poolIndex];\n      callablesRest = arrayPool2[poolIndex];\n    }\n\n    i = length;\n    while (i--) {\n      contextsRest[i] = this._contextsRest[i];\n      callablesRest[i] = this._callablesRest[i];\n    }\n  }\n\n  if (context0) {\n    if (callable0) {\n      callable0.call(context0, newValue, oldValue);\n    } else {\n      context0(newValue, oldValue);\n    }\n  }\n  if (context1) {\n    if (callable1) {\n      callable1.call(context1, newValue, oldValue);\n    } else {\n      context1(newValue, oldValue);\n    }\n  }\n  if (context2) {\n    if (callable2) {\n      callable2.call(context2, newValue, oldValue);\n    } else {\n      context2(newValue, oldValue);\n    }\n  }\n  if (length) {\n    for (i = 0; i < length; i++) {\n      let callable = callablesRest[i];\n      let context = contextsRest[i];\n      if (callable) {\n        callable.call(context, newValue, oldValue);\n      } else {\n        context(newValue, oldValue);\n      }\n      contextsRest[i] = null;\n      callablesRest[i] = null;\n    }\n    poolUtilization[poolIndex] = false;\n  }\n}\n\nfunction hasSubscribers() {\n  return !!(this._context0 || this._context1 || this._context2 || this._contextsRest && this._contextsRest.length);\n}\n\nfunction hasSubscriber(context, callable) {\n  let has = this._context0 === context && this._callable0 === callable || this._context1 === context && this._callable1 === callable || this._context2 === context && this._callable2 === callable;\n  if (has) {\n    return true;\n  }\n  let index;\n  let contexts = this._contextsRest;\n  if (!contexts || (index = contexts.length) === 0) {\n    return false;\n  }\n  let callables = this._callablesRest;\n  while (index--) {\n    if (contexts[index] === context && callables[index] === callable) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction subscriberCollection() {\n  return function (target) {\n    target.prototype.addSubscriber = addSubscriber;\n    target.prototype.removeSubscriber = removeSubscriber;\n    target.prototype.callSubscribers = callSubscribers;\n    target.prototype.hasSubscribers = hasSubscribers;\n    target.prototype.hasSubscriber = hasSubscriber;\n  };\n}\n\nlet ExpressionObserver = (_dec = connectable(), _dec2 = subscriberCollection(), _dec(_class = _dec2(_class = class ExpressionObserver {\n  constructor(scope, expression, observerLocator, lookupFunctions) {\n    this.scope = scope;\n    this.expression = expression;\n    this.observerLocator = observerLocator;\n    this.lookupFunctions = lookupFunctions;\n  }\n\n  getValue() {\n    return this.expression.evaluate(this.scope, this.lookupFunctions);\n  }\n\n  setValue(newValue) {\n    this.expression.assign(this.scope, newValue);\n  }\n\n  subscribe(context, callable) {\n    if (!this.hasSubscribers()) {\n      this.oldValue = this.expression.evaluate(this.scope, this.lookupFunctions);\n      this.expression.connect(this, this.scope);\n    }\n    this.addSubscriber(context, callable);\n    if (arguments.length === 1 && context instanceof Function) {\n      return {\n        dispose: () => {\n          this.unsubscribe(context, callable);\n        }\n      };\n    }\n  }\n\n  unsubscribe(context, callable) {\n    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {\n      this.unobserve(true);\n      this.oldValue = undefined;\n    }\n  }\n\n  call() {\n    let newValue = this.expression.evaluate(this.scope, this.lookupFunctions);\n    let oldValue = this.oldValue;\n    if (newValue !== oldValue) {\n      this.oldValue = newValue;\n      this.callSubscribers(newValue, oldValue);\n    }\n    this._version++;\n    this.expression.connect(this, this.scope);\n    this.unobserve(false);\n  }\n}) || _class) || _class);\n\nfunction isIndex(s) {\n  return +s === s >>> 0;\n}\n\nfunction toNumber(s) {\n  return +s;\n}\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n\nfunction ArraySplice() {}\n\nArraySplice.prototype = {\n  calcEditDistances: function (current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    let rowCount = oldEnd - oldStart + 1;\n    let columnCount = currentEnd - currentStart + 1;\n    let distances = new Array(rowCount);\n    let north;\n    let west;\n\n    for (let i = 0; i < rowCount; ++i) {\n      distances[i] = new Array(columnCount);\n      distances[i][0] = i;\n    }\n\n    for (let j = 0; j < columnCount; ++j) {\n      distances[0][j] = j;\n    }\n\n    for (let i = 1; i < rowCount; ++i) {\n      for (let j = 1; j < columnCount; ++j) {\n        if (this.equals(current[currentStart + j - 1], old[oldStart + i - 1])) {\n          distances[i][j] = distances[i - 1][j - 1];\n        } else {\n          north = distances[i - 1][j] + 1;\n          west = distances[i][j - 1] + 1;\n          distances[i][j] = north < west ? north : west;\n        }\n      }\n    }\n\n    return distances;\n  },\n\n  spliceOperationsFromEditDistances: function (distances) {\n    let i = distances.length - 1;\n    let j = distances[0].length - 1;\n    let current = distances[i][j];\n    let edits = [];\n    while (i > 0 || j > 0) {\n      if (i === 0) {\n        edits.push(EDIT_ADD);\n        j--;\n        continue;\n      }\n      if (j === 0) {\n        edits.push(EDIT_DELETE);\n        i--;\n        continue;\n      }\n      let northWest = distances[i - 1][j - 1];\n      let west = distances[i - 1][j];\n      let north = distances[i][j - 1];\n\n      let min;\n      if (west < north) {\n        min = west < northWest ? west : northWest;\n      } else {\n        min = north < northWest ? north : northWest;\n      }\n\n      if (min === northWest) {\n        if (northWest === current) {\n          edits.push(EDIT_LEAVE);\n        } else {\n          edits.push(EDIT_UPDATE);\n          current = northWest;\n        }\n        i--;\n        j--;\n      } else if (min === west) {\n        edits.push(EDIT_DELETE);\n        i--;\n        current = west;\n      } else {\n        edits.push(EDIT_ADD);\n        j--;\n        current = north;\n      }\n    }\n\n    edits.reverse();\n    return edits;\n  },\n\n  calcSplices: function (current, currentStart, currentEnd, old, oldStart, oldEnd) {\n    let prefixCount = 0;\n    let suffixCount = 0;\n\n    let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n    if (currentStart === 0 && oldStart === 0) {\n      prefixCount = this.sharedPrefix(current, old, minLength);\n    }\n\n    if (currentEnd === current.length && oldEnd === old.length) {\n      suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);\n    }\n\n    currentStart += prefixCount;\n    oldStart += prefixCount;\n    currentEnd -= suffixCount;\n    oldEnd -= suffixCount;\n\n    if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {\n      return [];\n    }\n\n    if (currentStart === currentEnd) {\n      let splice = newSplice(currentStart, [], 0);\n      while (oldStart < oldEnd) {\n        splice.removed.push(old[oldStart++]);\n      }\n\n      return [splice];\n    } else if (oldStart === oldEnd) {\n      return [newSplice(currentStart, [], currentEnd - currentStart)];\n    }\n\n    let ops = this.spliceOperationsFromEditDistances(this.calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));\n\n    let splice = undefined;\n    let splices = [];\n    let index = currentStart;\n    let oldIndex = oldStart;\n    for (let i = 0; i < ops.length; ++i) {\n      switch (ops[i]) {\n        case EDIT_LEAVE:\n          if (splice) {\n            splices.push(splice);\n            splice = undefined;\n          }\n\n          index++;\n          oldIndex++;\n          break;\n        case EDIT_UPDATE:\n          if (!splice) {\n            splice = newSplice(index, [], 0);\n          }\n\n          splice.addedCount++;\n          index++;\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n        case EDIT_ADD:\n          if (!splice) {\n            splice = newSplice(index, [], 0);\n          }\n\n          splice.addedCount++;\n          index++;\n          break;\n        case EDIT_DELETE:\n          if (!splice) {\n            splice = newSplice(index, [], 0);\n          }\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n      }\n    }\n\n    if (splice) {\n      splices.push(splice);\n    }\n    return splices;\n  },\n\n  sharedPrefix: function (current, old, searchLength) {\n    for (let i = 0; i < searchLength; ++i) {\n      if (!this.equals(current[i], old[i])) {\n        return i;\n      }\n    }\n\n    return searchLength;\n  },\n\n  sharedSuffix: function (current, old, searchLength) {\n    let index1 = current.length;\n    let index2 = old.length;\n    let count = 0;\n    while (count < searchLength && this.equals(current[--index1], old[--index2])) {\n      count++;\n    }\n\n    return count;\n  },\n\n  calculateSplices: function (current, previous) {\n    return this.calcSplices(current, 0, current.length, previous, 0, previous.length);\n  },\n\n  equals: function (currentValue, previousValue) {\n    return currentValue === previousValue;\n  }\n};\n\nlet arraySplice = new ArraySplice();\n\nfunction calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {\n  return arraySplice.calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd);\n}\n\nfunction intersect(start1, end1, start2, end2) {\n  if (end1 < start2 || end2 < start1) {\n    return -1;\n  }\n\n  if (end1 === start2 || end2 === start1) {\n    return 0;\n  }\n\n  if (start1 < start2) {\n    if (end1 < end2) {\n      return end1 - start2;\n    }\n\n    return end2 - start2;\n  }\n\n  if (end2 < end1) {\n    return end2 - start1;\n  }\n\n  return end1 - start1;\n}\n\nfunction mergeSplice(splices, index, removed, addedCount) {\n  let splice = newSplice(index, removed, addedCount);\n\n  let inserted = false;\n  let insertionOffset = 0;\n\n  for (let i = 0; i < splices.length; i++) {\n    let current = splices[i];\n    current.index += insertionOffset;\n\n    if (inserted) {\n      continue;\n    }\n\n    let intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);\n\n    if (intersectCount >= 0) {\n\n      splices.splice(i, 1);\n      i--;\n\n      insertionOffset -= current.addedCount - current.removed.length;\n\n      splice.addedCount += current.addedCount - intersectCount;\n      let deleteCount = splice.removed.length + current.removed.length - intersectCount;\n\n      if (!splice.addedCount && !deleteCount) {\n        inserted = true;\n      } else {\n        let currentRemoved = current.removed;\n\n        if (splice.index < current.index) {\n          let prepend = splice.removed.slice(0, current.index - splice.index);\n          Array.prototype.push.apply(prepend, currentRemoved);\n          currentRemoved = prepend;\n        }\n\n        if (splice.index + splice.removed.length > current.index + current.addedCount) {\n          let append = splice.removed.slice(current.index + current.addedCount - splice.index);\n          Array.prototype.push.apply(currentRemoved, append);\n        }\n\n        splice.removed = currentRemoved;\n        if (current.index < splice.index) {\n          splice.index = current.index;\n        }\n      }\n    } else if (splice.index < current.index) {\n\n      inserted = true;\n\n      splices.splice(i, 0, splice);\n      i++;\n\n      let offset = splice.addedCount - splice.removed.length;\n      current.index += offset;\n      insertionOffset += offset;\n    }\n  }\n\n  if (!inserted) {\n    splices.push(splice);\n  }\n}\n\nfunction createInitialSplices(array, changeRecords) {\n  let splices = [];\n\n  for (let i = 0; i < changeRecords.length; i++) {\n    let record = changeRecords[i];\n    switch (record.type) {\n      case 'splice':\n        mergeSplice(splices, record.index, record.removed.slice(), record.addedCount);\n        break;\n      case 'add':\n      case 'update':\n      case 'delete':\n        if (!isIndex(record.name)) {\n          continue;\n        }\n\n        let index = toNumber(record.name);\n        if (index < 0) {\n          continue;\n        }\n\n        mergeSplice(splices, index, [record.oldValue], record.type === 'delete' ? 0 : 1);\n        break;\n      default:\n        console.error('Unexpected record type: ' + JSON.stringify(record));\n        break;\n    }\n  }\n\n  return splices;\n}\n\nfunction projectArraySplices(array, changeRecords) {\n  let splices = [];\n\n  createInitialSplices(array, changeRecords).forEach(function (splice) {\n    if (splice.addedCount === 1 && splice.removed.length === 1) {\n      if (splice.removed[0] !== array[splice.index]) {\n        splices.push(splice);\n      }\n\n      return;\n    }\n\n    splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));\n  });\n\n  return splices;\n}\n\nfunction newRecord(type, object, key, oldValue) {\n  return {\n    type: type,\n    object: object,\n    key: key,\n    oldValue: oldValue\n  };\n}\n\nfunction getChangeRecords(map) {\n  let entries = new Array(map.size);\n  let keys = map.keys();\n  let i = 0;\n  let item;\n\n  while (item = keys.next()) {\n    if (item.done) {\n      break;\n    }\n\n    entries[i] = newRecord('added', map, item.value);\n    i++;\n  }\n\n  return entries;\n}\n\nlet ModifyCollectionObserver = (_dec3 = subscriberCollection(), _dec3(_class2 = class ModifyCollectionObserver {\n  constructor(taskQueue, collection) {\n    this.taskQueue = taskQueue;\n    this.queued = false;\n    this.changeRecords = null;\n    this.oldCollection = null;\n    this.collection = collection;\n    this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';\n  }\n\n  subscribe(context, callable) {\n    this.addSubscriber(context, callable);\n  }\n\n  unsubscribe(context, callable) {\n    this.removeSubscriber(context, callable);\n  }\n\n  addChangeRecord(changeRecord) {\n    if (!this.hasSubscribers() && !this.lengthObserver) {\n      return;\n    }\n\n    if (changeRecord.type === 'splice') {\n      let index = changeRecord.index;\n      let arrayLength = changeRecord.object.length;\n      if (index > arrayLength) {\n        index = arrayLength - changeRecord.addedCount;\n      } else if (index < 0) {\n        index = arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;\n      }\n      if (index < 0) {\n        index = 0;\n      }\n      changeRecord.index = index;\n    }\n\n    if (this.changeRecords === null) {\n      this.changeRecords = [changeRecord];\n    } else {\n      this.changeRecords.push(changeRecord);\n    }\n\n    if (!this.queued) {\n      this.queued = true;\n      this.taskQueue.queueMicroTask(this);\n    }\n  }\n\n  flushChangeRecords() {\n    if (this.changeRecords && this.changeRecords.length || this.oldCollection) {\n      this.call();\n    }\n  }\n\n  reset(oldCollection) {\n    this.oldCollection = oldCollection;\n\n    if (this.hasSubscribers() && !this.queued) {\n      this.queued = true;\n      this.taskQueue.queueMicroTask(this);\n    }\n  }\n\n  getLengthObserver() {\n    return this.lengthObserver || (this.lengthObserver = new CollectionLengthObserver(this.collection));\n  }\n\n  call() {\n    let changeRecords = this.changeRecords;\n    let oldCollection = this.oldCollection;\n    let records;\n\n    this.queued = false;\n    this.changeRecords = [];\n    this.oldCollection = null;\n\n    if (this.hasSubscribers()) {\n      if (oldCollection) {\n        if (this.collection instanceof Map || this.collection instanceof Set) {\n          records = getChangeRecords(oldCollection);\n        } else {\n          records = calcSplices(this.collection, 0, this.collection.length, oldCollection, 0, oldCollection.length);\n        }\n      } else {\n        if (this.collection instanceof Map || this.collection instanceof Set) {\n          records = changeRecords;\n        } else {\n          records = projectArraySplices(this.collection, changeRecords);\n        }\n      }\n\n      this.callSubscribers(records);\n    }\n\n    if (this.lengthObserver) {\n      this.lengthObserver.call(this.collection[this.lengthPropertyName]);\n    }\n  }\n}) || _class2);\n\nlet CollectionLengthObserver = (_dec4 = subscriberCollection(), _dec4(_class3 = class CollectionLengthObserver {\n  constructor(collection) {\n    this.collection = collection;\n    this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';\n    this.currentValue = collection[this.lengthPropertyName];\n  }\n\n  getValue() {\n    return this.collection[this.lengthPropertyName];\n  }\n\n  setValue(newValue) {\n    this.collection[this.lengthPropertyName] = newValue;\n  }\n\n  subscribe(context, callable) {\n    this.addSubscriber(context, callable);\n  }\n\n  unsubscribe(context, callable) {\n    this.removeSubscriber(context, callable);\n  }\n\n  call(newValue) {\n    let oldValue = this.currentValue;\n    this.callSubscribers(newValue, oldValue);\n    this.currentValue = newValue;\n  }\n}) || _class3);\n\nconst arrayProto = Array.prototype;\nconst pop = arrayProto.pop;\nconst push = arrayProto.push;\nconst reverse = arrayProto.reverse;\nconst shift = arrayProto.shift;\nconst sort = arrayProto.sort;\nconst splice = arrayProto.splice;\nconst unshift = arrayProto.unshift;\n\nif (arrayProto.__au_patched__) {\n  aurelia_logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]('array-observation').warn('Detected 2nd attempt of patching array from Aurelia binding.' + ' This is probably caused by dependency mismatch between core modules and a 3rd party plugin.' + ' Please see https://github.com/aurelia/cli/pull/906 if you are using webpack.');\n} else {\n  Reflect.defineProperty(arrayProto, '__au_patched__', { value: 1 });\n  arrayProto.pop = function () {\n    let notEmpty = this.length > 0;\n    let methodCallResult = pop.apply(this, arguments);\n    if (notEmpty && this.__array_observer__ !== undefined) {\n      this.__array_observer__.addChangeRecord({\n        type: 'delete',\n        object: this,\n        name: this.length,\n        oldValue: methodCallResult\n      });\n    }\n    return methodCallResult;\n  };\n\n  arrayProto.push = function () {\n    let methodCallResult = push.apply(this, arguments);\n    if (this.__array_observer__ !== undefined) {\n      this.__array_observer__.addChangeRecord({\n        type: 'splice',\n        object: this,\n        index: this.length - arguments.length,\n        removed: [],\n        addedCount: arguments.length\n      });\n    }\n    return methodCallResult;\n  };\n\n  arrayProto.reverse = function () {\n    let oldArray;\n    if (this.__array_observer__ !== undefined) {\n      this.__array_observer__.flushChangeRecords();\n      oldArray = this.slice();\n    }\n    let methodCallResult = reverse.apply(this, arguments);\n    if (this.__array_observer__ !== undefined) {\n      this.__array_observer__.reset(oldArray);\n    }\n    return methodCallResult;\n  };\n\n  arrayProto.shift = function () {\n    let notEmpty = this.length > 0;\n    let methodCallResult = shift.apply(this, arguments);\n    if (notEmpty && this.__array_observer__ !== undefined) {\n      this.__array_observer__.addChangeRecord({\n        type: 'delete',\n        object: this,\n        name: 0,\n        oldValue: methodCallResult\n      });\n    }\n    return methodCallResult;\n  };\n\n  arrayProto.sort = function () {\n    let oldArray;\n    if (this.__array_observer__ !== undefined) {\n      this.__array_observer__.flushChangeRecords();\n      oldArray = this.slice();\n    }\n    let methodCallResult = sort.apply(this, arguments);\n    if (this.__array_observer__ !== undefined) {\n      this.__array_observer__.reset(oldArray);\n    }\n    return methodCallResult;\n  };\n\n  arrayProto.splice = function () {\n    let methodCallResult = splice.apply(this, arguments);\n    if (this.__array_observer__ !== undefined) {\n      this.__array_observer__.addChangeRecord({\n        type: 'splice',\n        object: this,\n        index: +arguments[0],\n        removed: methodCallResult,\n        addedCount: arguments.length > 2 ? arguments.length - 2 : 0\n      });\n    }\n    return methodCallResult;\n  };\n\n  arrayProto.unshift = function () {\n    let methodCallResult = unshift.apply(this, arguments);\n    if (this.__array_observer__ !== undefined) {\n      this.__array_observer__.addChangeRecord({\n        type: 'splice',\n        object: this,\n        index: 0,\n        removed: [],\n        addedCount: arguments.length\n      });\n    }\n    return methodCallResult;\n  };\n}\n\nfunction getArrayObserver(taskQueue, array) {\n  return ModifyArrayObserver.for(taskQueue, array);\n}\n\nlet ModifyArrayObserver = class ModifyArrayObserver extends ModifyCollectionObserver {\n  constructor(taskQueue, array) {\n    super(taskQueue, array);\n  }\n\n  static for(taskQueue, array) {\n    if (!('__array_observer__' in array)) {\n      Reflect.defineProperty(array, '__array_observer__', {\n        value: ModifyArrayObserver.create(taskQueue, array),\n        enumerable: false, configurable: false\n      });\n    }\n    return array.__array_observer__;\n  }\n\n  static create(taskQueue, array) {\n    return new ModifyArrayObserver(taskQueue, array);\n  }\n};\n\n\nlet Expression = class Expression {\n  constructor() {\n    this.isAssignable = false;\n  }\n\n  evaluate(scope, lookupFunctions, args) {\n    throw new Error(`Binding expression \"${this}\" cannot be evaluated.`);\n  }\n\n  assign(scope, value, lookupFunctions) {\n    throw new Error(`Binding expression \"${this}\" cannot be assigned to.`);\n  }\n\n  toString() {\n    return  false ? undefined : super.toString();\n  }\n};\n\nlet BindingBehavior = class BindingBehavior extends Expression {\n  constructor(expression, name, args) {\n    super();\n\n    this.expression = expression;\n    this.name = name;\n    this.args = args;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    return this.expression.evaluate(scope, lookupFunctions);\n  }\n\n  assign(scope, value, lookupFunctions) {\n    return this.expression.assign(scope, value, lookupFunctions);\n  }\n\n  accept(visitor) {\n    return visitor.visitBindingBehavior(this);\n  }\n\n  connect(binding, scope) {\n    this.expression.connect(binding, scope);\n  }\n\n  bind(binding, scope, lookupFunctions) {\n    if (this.expression.expression && this.expression.bind) {\n      this.expression.bind(binding, scope, lookupFunctions);\n    }\n    let behavior = lookupFunctions.bindingBehaviors(this.name);\n    if (!behavior) {\n      throw new Error(`No BindingBehavior named \"${this.name}\" was found!`);\n    }\n    let behaviorKey = `behavior-${this.name}`;\n    if (binding[behaviorKey]) {\n      throw new Error(`A binding behavior named \"${this.name}\" has already been applied to \"${this.expression}\"`);\n    }\n    binding[behaviorKey] = behavior;\n    behavior.bind.apply(behavior, [binding, scope].concat(evalList(scope, this.args, binding.lookupFunctions)));\n  }\n\n  unbind(binding, scope) {\n    let behaviorKey = `behavior-${this.name}`;\n    binding[behaviorKey].unbind(binding, scope);\n    binding[behaviorKey] = null;\n    if (this.expression.expression && this.expression.unbind) {\n      this.expression.unbind(binding, scope);\n    }\n  }\n};\n\nlet ValueConverter = class ValueConverter extends Expression {\n  constructor(expression, name, args) {\n    super();\n\n    this.expression = expression;\n    this.name = name;\n    this.args = args;\n    this.allArgs = [expression].concat(args);\n  }\n\n  evaluate(scope, lookupFunctions) {\n    let converter = lookupFunctions.valueConverters(this.name);\n    if (!converter) {\n      throw new Error(`No ValueConverter named \"${this.name}\" was found!`);\n    }\n\n    if ('toView' in converter) {\n      return converter.toView.apply(converter, evalList(scope, this.allArgs, lookupFunctions));\n    }\n\n    return this.allArgs[0].evaluate(scope, lookupFunctions);\n  }\n\n  assign(scope, value, lookupFunctions) {\n    let converter = lookupFunctions.valueConverters(this.name);\n    if (!converter) {\n      throw new Error(`No ValueConverter named \"${this.name}\" was found!`);\n    }\n\n    if ('fromView' in converter) {\n      value = converter.fromView.apply(converter, [value].concat(evalList(scope, this.args, lookupFunctions)));\n    }\n\n    return this.allArgs[0].assign(scope, value, lookupFunctions);\n  }\n\n  accept(visitor) {\n    return visitor.visitValueConverter(this);\n  }\n\n  connect(binding, scope) {\n    let expressions = this.allArgs;\n    let i = expressions.length;\n    while (i--) {\n      expressions[i].connect(binding, scope);\n    }\n    let converter = binding.lookupFunctions.valueConverters(this.name);\n    if (!converter) {\n      throw new Error(`No ValueConverter named \"${this.name}\" was found!`);\n    }\n    let signals = converter.signals;\n    if (signals === undefined) {\n      return;\n    }\n    i = signals.length;\n    while (i--) {\n      connectBindingToSignal(binding, signals[i]);\n    }\n  }\n};\n\nlet Assign = class Assign extends Expression {\n  constructor(target, value) {\n    super();\n\n    this.target = target;\n    this.value = value;\n    this.isAssignable = true;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    return this.target.assign(scope, this.value.evaluate(scope, lookupFunctions));\n  }\n\n  accept(vistor) {\n    vistor.visitAssign(this);\n  }\n\n  connect(binding, scope) {}\n\n  assign(scope, value) {\n    this.value.assign(scope, value);\n    this.target.assign(scope, value);\n  }\n};\n\nlet Conditional = class Conditional extends Expression {\n  constructor(condition, yes, no) {\n    super();\n\n    this.condition = condition;\n    this.yes = yes;\n    this.no = no;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    return !!this.condition.evaluate(scope, lookupFunctions) ? this.yes.evaluate(scope, lookupFunctions) : this.no.evaluate(scope, lookupFunctions);\n  }\n\n  accept(visitor) {\n    return visitor.visitConditional(this);\n  }\n\n  connect(binding, scope) {\n    this.condition.connect(binding, scope);\n    if (this.condition.evaluate(scope)) {\n      this.yes.connect(binding, scope);\n    } else {\n      this.no.connect(binding, scope);\n    }\n  }\n};\n\nlet AccessThis = class AccessThis extends Expression {\n  constructor(ancestor) {\n    super();\n    this.ancestor = ancestor;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    let oc = scope.overrideContext;\n    let i = this.ancestor;\n    while (i-- && oc) {\n      oc = oc.parentOverrideContext;\n    }\n    return i < 1 && oc ? oc.bindingContext : undefined;\n  }\n\n  accept(visitor) {\n    return visitor.visitAccessThis(this);\n  }\n\n  connect(binding, scope) {}\n};\n\nlet AccessScope = class AccessScope extends Expression {\n  constructor(name, ancestor) {\n    super();\n\n    this.name = name;\n    this.ancestor = ancestor;\n    this.isAssignable = true;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    let context = getContextFor(this.name, scope, this.ancestor);\n    return context[this.name];\n  }\n\n  assign(scope, value) {\n    let context = getContextFor(this.name, scope, this.ancestor);\n    return context ? context[this.name] = value : undefined;\n  }\n\n  accept(visitor) {\n    return visitor.visitAccessScope(this);\n  }\n\n  connect(binding, scope) {\n    let context = getContextFor(this.name, scope, this.ancestor);\n    binding.observeProperty(context, this.name);\n  }\n};\n\nlet AccessMember = class AccessMember extends Expression {\n  constructor(object, name) {\n    super();\n\n    this.object = object;\n    this.name = name;\n    this.isAssignable = true;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    let instance = this.object.evaluate(scope, lookupFunctions);\n    return instance === null || instance === undefined ? instance : instance[this.name];\n  }\n\n  assign(scope, value) {\n    let instance = this.object.evaluate(scope);\n\n    if (instance === null || instance === undefined) {\n      instance = {};\n      this.object.assign(scope, instance);\n    }\n\n    instance[this.name] = value;\n    return value;\n  }\n\n  accept(visitor) {\n    return visitor.visitAccessMember(this);\n  }\n\n  connect(binding, scope) {\n    this.object.connect(binding, scope);\n    let obj = this.object.evaluate(scope);\n    if (obj) {\n      binding.observeProperty(obj, this.name);\n    }\n  }\n};\n\nlet AccessKeyed = class AccessKeyed extends Expression {\n  constructor(object, key) {\n    super();\n\n    this.object = object;\n    this.key = key;\n    this.isAssignable = true;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    let instance = this.object.evaluate(scope, lookupFunctions);\n    let lookup = this.key.evaluate(scope, lookupFunctions);\n    return getKeyed(instance, lookup);\n  }\n\n  assign(scope, value) {\n    let instance = this.object.evaluate(scope);\n    let lookup = this.key.evaluate(scope);\n    return setKeyed(instance, lookup, value);\n  }\n\n  accept(visitor) {\n    return visitor.visitAccessKeyed(this);\n  }\n\n  connect(binding, scope) {\n    this.object.connect(binding, scope);\n    let obj = this.object.evaluate(scope);\n    if (obj instanceof Object) {\n      this.key.connect(binding, scope);\n      let key = this.key.evaluate(scope);\n\n      if (key !== null && key !== undefined && !(Array.isArray(obj) && typeof key === 'number')) {\n        binding.observeProperty(obj, key);\n      }\n    }\n  }\n};\n\nlet CallScope = class CallScope extends Expression {\n  constructor(name, args, ancestor) {\n    super();\n\n    this.name = name;\n    this.args = args;\n    this.ancestor = ancestor;\n  }\n\n  evaluate(scope, lookupFunctions, mustEvaluate) {\n    let args = evalList(scope, this.args, lookupFunctions);\n    let context = getContextFor(this.name, scope, this.ancestor);\n    let func = getFunction(context, this.name, mustEvaluate);\n    if (func) {\n      return func.apply(context, args);\n    }\n    return undefined;\n  }\n\n  accept(visitor) {\n    return visitor.visitCallScope(this);\n  }\n\n  connect(binding, scope) {\n    let args = this.args;\n    let i = args.length;\n    while (i--) {\n      args[i].connect(binding, scope);\n    }\n  }\n};\n\nlet CallMember = class CallMember extends Expression {\n  constructor(object, name, args) {\n    super();\n\n    this.object = object;\n    this.name = name;\n    this.args = args;\n  }\n\n  evaluate(scope, lookupFunctions, mustEvaluate) {\n    let instance = this.object.evaluate(scope, lookupFunctions);\n    let args = evalList(scope, this.args, lookupFunctions);\n    let func = getFunction(instance, this.name, mustEvaluate);\n    if (func) {\n      return func.apply(instance, args);\n    }\n    return undefined;\n  }\n\n  accept(visitor) {\n    return visitor.visitCallMember(this);\n  }\n\n  connect(binding, scope) {\n    this.object.connect(binding, scope);\n    let obj = this.object.evaluate(scope);\n    if (getFunction(obj, this.name, false)) {\n      let args = this.args;\n      let i = args.length;\n      while (i--) {\n        args[i].connect(binding, scope);\n      }\n    }\n  }\n};\n\nlet CallFunction = class CallFunction extends Expression {\n  constructor(func, args) {\n    super();\n\n    this.func = func;\n    this.args = args;\n  }\n\n  evaluate(scope, lookupFunctions, mustEvaluate) {\n    let func = this.func.evaluate(scope, lookupFunctions);\n    if (typeof func === 'function') {\n      return func.apply(null, evalList(scope, this.args, lookupFunctions));\n    }\n    if (!mustEvaluate && (func === null || func === undefined)) {\n      return undefined;\n    }\n    throw new Error(`${this.func} is not a function`);\n  }\n\n  accept(visitor) {\n    return visitor.visitCallFunction(this);\n  }\n\n  connect(binding, scope) {\n    this.func.connect(binding, scope);\n    let func = this.func.evaluate(scope);\n    if (typeof func === 'function') {\n      let args = this.args;\n      let i = args.length;\n      while (i--) {\n        args[i].connect(binding, scope);\n      }\n    }\n  }\n};\n\nlet Binary = class Binary extends Expression {\n  constructor(operation, left, right) {\n    super();\n\n    this.operation = operation;\n    this.left = left;\n    this.right = right;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    let left = this.left.evaluate(scope, lookupFunctions);\n\n    switch (this.operation) {\n      case '&&':\n        return left && this.right.evaluate(scope, lookupFunctions);\n      case '||':\n        return left || this.right.evaluate(scope, lookupFunctions);\n    }\n\n    let right = this.right.evaluate(scope, lookupFunctions);\n\n    switch (this.operation) {\n      case '==':\n        return left == right;\n      case '===':\n        return left === right;\n      case '!=':\n        return left != right;\n      case '!==':\n        return left !== right;\n      case 'instanceof':\n        return typeof right === 'function' && left instanceof right;\n      case 'in':\n        return typeof right === 'object' && right !== null && left in right;\n    }\n\n    if (left === null || right === null || left === undefined || right === undefined) {\n      switch (this.operation) {\n        case '+':\n          if (left !== null && left !== undefined) return left;\n          if (right !== null && right !== undefined) return right;\n          return 0;\n        case '-':\n          if (left !== null && left !== undefined) return left;\n          if (right !== null && right !== undefined) return 0 - right;\n          return 0;\n      }\n\n      return null;\n    }\n\n    switch (this.operation) {\n      case '+':\n        return autoConvertAdd(left, right);\n      case '-':\n        return left - right;\n      case '*':\n        return left * right;\n      case '/':\n        return left / right;\n      case '%':\n        return left % right;\n      case '<':\n        return left < right;\n      case '>':\n        return left > right;\n      case '<=':\n        return left <= right;\n      case '>=':\n        return left >= right;\n      case '^':\n        return left ^ right;\n    }\n\n    throw new Error(`Internal error [${this.operation}] not handled`);\n  }\n\n  accept(visitor) {\n    return visitor.visitBinary(this);\n  }\n\n  connect(binding, scope) {\n    this.left.connect(binding, scope);\n    let left = this.left.evaluate(scope);\n    if (this.operation === '&&' && !left || this.operation === '||' && left) {\n      return;\n    }\n    this.right.connect(binding, scope);\n  }\n};\n\nlet Unary = class Unary extends Expression {\n  constructor(operation, expression) {\n    super();\n\n    this.operation = operation;\n    this.expression = expression;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    switch (this.operation) {\n      case '!':\n        return !this.expression.evaluate(scope, lookupFunctions);\n      case 'typeof':\n        return typeof this.expression.evaluate(scope, lookupFunctions);\n      case 'void':\n        return void this.expression.evaluate(scope, lookupFunctions);\n    }\n\n    throw new Error(`Internal error [${this.operation}] not handled`);\n  }\n\n  accept(visitor) {\n    return visitor.visitPrefix(this);\n  }\n\n  connect(binding, scope) {\n    this.expression.connect(binding, scope);\n  }\n};\n\nlet LiteralPrimitive = class LiteralPrimitive extends Expression {\n  constructor(value) {\n    super();\n\n    this.value = value;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    return this.value;\n  }\n\n  accept(visitor) {\n    return visitor.visitLiteralPrimitive(this);\n  }\n\n  connect(binding, scope) {}\n};\n\nlet LiteralString = class LiteralString extends Expression {\n  constructor(value) {\n    super();\n\n    this.value = value;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    return this.value;\n  }\n\n  accept(visitor) {\n    return visitor.visitLiteralString(this);\n  }\n\n  connect(binding, scope) {}\n};\n\nlet LiteralTemplate = class LiteralTemplate extends Expression {\n  constructor(cooked, expressions, raw, tag) {\n    super();\n    this.cooked = cooked;\n    this.expressions = expressions || [];\n    this.length = this.expressions.length;\n    this.tagged = tag !== undefined;\n    if (this.tagged) {\n      this.cooked.raw = raw;\n      this.tag = tag;\n      if (tag instanceof AccessScope) {\n        this.contextType = 'Scope';\n      } else if (tag instanceof AccessMember || tag instanceof AccessKeyed) {\n        this.contextType = 'Object';\n      } else {\n        throw new Error(`${this.tag} is not a valid template tag`);\n      }\n    }\n  }\n\n  getScopeContext(scope, lookupFunctions) {\n    return getContextFor(this.tag.name, scope, this.tag.ancestor);\n  }\n\n  getObjectContext(scope, lookupFunctions) {\n    return this.tag.object.evaluate(scope, lookupFunctions);\n  }\n\n  evaluate(scope, lookupFunctions, mustEvaluate) {\n    const results = new Array(this.length);\n    for (let i = 0; i < this.length; i++) {\n      results[i] = this.expressions[i].evaluate(scope, lookupFunctions);\n    }\n    if (this.tagged) {\n      const func = this.tag.evaluate(scope, lookupFunctions);\n      if (typeof func === 'function') {\n        const context = this[`get${this.contextType}Context`](scope, lookupFunctions);\n        return func.call(context, this.cooked, ...results);\n      }\n      if (!mustEvaluate) {\n        return null;\n      }\n      throw new Error(`${this.tag} is not a function`);\n    }\n    let result = this.cooked[0];\n    for (let i = 0; i < this.length; i++) {\n      result = String.prototype.concat(result, results[i], this.cooked[i + 1]);\n    }\n    return result;\n  }\n\n  accept(visitor) {\n    return visitor.visitLiteralTemplate(this);\n  }\n\n  connect(binding, scope) {\n    for (let i = 0; i < this.length; i++) {\n      this.expressions[i].connect(binding, scope);\n    }\n    if (this.tagged) {\n      this.tag.connect(binding, scope);\n    }\n  }\n};\n\nlet LiteralArray = class LiteralArray extends Expression {\n  constructor(elements) {\n    super();\n\n    this.elements = elements;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    let elements = this.elements;\n    let result = [];\n\n    for (let i = 0, length = elements.length; i < length; ++i) {\n      result[i] = elements[i].evaluate(scope, lookupFunctions);\n    }\n\n    return result;\n  }\n\n  accept(visitor) {\n    return visitor.visitLiteralArray(this);\n  }\n\n  connect(binding, scope) {\n    let length = this.elements.length;\n    for (let i = 0; i < length; i++) {\n      this.elements[i].connect(binding, scope);\n    }\n  }\n};\n\nlet LiteralObject = class LiteralObject extends Expression {\n  constructor(keys, values) {\n    super();\n\n    this.keys = keys;\n    this.values = values;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    let instance = {};\n    let keys = this.keys;\n    let values = this.values;\n\n    for (let i = 0, length = keys.length; i < length; ++i) {\n      instance[keys[i]] = values[i].evaluate(scope, lookupFunctions);\n    }\n\n    return instance;\n  }\n\n  accept(visitor) {\n    return visitor.visitLiteralObject(this);\n  }\n\n  connect(binding, scope) {\n    let length = this.keys.length;\n    for (let i = 0; i < length; i++) {\n      this.values[i].connect(binding, scope);\n    }\n  }\n};\n\nfunction evalList(scope, list, lookupFunctions) {\n  const length = list.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    result[i] = list[i].evaluate(scope, lookupFunctions);\n  }\n  return result;\n}\n\nfunction autoConvertAdd(a, b) {\n  if (a !== null && b !== null) {\n    if (typeof a === 'string' && typeof b !== 'string') {\n      return a + b.toString();\n    }\n\n    if (typeof a !== 'string' && typeof b === 'string') {\n      return a.toString() + b;\n    }\n\n    return a + b;\n  }\n\n  if (a !== null) {\n    return a;\n  }\n\n  if (b !== null) {\n    return b;\n  }\n\n  return 0;\n}\n\nfunction getFunction(obj, name, mustExist) {\n  let func = obj === null || obj === undefined ? null : obj[name];\n  if (typeof func === 'function') {\n    return func;\n  }\n  if (!mustExist && (func === null || func === undefined)) {\n    return null;\n  }\n  throw new Error(`${name} is not a function`);\n}\n\nfunction getKeyed(obj, key) {\n  if (Array.isArray(obj)) {\n    return obj[parseInt(key, 10)];\n  } else if (obj) {\n    return obj[key];\n  } else if (obj === null || obj === undefined) {\n    return undefined;\n  }\n\n  return obj[key];\n}\n\nfunction setKeyed(obj, key, value) {\n  if (Array.isArray(obj)) {\n    let index = parseInt(key, 10);\n\n    if (obj.length <= index) {\n      obj.length = index + 1;\n    }\n\n    obj[index] = value;\n  } else {\n    obj[key] = value;\n  }\n\n  return value;\n}\n\nlet Unparser = null;\n\nif (false) {}\n\nlet ExpressionCloner = class ExpressionCloner {\n  cloneExpressionArray(array) {\n    let clonedArray = [];\n    let i = array.length;\n    while (i--) {\n      clonedArray[i] = array[i].accept(this);\n    }\n    return clonedArray;\n  }\n\n  visitBindingBehavior(behavior) {\n    return new BindingBehavior(behavior.expression.accept(this), behavior.name, this.cloneExpressionArray(behavior.args));\n  }\n\n  visitValueConverter(converter) {\n    return new ValueConverter(converter.expression.accept(this), converter.name, this.cloneExpressionArray(converter.args));\n  }\n\n  visitAssign(assign) {\n    return new Assign(assign.target.accept(this), assign.value.accept(this));\n  }\n\n  visitConditional(conditional) {\n    return new Conditional(conditional.condition.accept(this), conditional.yes.accept(this), conditional.no.accept(this));\n  }\n\n  visitAccessThis(access) {\n    return new AccessThis(access.ancestor);\n  }\n\n  visitAccessScope(access) {\n    return new AccessScope(access.name, access.ancestor);\n  }\n\n  visitAccessMember(access) {\n    return new AccessMember(access.object.accept(this), access.name);\n  }\n\n  visitAccessKeyed(access) {\n    return new AccessKeyed(access.object.accept(this), access.key.accept(this));\n  }\n\n  visitCallScope(call) {\n    return new CallScope(call.name, this.cloneExpressionArray(call.args), call.ancestor);\n  }\n\n  visitCallFunction(call) {\n    return new CallFunction(call.func.accept(this), this.cloneExpressionArray(call.args));\n  }\n\n  visitCallMember(call) {\n    return new CallMember(call.object.accept(this), call.name, this.cloneExpressionArray(call.args));\n  }\n\n  visitUnary(unary) {\n    return new Unary(prefix.operation, prefix.expression.accept(this));\n  }\n\n  visitBinary(binary) {\n    return new Binary(binary.operation, binary.left.accept(this), binary.right.accept(this));\n  }\n\n  visitLiteralPrimitive(literal) {\n    return new LiteralPrimitive(literal);\n  }\n\n  visitLiteralArray(literal) {\n    return new LiteralArray(this.cloneExpressionArray(literal.elements));\n  }\n\n  visitLiteralObject(literal) {\n    return new LiteralObject(literal.keys, this.cloneExpressionArray(literal.values));\n  }\n\n  visitLiteralString(literal) {\n    return new LiteralString(literal.value);\n  }\n\n  visitLiteralTemplate(literal) {\n    return new LiteralTemplate(literal.cooked, this.cloneExpressionArray(literal.expressions), literal.raw, literal.tag && literal.tag.accept(this));\n  }\n};\n\nfunction cloneExpression(expression) {\n  let visitor = new ExpressionCloner();\n  return expression.accept(visitor);\n}\n\nconst bindingMode = {\n  oneTime: 0,\n  toView: 1,\n  oneWay: 1,\n  twoWay: 2,\n  fromView: 3\n};\n\nlet Parser = class Parser {\n  constructor() {\n    this.cache = Object.create(null);\n  }\n\n  parse(src) {\n    src = src || '';\n\n    return this.cache[src] || (this.cache[src] = new ParserImplementation(src).parseBindingBehavior());\n  }\n};\n\nconst fromCharCode = String.fromCharCode;\n\nlet ParserImplementation = class ParserImplementation {\n  get raw() {\n    return this.src.slice(this.start, this.idx);\n  }\n\n  constructor(src) {\n    this.idx = 0;\n\n    this.start = 0;\n\n    this.src = src;\n    this.len = src.length;\n\n    this.tkn = T$EOF;\n\n    this.val = undefined;\n\n    this.ch = src.charCodeAt(0);\n  }\n\n  parseBindingBehavior() {\n    this.nextToken();\n    if (this.tkn & T$ExpressionTerminal) {\n      this.err('Invalid start of expression');\n    }\n    let result = this.parseValueConverter();\n    while (this.opt(T$Ampersand)) {\n      result = new BindingBehavior(result, this.val, this.parseVariadicArgs());\n    }\n    if (this.tkn !== T$EOF) {\n      this.err(`Unconsumed token ${this.raw}`);\n    }\n    return result;\n  }\n\n  parseValueConverter() {\n    let result = this.parseExpression();\n    while (this.opt(T$Bar)) {\n      result = new ValueConverter(result, this.val, this.parseVariadicArgs());\n    }\n    return result;\n  }\n\n  parseVariadicArgs() {\n    this.nextToken();\n    const result = [];\n    while (this.opt(T$Colon)) {\n      result.push(this.parseExpression());\n    }\n    return result;\n  }\n\n  parseExpression() {\n    let exprStart = this.idx;\n    let result = this.parseConditional();\n\n    while (this.tkn === T$Eq) {\n      if (!result.isAssignable) {\n        this.err(`Expression ${this.src.slice(exprStart, this.start)} is not assignable`);\n      }\n      this.nextToken();\n      exprStart = this.idx;\n      result = new Assign(result, this.parseConditional());\n    }\n    return result;\n  }\n\n  parseConditional() {\n    let result = this.parseBinary(0);\n\n    if (this.opt(T$Question)) {\n      let yes = this.parseExpression();\n      this.expect(T$Colon);\n      result = new Conditional(result, yes, this.parseExpression());\n    }\n    return result;\n  }\n\n  parseBinary(minPrecedence) {\n    let left = this.parseLeftHandSide(0);\n\n    while (this.tkn & T$BinaryOp) {\n      const opToken = this.tkn;\n      if ((opToken & T$Precedence) <= minPrecedence) {\n        break;\n      }\n      this.nextToken();\n      left = new Binary(TokenValues[opToken & T$TokenMask], left, this.parseBinary(opToken & T$Precedence));\n    }\n    return left;\n  }\n\n  parseLeftHandSide(context) {\n    let result;\n\n    primary: switch (this.tkn) {\n      case T$Plus:\n        this.nextToken();\n        return this.parseLeftHandSide(0);\n      case T$Minus:\n        this.nextToken();\n        return new Binary('-', new LiteralPrimitive(0), this.parseLeftHandSide(0));\n      case T$Bang:\n      case T$TypeofKeyword:\n      case T$VoidKeyword:\n        const op = TokenValues[this.tkn & T$TokenMask];\n        this.nextToken();\n        return new Unary(op, this.parseLeftHandSide(0));\n      case T$ParentScope:\n        {\n          do {\n            this.nextToken();\n            context++;\n            if (this.opt(T$Period)) {\n              if (this.tkn === T$Period) {\n                this.err();\n              }\n              continue;\n            } else if (this.tkn & T$AccessScopeTerminal) {\n              result = new AccessThis(context & C$Ancestor);\n\n              context = context & C$ShorthandProp | C$This;\n              break primary;\n            } else {\n              this.err();\n            }\n          } while (this.tkn === T$ParentScope);\n        }\n\n      case T$Identifier:\n        {\n          result = new AccessScope(this.val, context & C$Ancestor);\n          this.nextToken();\n          context = context & C$ShorthandProp | C$Scope;\n          break;\n        }\n      case T$ThisScope:\n        this.nextToken();\n        result = new AccessThis(0);\n        context = context & C$ShorthandProp | C$This;\n        break;\n      case T$LParen:\n        this.nextToken();\n        result = this.parseExpression();\n        this.expect(T$RParen);\n        context = C$Primary;\n        break;\n      case T$LBracket:\n        {\n          this.nextToken();\n          const elements = [];\n          if (this.tkn !== T$RBracket) {\n            do {\n              elements.push(this.parseExpression());\n            } while (this.opt(T$Comma));\n          }\n          this.expect(T$RBracket);\n          result = new LiteralArray(elements);\n          context = C$Primary;\n          break;\n        }\n      case T$LBrace:\n        {\n          const keys = [];\n          const values = [];\n          this.nextToken();\n          while (this.tkn !== T$RBrace) {\n            if (this.tkn & T$IdentifierOrKeyword) {\n              const { ch, tkn, idx } = this;\n              keys.push(this.val);\n              this.nextToken();\n              if (this.opt(T$Colon)) {\n                values.push(this.parseExpression());\n              } else {\n                this.ch = ch;\n                this.tkn = tkn;\n                this.idx = idx;\n                values.push(this.parseLeftHandSide(C$ShorthandProp));\n              }\n            } else if (this.tkn & T$Literal) {\n              keys.push(this.val);\n              this.nextToken();\n              this.expect(T$Colon);\n              values.push(this.parseExpression());\n            } else {\n              this.err();\n            }\n            if (this.tkn !== T$RBrace) {\n              this.expect(T$Comma);\n            }\n          }\n          this.expect(T$RBrace);\n          result = new LiteralObject(keys, values);\n          context = C$Primary;\n          break;\n        }\n      case T$StringLiteral:\n        result = new LiteralString(this.val);\n        this.nextToken();\n        context = C$Primary;\n        break;\n      case T$TemplateTail:\n        result = new LiteralTemplate([this.val]);\n        this.nextToken();\n        context = C$Primary;\n        break;\n      case T$TemplateContinuation:\n        result = this.parseTemplate(0);\n        context = C$Primary;\n        break;\n      case T$NumericLiteral:\n        {\n          result = new LiteralPrimitive(this.val);\n          this.nextToken();\n\n          break;\n        }\n      case T$NullKeyword:\n      case T$UndefinedKeyword:\n      case T$TrueKeyword:\n      case T$FalseKeyword:\n        result = new LiteralPrimitive(TokenValues[this.tkn & T$TokenMask]);\n        this.nextToken();\n        context = C$Primary;\n        break;\n      default:\n        if (this.idx >= this.len) {\n          this.err('Unexpected end of expression');\n        } else {\n          this.err();\n        }\n    }\n\n    if (context & C$ShorthandProp) {\n      return result;\n    }\n\n    let name = this.val;\n    while (this.tkn & T$MemberOrCallExpression) {\n      switch (this.tkn) {\n        case T$Period:\n          this.nextToken();\n          if (!(this.tkn & T$IdentifierOrKeyword)) {\n            this.err();\n          }\n          name = this.val;\n          this.nextToken();\n\n          context = context & C$Primary | (context & (C$This | C$Scope)) << 1 | context & C$Member | (context & C$Keyed) >> 1 | (context & C$Call) >> 2;\n          if (this.tkn === T$LParen) {\n            continue;\n          }\n          if (context & C$Scope) {\n            result = new AccessScope(name, result.ancestor);\n          } else {\n            result = new AccessMember(result, name);\n          }\n          continue;\n        case T$LBracket:\n          this.nextToken();\n          context = C$Keyed;\n          result = new AccessKeyed(result, this.parseExpression());\n          this.expect(T$RBracket);\n          break;\n        case T$LParen:\n          this.nextToken();\n          const args = [];\n          while (this.tkn !== T$RParen) {\n            args.push(this.parseExpression());\n            if (!this.opt(T$Comma)) {\n              break;\n            }\n          }\n          this.expect(T$RParen);\n          if (context & C$Scope) {\n            result = new CallScope(name, args, result.ancestor);\n          } else if (context & (C$Member | C$Primary)) {\n            result = new CallMember(result, name, args);\n          } else {\n            result = new CallFunction(result, args);\n          }\n          context = C$Call;\n          break;\n        case T$TemplateTail:\n          result = new LiteralTemplate([this.val], [], [this.raw], result);\n          this.nextToken();\n          break;\n        case T$TemplateContinuation:\n          result = this.parseTemplate(context | C$Tagged, result);\n      }\n    }\n\n    return result;\n  }\n\n  parseTemplate(context, func) {\n    const cooked = [this.val];\n    const raw = context & C$Tagged ? [this.raw] : undefined;\n    this.expect(T$TemplateContinuation);\n    const expressions = [this.parseExpression()];\n\n    while ((this.tkn = this.scanTemplateTail()) !== T$TemplateTail) {\n      cooked.push(this.val);\n      if (context & C$Tagged) {\n        raw.push(this.raw);\n      }\n      this.expect(T$TemplateContinuation);\n      expressions.push(this.parseExpression());\n    }\n\n    cooked.push(this.val);\n    if (context & C$Tagged) {\n      raw.push(this.raw);\n    }\n    this.nextToken();\n    return new LiteralTemplate(cooked, expressions, raw, func);\n  }\n\n  nextToken() {\n    while (this.idx < this.len) {\n      if (this.ch <= 0x20) {\n        this.next();\n        continue;\n      }\n      this.start = this.idx;\n      if (this.ch === 0x24 || this.ch >= 0x61 && this.ch <= 0x7A) {\n        this.tkn = this.scanIdentifier();\n        return;\n      }\n\n      if ((this.tkn = CharScanners[this.ch](this)) !== null) {\n        return;\n      }\n    }\n    this.tkn = T$EOF;\n  }\n\n  next() {\n    return this.ch = this.src.charCodeAt(++this.idx);\n  }\n\n  scanIdentifier() {\n    while (AsciiIdParts.has(this.next()) || this.ch > 0x7F && IdParts[this.ch]) {}\n\n    return KeywordLookup[this.val = this.raw] || T$Identifier;\n  }\n\n  scanNumber(isFloat) {\n    if (isFloat) {\n      this.val = 0;\n    } else {\n      this.val = this.ch - 0x30;\n      while (this.next() <= 0x39 && this.ch >= 0x30) {\n        this.val = this.val * 10 + this.ch - 0x30;\n      }\n    }\n\n    if (isFloat || this.ch === 0x2E) {\n      if (!isFloat) {\n        this.next();\n      }\n      const start = this.idx;\n      let value = this.ch - 0x30;\n      while (this.next() <= 0x39 && this.ch >= 0x30) {\n        value = value * 10 + this.ch - 0x30;\n      }\n      this.val = this.val + value / Math.pow(10, this.idx - start);\n    }\n\n    if (this.ch === 0x65 || this.ch === 0x45) {\n      const start = this.idx;\n\n      this.next();\n      if (this.ch === 0x2D || this.ch === 0x2B) {\n        this.next();\n      }\n\n      if (!(this.ch >= 0x30 && this.ch <= 0x39)) {\n        this.idx = start;\n        this.err('Invalid exponent');\n      }\n      while (this.next() <= 0x39 && this.ch >= 0x30) {}\n      this.val = parseFloat(this.src.slice(this.start, this.idx));\n    }\n\n    return T$NumericLiteral;\n  }\n\n  scanString() {\n    let quote = this.ch;\n    this.next();\n\n    let buffer;\n    let marker = this.idx;\n\n    while (this.ch !== quote) {\n      if (this.ch === 0x5C) {\n        if (!buffer) {\n          buffer = [];\n        }\n\n        buffer.push(this.src.slice(marker, this.idx));\n\n        this.next();\n\n        let unescaped;\n\n        if (this.ch === 0x75) {\n          this.next();\n\n          if (this.idx + 4 < this.len) {\n            let hex = this.src.slice(this.idx, this.idx + 4);\n\n            if (!/[A-Z0-9]{4}/i.test(hex)) {\n              this.err(`Invalid unicode escape [\\\\u${hex}]`);\n            }\n\n            unescaped = parseInt(hex, 16);\n            this.idx += 4;\n            this.ch = this.src.charCodeAt(this.idx);\n          } else {\n            this.err();\n          }\n        } else {\n          unescaped = unescape(this.ch);\n          this.next();\n        }\n\n        buffer.push(fromCharCode(unescaped));\n        marker = this.idx;\n      } else if (this.ch === 0 || this.idx >= this.len) {\n        this.err('Unterminated quote');\n      } else {\n        this.next();\n      }\n    }\n\n    let last = this.src.slice(marker, this.idx);\n    this.next();\n    let unescaped = last;\n\n    if (buffer !== null && buffer !== undefined) {\n      buffer.push(last);\n      unescaped = buffer.join('');\n    }\n\n    this.val = unescaped;\n    return T$StringLiteral;\n  }\n\n  scanTemplate() {\n    let tail = true;\n    let result = '';\n\n    while (this.next() !== 0x60) {\n      if (this.ch === 0x24) {\n        if (this.idx + 1 < this.len && this.src.charCodeAt(this.idx + 1) === 0x7B) {\n          this.idx++;\n          tail = false;\n          break;\n        } else {\n          result += '$';\n        }\n      } else if (this.ch === 0x5C) {\n        result += fromCharCode(unescape(this.next()));\n      } else if (this.ch === 0 || this.idx >= this.len) {\n        this.err('Unterminated template literal');\n      } else {\n        result += fromCharCode(this.ch);\n      }\n    }\n\n    this.next();\n    this.val = result;\n    if (tail) {\n      return T$TemplateTail;\n    }\n    return T$TemplateContinuation;\n  }\n\n  scanTemplateTail() {\n    if (this.idx >= this.len) {\n      this.err('Unterminated template');\n    }\n    this.idx--;\n    return this.scanTemplate();\n  }\n\n  err(message = `Unexpected token ${this.raw}`, column = this.start) {\n    throw new Error(`Parser Error: ${message} at column ${column} in expression [${this.src}]`);\n  }\n\n  opt(token) {\n    if (this.tkn === token) {\n      this.nextToken();\n      return true;\n    }\n\n    return false;\n  }\n\n  expect(token) {\n    if (this.tkn === token) {\n      this.nextToken();\n    } else {\n      this.err(`Missing expected token ${TokenValues[token & T$TokenMask]}`, this.idx);\n    }\n  }\n};\n\nfunction unescape(code) {\n  switch (code) {\n    case 0x66:\n      return 0xC;\n    case 0x6E:\n      return 0xA;\n    case 0x72:\n      return 0xD;\n    case 0x74:\n      return 0x9;\n    case 0x76:\n      return 0xB;\n    default:\n      return code;\n  }\n}\n\nconst C$This = 1 << 10;\nconst C$Scope = 1 << 11;\nconst C$Member = 1 << 12;\nconst C$Keyed = 1 << 13;\nconst C$Call = 1 << 14;\nconst C$Primary = 1 << 15;\nconst C$ShorthandProp = 1 << 16;\nconst C$Tagged = 1 << 17;\n\nconst C$Ancestor = (1 << 9) - 1;\n\nconst T$TokenMask = (1 << 6) - 1;\n\nconst T$PrecShift = 6;\n\nconst T$Precedence = 7 << T$PrecShift;\n\nconst T$ExpressionTerminal = 1 << 11;\n\nconst T$ClosingToken = 1 << 12;\n\nconst T$OpeningToken = 1 << 13;\n\nconst T$AccessScopeTerminal = 1 << 14;\nconst T$Keyword = 1 << 15;\nconst T$EOF = 1 << 16 | T$AccessScopeTerminal | T$ExpressionTerminal;\nconst T$Identifier = 1 << 17;\nconst T$IdentifierOrKeyword = T$Identifier | T$Keyword;\nconst T$Literal = 1 << 18;\nconst T$NumericLiteral = 1 << 19 | T$Literal;\nconst T$StringLiteral = 1 << 20 | T$Literal;\nconst T$BinaryOp = 1 << 21;\n\nconst T$UnaryOp = 1 << 22;\n\nconst T$MemberExpression = 1 << 23;\n\nconst T$MemberOrCallExpression = 1 << 24;\nconst T$TemplateTail = 1 << 25 | T$MemberOrCallExpression;\nconst T$TemplateContinuation = 1 << 26 | T$MemberOrCallExpression;\n\nconst T$FalseKeyword = 0 | T$Keyword | T$Literal;\nconst T$TrueKeyword = 1 | T$Keyword | T$Literal;\nconst T$NullKeyword = 2 | T$Keyword | T$Literal;\nconst T$UndefinedKeyword = 3 | T$Keyword | T$Literal;\nconst T$ThisScope = 4 | T$IdentifierOrKeyword;\nconst T$ParentScope = 5 | T$IdentifierOrKeyword;\n\nconst T$LParen = 6 | T$OpeningToken | T$AccessScopeTerminal | T$MemberOrCallExpression;\nconst T$LBrace = 7 | T$OpeningToken;\nconst T$Period = 8 | T$MemberExpression | T$MemberOrCallExpression;\nconst T$RBrace = 9 | T$AccessScopeTerminal | T$ClosingToken | T$ExpressionTerminal;\nconst T$RParen = 10 | T$AccessScopeTerminal | T$ClosingToken | T$ExpressionTerminal;\nconst T$Comma = 11 | T$AccessScopeTerminal;\nconst T$LBracket = 12 | T$OpeningToken | T$AccessScopeTerminal | T$MemberExpression | T$MemberOrCallExpression;\nconst T$RBracket = 13 | T$ClosingToken | T$ExpressionTerminal;\nconst T$Colon = 14 | T$AccessScopeTerminal;\nconst T$Question = 15;\n\nconst T$Ampersand = 18 | T$AccessScopeTerminal;\nconst T$Bar = 19 | T$AccessScopeTerminal;\nconst T$BarBar = 20 | 1 << T$PrecShift | T$BinaryOp;\nconst T$AmpersandAmpersand = 21 | 2 << T$PrecShift | T$BinaryOp;\nconst T$Caret = 22 | 3 << T$PrecShift | T$BinaryOp;\nconst T$EqEq = 23 | 4 << T$PrecShift | T$BinaryOp;\nconst T$BangEq = 24 | 4 << T$PrecShift | T$BinaryOp;\nconst T$EqEqEq = 25 | 4 << T$PrecShift | T$BinaryOp;\nconst T$BangEqEq = 26 | 4 << T$PrecShift | T$BinaryOp;\nconst T$Lt = 27 | 5 << T$PrecShift | T$BinaryOp;\nconst T$Gt = 28 | 5 << T$PrecShift | T$BinaryOp;\nconst T$LtEq = 29 | 5 << T$PrecShift | T$BinaryOp;\nconst T$GtEq = 30 | 5 << T$PrecShift | T$BinaryOp;\nconst T$InKeyword = 31 | 5 << T$PrecShift | T$BinaryOp | T$Keyword;\nconst T$InstanceOfKeyword = 32 | 5 << T$PrecShift | T$BinaryOp | T$Keyword;\nconst T$Plus = 33 | 6 << T$PrecShift | T$BinaryOp | T$UnaryOp;\nconst T$Minus = 34 | 6 << T$PrecShift | T$BinaryOp | T$UnaryOp;\nconst T$TypeofKeyword = 35 | T$UnaryOp | T$Keyword;\nconst T$VoidKeyword = 36 | T$UnaryOp | T$Keyword;\nconst T$Star = 37 | 7 << T$PrecShift | T$BinaryOp;\nconst T$Percent = 38 | 7 << T$PrecShift | T$BinaryOp;\nconst T$Slash = 39 | 7 << T$PrecShift | T$BinaryOp;\nconst T$Eq = 40;\nconst T$Bang = 41 | T$UnaryOp;\n\nconst KeywordLookup = Object.create(null);\nKeywordLookup.true = T$TrueKeyword;\nKeywordLookup.null = T$NullKeyword;\nKeywordLookup.false = T$FalseKeyword;\nKeywordLookup.undefined = T$UndefinedKeyword;\nKeywordLookup.$this = T$ThisScope;\nKeywordLookup.$parent = T$ParentScope;\nKeywordLookup.in = T$InKeyword;\nKeywordLookup.instanceof = T$InstanceOfKeyword;\nKeywordLookup.typeof = T$TypeofKeyword;\nKeywordLookup.void = T$VoidKeyword;\n\nconst TokenValues = [false, true, null, undefined, '$this', '$parent', '(', '{', '.', '}', ')', ',', '[', ']', ':', '?', '\\'', '\"', '&', '|', '||', '&&', '^', '==', '!=', '===', '!==', '<', '>', '<=', '>=', 'in', 'instanceof', '+', '-', 'typeof', 'void', '*', '%', '/', '=', '!'];\n\nconst codes = {\n  AsciiIdPart: [0x24, 0, 0x30, 0x3A, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B],\n  IdStart: [0x24, 0, 0x41, 0x5B, 0x5F, 0, 0x61, 0x7B, 0xAA, 0, 0xBA, 0, 0xC0, 0xD7, 0xD8, 0xF7, 0xF8, 0x2B9, 0x2E0, 0x2E5, 0x1D00, 0x1D26, 0x1D2C, 0x1D5D, 0x1D62, 0x1D66, 0x1D6B, 0x1D78, 0x1D79, 0x1DBF, 0x1E00, 0x1F00, 0x2071, 0, 0x207F, 0, 0x2090, 0x209D, 0x212A, 0x212C, 0x2132, 0, 0x214E, 0, 0x2160, 0x2189, 0x2C60, 0x2C80, 0xA722, 0xA788, 0xA78B, 0xA7AF, 0xA7B0, 0xA7B8, 0xA7F7, 0xA800, 0xAB30, 0xAB5B, 0xAB5C, 0xAB65, 0xFB00, 0xFB07, 0xFF21, 0xFF3B, 0xFF41, 0xFF5B],\n  Digit: [0x30, 0x3A],\n  Skip: [0, 0x21, 0x7F, 0xA1]\n};\n\nfunction decompress(lookup, set, compressed, value) {\n  let rangeCount = compressed.length;\n  for (let i = 0; i < rangeCount; i += 2) {\n    const start = compressed[i];\n    let end = compressed[i + 1];\n    end = end > 0 ? end : start + 1;\n    if (lookup) {\n      let j = start;\n      while (j < end) {\n        lookup[j] = value;\n        j++;\n      }\n    }\n    if (set) {\n      for (let ch = start; ch < end; ch++) {\n        set.add(ch);\n      }\n    }\n  }\n}\n\nfunction returnToken(token) {\n  return p => {\n    p.next();\n    return token;\n  };\n}\nfunction unexpectedCharacter(p) {\n  p.err(`Unexpected character [${fromCharCode(p.ch)}]`);\n  return null;\n}\n\nconst AsciiIdParts = new Set();\ndecompress(null, AsciiIdParts, codes.AsciiIdPart, true);\n\nconst IdParts = new Uint8Array(0xFFFF);\ndecompress(IdParts, null, codes.IdStart, 1);\ndecompress(IdParts, null, codes.Digit, 1);\n\nconst CharScanners = new Array(0xFFFF);\nlet ci = 0;\nwhile (ci < 0xFFFF) {\n  CharScanners[ci] = unexpectedCharacter;\n  ci++;\n}\n\ndecompress(CharScanners, null, codes.Skip, p => {\n  p.next();\n  return null;\n});\ndecompress(CharScanners, null, codes.IdStart, p => p.scanIdentifier());\ndecompress(CharScanners, null, codes.Digit, p => p.scanNumber(false));\n\nCharScanners[0x22] = CharScanners[0x27] = p => {\n  return p.scanString();\n};\nCharScanners[0x60] = p => {\n  return p.scanTemplate();\n};\n\nCharScanners[0x21] = p => {\n  if (p.next() !== 0x3D) {\n    return T$Bang;\n  }\n  if (p.next() !== 0x3D) {\n    return T$BangEq;\n  }\n  p.next();\n  return T$BangEqEq;\n};\n\nCharScanners[0x3D] = p => {\n  if (p.next() !== 0x3D) {\n    return T$Eq;\n  }\n  if (p.next() !== 0x3D) {\n    return T$EqEq;\n  }\n  p.next();\n  return T$EqEqEq;\n};\n\nCharScanners[0x26] = p => {\n  if (p.next() !== 0x26) {\n    return T$Ampersand;\n  }\n  p.next();\n  return T$AmpersandAmpersand;\n};\n\nCharScanners[0x7C] = p => {\n  if (p.next() !== 0x7C) {\n    return T$Bar;\n  }\n  p.next();\n  return T$BarBar;\n};\n\nCharScanners[0x2E] = p => {\n  if (p.next() <= 0x39 && p.ch >= 0x30) {\n    return p.scanNumber(true);\n  }\n  return T$Period;\n};\n\nCharScanners[0x3C] = p => {\n  if (p.next() !== 0x3D) {\n    return T$Lt;\n  }\n  p.next();\n  return T$LtEq;\n};\n\nCharScanners[0x3E] = p => {\n  if (p.next() !== 0x3D) {\n    return T$Gt;\n  }\n  p.next();\n  return T$GtEq;\n};\n\nCharScanners[0x25] = returnToken(T$Percent);\nCharScanners[0x28] = returnToken(T$LParen);\nCharScanners[0x29] = returnToken(T$RParen);\nCharScanners[0x2A] = returnToken(T$Star);\nCharScanners[0x2B] = returnToken(T$Plus);\nCharScanners[0x2C] = returnToken(T$Comma);\nCharScanners[0x2D] = returnToken(T$Minus);\nCharScanners[0x2F] = returnToken(T$Slash);\nCharScanners[0x3A] = returnToken(T$Colon);\nCharScanners[0x3F] = returnToken(T$Question);\nCharScanners[0x5B] = returnToken(T$LBracket);\nCharScanners[0x5D] = returnToken(T$RBracket);\nCharScanners[0x5E] = returnToken(T$Caret);\nCharScanners[0x7B] = returnToken(T$LBrace);\nCharScanners[0x7D] = returnToken(T$RBrace);\n\nlet mapProto = Map.prototype;\n\nfunction getMapObserver(taskQueue, map) {\n  return ModifyMapObserver.for(taskQueue, map);\n}\n\nlet ModifyMapObserver = class ModifyMapObserver extends ModifyCollectionObserver {\n  constructor(taskQueue, map) {\n    super(taskQueue, map);\n  }\n\n  static for(taskQueue, map) {\n    if (!('__map_observer__' in map)) {\n      Reflect.defineProperty(map, '__map_observer__', {\n        value: ModifyMapObserver.create(taskQueue, map),\n        enumerable: false, configurable: false\n      });\n    }\n    return map.__map_observer__;\n  }\n\n  static create(taskQueue, map) {\n    let observer = new ModifyMapObserver(taskQueue, map);\n\n    let proto = mapProto;\n    if (proto.set !== map.set || proto.delete !== map.delete || proto.clear !== map.clear) {\n      proto = {\n        set: map.set,\n        delete: map.delete,\n        clear: map.clear\n      };\n    }\n\n    map.set = function () {\n      let hasValue = map.has(arguments[0]);\n      let type = hasValue ? 'update' : 'add';\n      let oldValue = map.get(arguments[0]);\n      let methodCallResult = proto.set.apply(map, arguments);\n      if (!hasValue || oldValue !== map.get(arguments[0])) {\n        observer.addChangeRecord({\n          type: type,\n          object: map,\n          key: arguments[0],\n          oldValue: oldValue\n        });\n      }\n      return methodCallResult;\n    };\n\n    map.delete = function () {\n      let hasValue = map.has(arguments[0]);\n      let oldValue = map.get(arguments[0]);\n      let methodCallResult = proto.delete.apply(map, arguments);\n      if (hasValue) {\n        observer.addChangeRecord({\n          type: 'delete',\n          object: map,\n          key: arguments[0],\n          oldValue: oldValue\n        });\n      }\n      return methodCallResult;\n    };\n\n    map.clear = function () {\n      let methodCallResult = proto.clear.apply(map, arguments);\n      observer.addChangeRecord({\n        type: 'clear',\n        object: map\n      });\n      return methodCallResult;\n    };\n\n    return observer;\n  }\n};\n\nlet emLogger = aurelia_logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]('event-manager');\n\nfunction findOriginalEventTarget(event) {\n  return event.composedPath && event.composedPath()[0] || event.deepPath && event.deepPath()[0] || event.path && event.path[0] || event.target;\n}\n\nfunction stopPropagation() {\n  this.standardStopPropagation();\n  this.propagationStopped = true;\n}\n\nfunction handleCapturedEvent(event) {\n  event.propagationStopped = false;\n  let target = findOriginalEventTarget(event);\n\n  let orderedCallbacks = [];\n\n  while (target) {\n    if (target.capturedCallbacks) {\n      let callback = target.capturedCallbacks[event.type];\n      if (callback) {\n        if (event.stopPropagation !== stopPropagation) {\n          event.standardStopPropagation = event.stopPropagation;\n          event.stopPropagation = stopPropagation;\n        }\n        orderedCallbacks.push(callback);\n      }\n    }\n    target = target.parentNode;\n  }\n  for (let i = orderedCallbacks.length - 1; i >= 0 && !event.propagationStopped; i--) {\n    let orderedCallback = orderedCallbacks[i];\n    if ('handleEvent' in orderedCallback) {\n      orderedCallback.handleEvent(event);\n    } else {\n      orderedCallback(event);\n    }\n  }\n}\n\nlet CapturedHandlerEntry = class CapturedHandlerEntry {\n  constructor(eventName) {\n    this.eventName = eventName;\n    this.count = 0;\n  }\n\n  increment() {\n    this.count++;\n\n    if (this.count === 1) {\n      aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].addEventListener(this.eventName, handleCapturedEvent, true);\n    }\n  }\n\n  decrement() {\n    if (this.count === 0) {\n      emLogger.warn('The same EventListener was disposed multiple times.');\n    } else if (--this.count === 0) {\n      aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].removeEventListener(this.eventName, handleCapturedEvent, true);\n    }\n  }\n};\nlet DelegateHandlerEntry = class DelegateHandlerEntry {\n  constructor(eventName, eventManager) {\n    this.eventName = eventName;\n    this.count = 0;\n    this.eventManager = eventManager;\n  }\n\n  handleEvent(event) {\n    event.propagationStopped = false;\n    let target = findOriginalEventTarget(event);\n\n    while (target && !event.propagationStopped) {\n      if (target.delegatedCallbacks) {\n        let callback = target.delegatedCallbacks[event.type];\n        if (callback) {\n          if (event.stopPropagation !== stopPropagation) {\n            event.standardStopPropagation = event.stopPropagation;\n            event.stopPropagation = stopPropagation;\n          }\n          if ('handleEvent' in callback) {\n            callback.handleEvent(event);\n          } else {\n            callback(event);\n          }\n        }\n      }\n\n      const parent = target.parentNode;\n      const shouldEscapeShadowRoot = this.eventManager.escapeShadowRoot && parent instanceof ShadowRoot;\n\n      target = shouldEscapeShadowRoot ? parent.host : parent;\n    }\n  }\n\n  increment() {\n    this.count++;\n\n    if (this.count === 1) {\n      aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].addEventListener(this.eventName, this, false);\n    }\n  }\n\n  decrement() {\n    if (this.count === 0) {\n      emLogger.warn('The same EventListener was disposed multiple times.');\n    } else if (--this.count === 0) {\n      aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].removeEventListener(this.eventName, this, false);\n    }\n  }\n};\nlet DelegationEntryHandler = class DelegationEntryHandler {\n  constructor(entry, lookup, targetEvent) {\n    this.entry = entry;\n    this.lookup = lookup;\n    this.targetEvent = targetEvent;\n  }\n\n  dispose() {\n    if (this.lookup[this.targetEvent]) {\n      this.entry.decrement();\n      this.lookup[this.targetEvent] = null;\n    } else {\n      emLogger.warn('Calling .dispose() on already disposed eventListener');\n    }\n  }\n};\nlet EventHandler = class EventHandler {\n  constructor(target, targetEvent, callback) {\n    this.target = target;\n    this.targetEvent = targetEvent;\n    this.callback = callback;\n  }\n\n  dispose() {\n    this.target.removeEventListener(this.targetEvent, this.callback);\n  }\n};\nlet DefaultEventStrategy = class DefaultEventStrategy {\n\n  constructor(eventManager) {\n    this.delegatedHandlers = {};\n    this.capturedHandlers = {};\n\n    this.eventManager = eventManager;\n  }\n\n  subscribe(target, targetEvent, callback, strategy, disposable) {\n    let delegatedHandlers;\n    let capturedHandlers;\n    let handlerEntry;\n\n    if (strategy === delegationStrategy.bubbling) {\n      delegatedHandlers = this.delegatedHandlers;\n      handlerEntry = delegatedHandlers[targetEvent] || (delegatedHandlers[targetEvent] = new DelegateHandlerEntry(targetEvent, this.eventManager));\n      let delegatedCallbacks = target.delegatedCallbacks || (target.delegatedCallbacks = {});\n      if (!delegatedCallbacks[targetEvent]) {\n        handlerEntry.increment();\n      } else {\n        emLogger.warn('Overriding previous callback for event listener', { event: targetEvent, callback: callback, previousCallback: delegatedCallbacks[targetEvent] });\n      }\n      delegatedCallbacks[targetEvent] = callback;\n\n      if (disposable === true) {\n        return new DelegationEntryHandler(handlerEntry, delegatedCallbacks, targetEvent);\n      }\n\n      return function () {\n        handlerEntry.decrement();\n        delegatedCallbacks[targetEvent] = null;\n      };\n    }\n    if (strategy === delegationStrategy.capturing) {\n      capturedHandlers = this.capturedHandlers;\n      handlerEntry = capturedHandlers[targetEvent] || (capturedHandlers[targetEvent] = new CapturedHandlerEntry(targetEvent));\n      let capturedCallbacks = target.capturedCallbacks || (target.capturedCallbacks = {});\n      if (!capturedCallbacks[targetEvent]) {\n        handlerEntry.increment();\n      } else {\n        emLogger.error('already have a callback for event', { event: targetEvent, callback: callback });\n      }\n      capturedCallbacks[targetEvent] = callback;\n\n      if (disposable === true) {\n        return new DelegationEntryHandler(handlerEntry, capturedCallbacks, targetEvent);\n      }\n\n      return function () {\n        handlerEntry.decrement();\n        capturedCallbacks[targetEvent] = null;\n      };\n    }\n\n    target.addEventListener(targetEvent, callback);\n\n    if (disposable === true) {\n      return new EventHandler(target, targetEvent, callback);\n    }\n\n    return function () {\n      target.removeEventListener(targetEvent, callback);\n    };\n  }\n};\n\n\nconst delegationStrategy = {\n  none: 0,\n  capturing: 1,\n  bubbling: 2\n};\n\nlet EventManager = class EventManager {\n  constructor(escapeShadowRoot = false) {\n    this.elementHandlerLookup = {};\n    this.eventStrategyLookup = {};\n    this.escapeShadowRoot = escapeShadowRoot;\n\n    this.registerElementConfig({\n      tagName: 'input',\n      properties: {\n        value: ['change', 'input'],\n        checked: ['change', 'input'],\n        files: ['change', 'input']\n      }\n    });\n\n    this.registerElementConfig({\n      tagName: 'textarea',\n      properties: {\n        value: ['change', 'input']\n      }\n    });\n\n    this.registerElementConfig({\n      tagName: 'select',\n      properties: {\n        value: ['change']\n      }\n    });\n\n    this.registerElementConfig({\n      tagName: 'content editable',\n      properties: {\n        value: ['change', 'input', 'blur', 'keyup', 'paste']\n      }\n    });\n\n    this.registerElementConfig({\n      tagName: 'scrollable element',\n      properties: {\n        scrollTop: ['scroll'],\n        scrollLeft: ['scroll']\n      }\n    });\n\n    this.defaultEventStrategy = new DefaultEventStrategy(this);\n  }\n\n  registerElementConfig(config) {\n    let tagName = config.tagName.toLowerCase();\n    let properties = config.properties;\n    let propertyName;\n\n    let lookup = this.elementHandlerLookup[tagName] = {};\n\n    for (propertyName in properties) {\n      if (properties.hasOwnProperty(propertyName)) {\n        lookup[propertyName] = properties[propertyName];\n      }\n    }\n  }\n\n  registerEventStrategy(eventName, strategy) {\n    this.eventStrategyLookup[eventName] = strategy;\n  }\n\n  getElementHandler(target, propertyName) {\n    let tagName;\n    let lookup = this.elementHandlerLookup;\n\n    if (target.tagName) {\n      tagName = target.tagName.toLowerCase();\n\n      if (lookup[tagName] && lookup[tagName][propertyName]) {\n        return new EventSubscriber(lookup[tagName][propertyName]);\n      }\n\n      if (propertyName === 'textContent' || propertyName === 'innerHTML') {\n        return new EventSubscriber(lookup['content editable'].value);\n      }\n\n      if (propertyName === 'scrollTop' || propertyName === 'scrollLeft') {\n        return new EventSubscriber(lookup['scrollable element'][propertyName]);\n      }\n    }\n\n    return null;\n  }\n\n  addEventListener(target, targetEvent, callbackOrListener, delegate, disposable) {\n    return (this.eventStrategyLookup[targetEvent] || this.defaultEventStrategy).subscribe(target, targetEvent, callbackOrListener, delegate, disposable);\n  }\n};\n\nlet EventSubscriber = class EventSubscriber {\n  constructor(events) {\n    this.events = events;\n    this.element = null;\n    this.handler = null;\n  }\n\n  subscribe(element, callbackOrListener) {\n    this.element = element;\n    this.handler = callbackOrListener;\n\n    let events = this.events;\n    for (let i = 0, ii = events.length; ii > i; ++i) {\n      element.addEventListener(events[i], callbackOrListener);\n    }\n  }\n\n  dispose() {\n    if (this.element === null) {\n      return;\n    }\n    let element = this.element;\n    let callbackOrListener = this.handler;\n    let events = this.events;\n    for (let i = 0, ii = events.length; ii > i; ++i) {\n      element.removeEventListener(events[i], callbackOrListener);\n    }\n    this.element = this.handler = null;\n  }\n};\n\nlet DirtyChecker = class DirtyChecker {\n  constructor() {\n    this.tracked = [];\n    this.checkDelay = 120;\n  }\n\n  addProperty(property) {\n    let tracked = this.tracked;\n\n    tracked.push(property);\n\n    if (tracked.length === 1) {\n      this.scheduleDirtyCheck();\n    }\n  }\n\n  removeProperty(property) {\n    let tracked = this.tracked;\n    tracked.splice(tracked.indexOf(property), 1);\n  }\n\n  scheduleDirtyCheck() {\n    setTimeout(() => this.check(), this.checkDelay);\n  }\n\n  check() {\n    let tracked = this.tracked;\n    let i = tracked.length;\n\n    while (i--) {\n      let current = tracked[i];\n\n      if (current.isDirty()) {\n        current.call();\n      }\n    }\n\n    if (tracked.length) {\n      this.scheduleDirtyCheck();\n    }\n  }\n};\n\nlet DirtyCheckProperty = (_dec5 = subscriberCollection(), _dec5(_class5 = class DirtyCheckProperty {\n  constructor(dirtyChecker, obj, propertyName) {\n    this.dirtyChecker = dirtyChecker;\n    this.obj = obj;\n    this.propertyName = propertyName;\n  }\n\n  getValue() {\n    return this.obj[this.propertyName];\n  }\n\n  setValue(newValue) {\n    this.obj[this.propertyName] = newValue;\n  }\n\n  call() {\n    let oldValue = this.oldValue;\n    let newValue = this.getValue();\n\n    this.callSubscribers(newValue, oldValue);\n\n    this.oldValue = newValue;\n  }\n\n  isDirty() {\n    return this.oldValue !== this.obj[this.propertyName];\n  }\n\n  subscribe(context, callable) {\n    if (!this.hasSubscribers()) {\n      this.oldValue = this.getValue();\n      this.dirtyChecker.addProperty(this);\n    }\n    this.addSubscriber(context, callable);\n  }\n\n  unsubscribe(context, callable) {\n    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {\n      this.dirtyChecker.removeProperty(this);\n    }\n  }\n}) || _class5);\n\nconst logger = aurelia_logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]('property-observation');\n\nconst propertyAccessor = {\n  getValue: (obj, propertyName) => obj[propertyName],\n  setValue: (value, obj, propertyName) => {\n    obj[propertyName] = value;\n  }\n};\n\nlet PrimitiveObserver = class PrimitiveObserver {\n\n  constructor(primitive, propertyName) {\n    this.doNotCache = true;\n\n    this.primitive = primitive;\n    this.propertyName = propertyName;\n  }\n\n  getValue() {\n    return this.primitive[this.propertyName];\n  }\n\n  setValue() {\n    let type = typeof this.primitive;\n    throw new Error(`The ${this.propertyName} property of a ${type} (${this.primitive}) cannot be assigned.`);\n  }\n\n  subscribe() {}\n\n  unsubscribe() {}\n};\n\nlet SetterObserver = (_dec6 = subscriberCollection(), _dec6(_class7 = class SetterObserver {\n  constructor(taskQueue, obj, propertyName) {\n    this.taskQueue = taskQueue;\n    this.obj = obj;\n    this.propertyName = propertyName;\n    this.queued = false;\n    this.observing = false;\n  }\n\n  getValue() {\n    return this.obj[this.propertyName];\n  }\n\n  setValue(newValue) {\n    this.obj[this.propertyName] = newValue;\n  }\n\n  getterValue() {\n    return this.currentValue;\n  }\n\n  setterValue(newValue) {\n    let oldValue = this.currentValue;\n\n    if (oldValue !== newValue) {\n      if (!this.queued) {\n        this.oldValue = oldValue;\n        this.queued = true;\n        this.taskQueue.queueMicroTask(this);\n      }\n\n      this.currentValue = newValue;\n    }\n  }\n\n  call() {\n    let oldValue = this.oldValue;\n    let newValue = this.oldValue = this.currentValue;\n\n    this.queued = false;\n\n    this.callSubscribers(newValue, oldValue);\n  }\n\n  subscribe(context, callable) {\n    if (!this.observing) {\n      this.convertProperty();\n    }\n    this.addSubscriber(context, callable);\n  }\n\n  unsubscribe(context, callable) {\n    this.removeSubscriber(context, callable);\n  }\n\n  convertProperty() {\n    this.observing = true;\n    this.currentValue = this.obj[this.propertyName];\n    this.setValue = this.setterValue;\n    this.getValue = this.getterValue;\n\n    if (!Reflect.defineProperty(this.obj, this.propertyName, {\n      configurable: true,\n      enumerable: this.propertyName in this.obj ? this.obj.propertyIsEnumerable(this.propertyName) : true,\n      get: this.getValue.bind(this),\n      set: this.setValue.bind(this)\n    })) {\n      logger.warn(`Cannot observe property '${this.propertyName}' of object`, this.obj);\n    }\n  }\n}) || _class7);\n\nlet XLinkAttributeObserver = class XLinkAttributeObserver {\n  constructor(element, propertyName, attributeName) {\n    this.element = element;\n    this.propertyName = propertyName;\n    this.attributeName = attributeName;\n  }\n\n  getValue() {\n    return this.element.getAttributeNS('http://www.w3.org/1999/xlink', this.attributeName);\n  }\n\n  setValue(newValue) {\n    return this.element.setAttributeNS('http://www.w3.org/1999/xlink', this.attributeName, newValue);\n  }\n\n  subscribe() {\n    throw new Error(`Observation of a \"${this.element.nodeName}\" element\\'s \"${this.propertyName}\" property is not supported.`);\n  }\n};\n\nconst dataAttributeAccessor = {\n  getValue: (obj, propertyName) => obj.getAttribute(propertyName),\n  setValue: (value, obj, propertyName) => {\n    if (value === null || value === undefined) {\n      obj.removeAttribute(propertyName);\n    } else {\n      obj.setAttribute(propertyName, value);\n    }\n  }\n};\n\nlet DataAttributeObserver = class DataAttributeObserver {\n  constructor(element, propertyName) {\n    this.element = element;\n    this.propertyName = propertyName;\n  }\n\n  getValue() {\n    return this.element.getAttribute(this.propertyName);\n  }\n\n  setValue(newValue) {\n    if (newValue === null || newValue === undefined) {\n      return this.element.removeAttribute(this.propertyName);\n    }\n    return this.element.setAttribute(this.propertyName, newValue);\n  }\n\n  subscribe() {\n    throw new Error(`Observation of a \"${this.element.nodeName}\" element\\'s \"${this.propertyName}\" property is not supported.`);\n  }\n};\n\nlet StyleObserver = class StyleObserver {\n  constructor(element, propertyName) {\n    this.element = element;\n    this.propertyName = propertyName;\n\n    this.styles = null;\n    this.version = 0;\n  }\n\n  getValue() {\n    return this.element.style.cssText;\n  }\n\n  _setProperty(style, value) {\n    let priority = '';\n\n    if (value !== null && value !== undefined && typeof value.indexOf === 'function' && value.indexOf('!important') !== -1) {\n      priority = 'important';\n      value = value.replace('!important', '');\n    }\n    this.element.style.setProperty(style, value, priority);\n  }\n\n  setValue(newValue) {\n    let styles = this.styles || {};\n    let style;\n    let version = this.version;\n\n    if (newValue !== null && newValue !== undefined) {\n      if (newValue instanceof Object) {\n        let value;\n        for (style in newValue) {\n          if (newValue.hasOwnProperty(style)) {\n            value = newValue[style];\n            style = style.replace(/([A-Z])/g, m => '-' + m.toLowerCase());\n            styles[style] = version;\n            this._setProperty(style, value);\n          }\n        }\n      } else if (newValue.length) {\n        let rx = /\\s*([\\w\\-]+)\\s*:\\s*((?:(?:[\\w\\-]+\\(\\s*(?:\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[\\w\\-]+\\(\\s*(?:^\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^\\)]*)\\),?|[^\\)]*)\\),?|\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^;]*),?\\s*)+);?/g;\n        let pair;\n        while ((pair = rx.exec(newValue)) !== null) {\n          style = pair[1];\n          if (!style) {\n            continue;\n          }\n\n          styles[style] = version;\n          this._setProperty(style, pair[2]);\n        }\n      }\n    }\n\n    this.styles = styles;\n    this.version += 1;\n\n    if (version === 0) {\n      return;\n    }\n\n    version -= 1;\n    for (style in styles) {\n      if (!styles.hasOwnProperty(style) || styles[style] !== version) {\n        continue;\n      }\n\n      this.element.style.removeProperty(style);\n    }\n  }\n\n  subscribe() {\n    throw new Error(`Observation of a \"${this.element.nodeName}\" element\\'s \"${this.propertyName}\" property is not supported.`);\n  }\n};\n\nlet ValueAttributeObserver = (_dec7 = subscriberCollection(), _dec7(_class8 = class ValueAttributeObserver {\n  constructor(element, propertyName, handler) {\n    this.element = element;\n    this.propertyName = propertyName;\n    this.handler = handler;\n    if (propertyName === 'files') {\n      this.setValue = () => {};\n    }\n  }\n\n  getValue() {\n    return this.element[this.propertyName];\n  }\n\n  setValue(newValue) {\n    newValue = newValue === undefined || newValue === null ? '' : newValue;\n    if (this.element[this.propertyName] !== newValue) {\n      this.element[this.propertyName] = newValue;\n      this.notify();\n    }\n  }\n\n  notify() {\n    let oldValue = this.oldValue;\n    let newValue = this.getValue();\n\n    this.callSubscribers(newValue, oldValue);\n\n    this.oldValue = newValue;\n  }\n\n  handleEvent() {\n    this.notify();\n  }\n\n  subscribe(context, callable) {\n    if (!this.hasSubscribers()) {\n      this.oldValue = this.getValue();\n      this.handler.subscribe(this.element, this);\n    }\n\n    this.addSubscriber(context, callable);\n  }\n\n  unsubscribe(context, callable) {\n    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {\n      this.handler.dispose();\n    }\n  }\n}) || _class8);\n\nconst checkedArrayContext = 'CheckedObserver:array';\nconst checkedValueContext = 'CheckedObserver:value';\n\nlet CheckedObserver = (_dec8 = subscriberCollection(), _dec8(_class9 = class CheckedObserver {\n  constructor(element, handler, observerLocator) {\n    this.element = element;\n    this.handler = handler;\n    this.observerLocator = observerLocator;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  setValue(newValue) {\n    if (this.initialSync && this.value === newValue) {\n      return;\n    }\n\n    if (this.arrayObserver) {\n      this.arrayObserver.unsubscribe(checkedArrayContext, this);\n      this.arrayObserver = null;\n    }\n\n    if (this.element.type === 'checkbox' && Array.isArray(newValue)) {\n      this.arrayObserver = this.observerLocator.getArrayObserver(newValue);\n      this.arrayObserver.subscribe(checkedArrayContext, this);\n    }\n\n    this.oldValue = this.value;\n    this.value = newValue;\n    this.synchronizeElement();\n    this.notify();\n\n    if (!this.initialSync) {\n      this.initialSync = true;\n      this.observerLocator.taskQueue.queueMicroTask(this);\n    }\n  }\n\n  call(context, splices) {\n    this.synchronizeElement();\n\n    if (!this.valueObserver) {\n      this.valueObserver = this.element.__observers__.model || this.element.__observers__.value;\n      if (this.valueObserver) {\n        this.valueObserver.subscribe(checkedValueContext, this);\n      }\n    }\n  }\n\n  synchronizeElement() {\n    let value = this.value;\n    let element = this.element;\n    let elementValue = element.hasOwnProperty('model') ? element.model : element.value;\n    let isRadio = element.type === 'radio';\n    let matcher = element.matcher || ((a, b) => a === b);\n\n    element.checked = isRadio && !!matcher(value, elementValue) || !isRadio && value === true || !isRadio && Array.isArray(value) && value.findIndex(item => !!matcher(item, elementValue)) !== -1;\n  }\n\n  synchronizeValue() {\n    let value = this.value;\n    let element = this.element;\n    let elementValue = element.hasOwnProperty('model') ? element.model : element.value;\n    let index;\n    let matcher = element.matcher || ((a, b) => a === b);\n\n    if (element.type === 'checkbox') {\n      if (Array.isArray(value)) {\n        index = value.findIndex(item => !!matcher(item, elementValue));\n        if (element.checked && index === -1) {\n          value.push(elementValue);\n        } else if (!element.checked && index !== -1) {\n          value.splice(index, 1);\n        }\n\n        return;\n      }\n\n      value = element.checked;\n    } else if (element.checked) {\n      value = elementValue;\n    } else {\n      return;\n    }\n\n    this.oldValue = this.value;\n    this.value = value;\n    this.notify();\n  }\n\n  notify() {\n    let oldValue = this.oldValue;\n    let newValue = this.value;\n\n    if (newValue === oldValue) {\n      return;\n    }\n\n    this.callSubscribers(newValue, oldValue);\n  }\n\n  handleEvent() {\n    this.synchronizeValue();\n  }\n\n  subscribe(context, callable) {\n    if (!this.hasSubscribers()) {\n      this.handler.subscribe(this.element, this);\n    }\n    this.addSubscriber(context, callable);\n  }\n\n  unsubscribe(context, callable) {\n    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {\n      this.handler.dispose();\n    }\n  }\n\n  unbind() {\n    if (this.arrayObserver) {\n      this.arrayObserver.unsubscribe(checkedArrayContext, this);\n      this.arrayObserver = null;\n    }\n    if (this.valueObserver) {\n      this.valueObserver.unsubscribe(checkedValueContext, this);\n    }\n  }\n}) || _class9);\n\nconst selectArrayContext = 'SelectValueObserver:array';\n\nlet SelectValueObserver = (_dec9 = subscriberCollection(), _dec9(_class10 = class SelectValueObserver {\n  constructor(element, handler, observerLocator) {\n    this.element = element;\n    this.handler = handler;\n    this.observerLocator = observerLocator;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  setValue(newValue) {\n    if (newValue !== null && newValue !== undefined && this.element.multiple && !Array.isArray(newValue)) {\n      throw new Error('Only null or Array instances can be bound to a multi-select.');\n    }\n    if (this.value === newValue) {\n      return;\n    }\n\n    if (this.arrayObserver) {\n      this.arrayObserver.unsubscribe(selectArrayContext, this);\n      this.arrayObserver = null;\n    }\n\n    if (Array.isArray(newValue)) {\n      this.arrayObserver = this.observerLocator.getArrayObserver(newValue);\n      this.arrayObserver.subscribe(selectArrayContext, this);\n    }\n\n    this.oldValue = this.value;\n    this.value = newValue;\n    this.synchronizeOptions();\n    this.notify();\n\n    if (!this.initialSync) {\n      this.initialSync = true;\n      this.observerLocator.taskQueue.queueMicroTask(this);\n    }\n  }\n\n  call(context, splices) {\n    this.synchronizeOptions();\n  }\n\n  synchronizeOptions() {\n    let value = this.value;\n    let isArray;\n\n    if (Array.isArray(value)) {\n      isArray = true;\n    }\n\n    let options = this.element.options;\n    let i = options.length;\n    let matcher = this.element.matcher || ((a, b) => a === b);\n    while (i--) {\n      let option = options.item(i);\n      let optionValue = option.hasOwnProperty('model') ? option.model : option.value;\n      if (isArray) {\n        option.selected = value.findIndex(item => !!matcher(optionValue, item)) !== -1;\n        continue;\n      }\n      option.selected = !!matcher(optionValue, value);\n    }\n  }\n\n  synchronizeValue() {\n    let options = this.element.options;\n    let count = 0;\n    let value = [];\n\n    for (let i = 0, ii = options.length; i < ii; i++) {\n      let option = options.item(i);\n      if (!option.selected) {\n        continue;\n      }\n      value.push(option.hasOwnProperty('model') ? option.model : option.value);\n      count++;\n    }\n\n    if (this.element.multiple) {\n      if (Array.isArray(this.value)) {\n        let matcher = this.element.matcher || ((a, b) => a === b);\n\n        let i = 0;\n        while (i < this.value.length) {\n          let a = this.value[i];\n          if (value.findIndex(b => matcher(a, b)) === -1) {\n            this.value.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n\n        i = 0;\n        while (i < value.length) {\n          let a = value[i];\n          if (this.value.findIndex(b => matcher(a, b)) === -1) {\n            this.value.push(a);\n          }\n          i++;\n        }\n        return;\n      }\n    } else {\n      if (count === 0) {\n        value = null;\n      } else {\n        value = value[0];\n      }\n    }\n\n    if (value !== this.value) {\n      this.oldValue = this.value;\n      this.value = value;\n      this.notify();\n    }\n  }\n\n  notify() {\n    let oldValue = this.oldValue;\n    let newValue = this.value;\n\n    this.callSubscribers(newValue, oldValue);\n  }\n\n  handleEvent() {\n    this.synchronizeValue();\n  }\n\n  subscribe(context, callable) {\n    if (!this.hasSubscribers()) {\n      this.handler.subscribe(this.element, this);\n    }\n    this.addSubscriber(context, callable);\n  }\n\n  unsubscribe(context, callable) {\n    if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {\n      this.handler.dispose();\n    }\n  }\n\n  bind() {\n    this.domObserver = aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].createMutationObserver(() => {\n      this.synchronizeOptions();\n      this.synchronizeValue();\n    });\n    this.domObserver.observe(this.element, { childList: true, subtree: true, characterData: true });\n  }\n\n  unbind() {\n    this.domObserver.disconnect();\n    this.domObserver = null;\n\n    if (this.arrayObserver) {\n      this.arrayObserver.unsubscribe(selectArrayContext, this);\n      this.arrayObserver = null;\n    }\n  }\n}) || _class10);\n\nlet ClassObserver = class ClassObserver {\n  constructor(element) {\n    this.element = element;\n    this.doNotCache = true;\n    this.value = '';\n    this.version = 0;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  setValue(newValue) {\n    let nameIndex = this.nameIndex || {};\n    let version = this.version;\n    let names;\n    let name;\n\n    if (newValue !== null && newValue !== undefined && newValue.length) {\n      names = newValue.split(/\\s+/);\n      for (let i = 0, length = names.length; i < length; i++) {\n        name = names[i];\n        if (name === '') {\n          continue;\n        }\n        nameIndex[name] = version;\n        this.element.classList.add(name);\n      }\n    }\n\n    this.value = newValue;\n    this.nameIndex = nameIndex;\n    this.version += 1;\n\n    if (version === 0) {\n      return;\n    }\n\n    version -= 1;\n    for (name in nameIndex) {\n      if (!nameIndex.hasOwnProperty(name) || nameIndex[name] !== version) {\n        continue;\n      }\n      this.element.classList.remove(name);\n    }\n  }\n\n  subscribe() {\n    throw new Error(`Observation of a \"${this.element.nodeName}\" element\\'s \"class\" property is not supported.`);\n  }\n};\n\nfunction hasDeclaredDependencies(descriptor) {\n  return !!(descriptor && descriptor.get && descriptor.get.dependencies);\n}\n\nfunction declarePropertyDependencies(ctor, propertyName, dependencies) {\n  let descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, propertyName);\n  descriptor.get.dependencies = dependencies;\n}\n\nfunction computedFrom(...rest) {\n  return function (target, key, descriptor) {\n    descriptor.get.dependencies = rest;\n    return descriptor;\n  };\n}\n\nlet ComputedExpression = class ComputedExpression extends Expression {\n  constructor(name, dependencies) {\n    super();\n\n    this.name = name;\n    this.dependencies = dependencies;\n    this.isAssignable = true;\n  }\n\n  evaluate(scope, lookupFunctions) {\n    return scope.bindingContext[this.name];\n  }\n\n  assign(scope, value) {\n    scope.bindingContext[this.name] = value;\n  }\n\n  accept(visitor) {\n    throw new Error('not implemented');\n  }\n\n  connect(binding, scope) {\n    let dependencies = this.dependencies;\n    let i = dependencies.length;\n    while (i--) {\n      dependencies[i].connect(binding, scope);\n    }\n  }\n};\n\nfunction createComputedObserver(obj, propertyName, descriptor, observerLocator) {\n  let dependencies = descriptor.get.dependencies;\n  if (!(dependencies instanceof ComputedExpression)) {\n    let i = dependencies.length;\n    while (i--) {\n      dependencies[i] = observerLocator.parser.parse(dependencies[i]);\n    }\n    dependencies = descriptor.get.dependencies = new ComputedExpression(propertyName, dependencies);\n  }\n\n  let scope = { bindingContext: obj, overrideContext: createOverrideContext(obj) };\n  return new ExpressionObserver(scope, dependencies, observerLocator);\n}\n\nlet svgElements;\nlet svgPresentationElements;\nlet svgPresentationAttributes;\nlet svgAnalyzer;\n\nif (false) {}\n\nconst elements = svgElements;\nconst presentationElements = svgPresentationElements;\nconst presentationAttributes = svgPresentationAttributes;\nconst SVGAnalyzer = svgAnalyzer || class {\n  isStandardSvgAttribute() {\n    return false;\n  }\n};\n\nlet ObserverLocator = (_temp = _class11 = class ObserverLocator {\n  constructor(taskQueue, eventManager, dirtyChecker, svgAnalyzer, parser) {\n    this.taskQueue = taskQueue;\n    this.eventManager = eventManager;\n    this.dirtyChecker = dirtyChecker;\n    this.svgAnalyzer = svgAnalyzer;\n    this.parser = parser;\n\n    this.adapters = [];\n    this.logger = aurelia_logging__WEBPACK_IMPORTED_MODULE_0__[\"getLogger\"]('observer-locator');\n  }\n\n  getObserver(obj, propertyName) {\n    let observersLookup = obj.__observers__;\n    let observer;\n\n    if (observersLookup && propertyName in observersLookup) {\n      return observersLookup[propertyName];\n    }\n\n    observer = this.createPropertyObserver(obj, propertyName);\n\n    if (!observer.doNotCache) {\n      if (observersLookup === undefined) {\n        observersLookup = this.getOrCreateObserversLookup(obj);\n      }\n\n      observersLookup[propertyName] = observer;\n    }\n\n    return observer;\n  }\n\n  getOrCreateObserversLookup(obj) {\n    return obj.__observers__ || this.createObserversLookup(obj);\n  }\n\n  createObserversLookup(obj) {\n    let value = {};\n\n    if (!Reflect.defineProperty(obj, '__observers__', {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: value\n    })) {\n      this.logger.warn('Cannot add observers to object', obj);\n    }\n\n    return value;\n  }\n\n  addAdapter(adapter) {\n    this.adapters.push(adapter);\n  }\n\n  getAdapterObserver(obj, propertyName, descriptor) {\n    for (let i = 0, ii = this.adapters.length; i < ii; i++) {\n      let adapter = this.adapters[i];\n      let observer = adapter.getObserver(obj, propertyName, descriptor);\n      if (observer) {\n        return observer;\n      }\n    }\n    return null;\n  }\n\n  createPropertyObserver(obj, propertyName) {\n    let descriptor;\n    let handler;\n    let xlinkResult;\n\n    if (!(obj instanceof Object)) {\n      return new PrimitiveObserver(obj, propertyName);\n    }\n\n    if (obj instanceof aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].Element) {\n      if (propertyName === 'class') {\n        return new ClassObserver(obj);\n      }\n      if (propertyName === 'style' || propertyName === 'css') {\n        return new StyleObserver(obj, propertyName);\n      }\n      handler = this.eventManager.getElementHandler(obj, propertyName);\n      if (propertyName === 'value' && obj.tagName.toLowerCase() === 'select') {\n        return new SelectValueObserver(obj, handler, this);\n      }\n      if (propertyName === 'checked' && obj.tagName.toLowerCase() === 'input') {\n        return new CheckedObserver(obj, handler, this);\n      }\n      if (handler) {\n        return new ValueAttributeObserver(obj, propertyName, handler);\n      }\n      xlinkResult = /^xlink:(.+)$/.exec(propertyName);\n      if (xlinkResult) {\n        return new XLinkAttributeObserver(obj, propertyName, xlinkResult[1]);\n      }\n      if (propertyName === 'role' && (obj instanceof aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].Element || obj instanceof aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].SVGElement) || /^\\w+:|^data-|^aria-/.test(propertyName) || obj instanceof aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName)) {\n        return new DataAttributeObserver(obj, propertyName);\n      }\n    }\n\n    descriptor = Object.getPropertyDescriptor(obj, propertyName);\n\n    if (hasDeclaredDependencies(descriptor)) {\n      return createComputedObserver(obj, propertyName, descriptor, this);\n    }\n\n    if (descriptor) {\n      const existingGetterOrSetter = descriptor.get || descriptor.set;\n      if (existingGetterOrSetter) {\n        if (existingGetterOrSetter.getObserver) {\n          return existingGetterOrSetter.getObserver(obj);\n        }\n\n        let adapterObserver = this.getAdapterObserver(obj, propertyName, descriptor);\n        if (adapterObserver) {\n          return adapterObserver;\n        }\n        return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);\n      }\n    }\n\n    if (obj instanceof Array) {\n      if (propertyName === 'length') {\n        return this.getArrayObserver(obj).getLengthObserver();\n      }\n\n      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);\n    } else if (obj instanceof Map) {\n      if (propertyName === 'size') {\n        return this.getMapObserver(obj).getLengthObserver();\n      }\n\n      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);\n    } else if (obj instanceof Set) {\n      if (propertyName === 'size') {\n        return this.getSetObserver(obj).getLengthObserver();\n      }\n\n      return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);\n    }\n\n    return new SetterObserver(this.taskQueue, obj, propertyName);\n  }\n\n  getAccessor(obj, propertyName) {\n    if (obj instanceof aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].Element) {\n      if (propertyName === 'class' || propertyName === 'style' || propertyName === 'css' || propertyName === 'value' && (obj.tagName.toLowerCase() === 'input' || obj.tagName.toLowerCase() === 'select') || propertyName === 'checked' && obj.tagName.toLowerCase() === 'input' || propertyName === 'model' && obj.tagName.toLowerCase() === 'input' || /^xlink:.+$/.exec(propertyName)) {\n        return this.getObserver(obj, propertyName);\n      }\n      if (/^\\w+:|^data-|^aria-/.test(propertyName) || obj instanceof aurelia_pal__WEBPACK_IMPORTED_MODULE_1__[\"DOM\"].SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName) || obj.tagName.toLowerCase() === 'img' && propertyName === 'src' || obj.tagName.toLowerCase() === 'a' && propertyName === 'href') {\n        return dataAttributeAccessor;\n      }\n    }\n    return propertyAccessor;\n  }\n\n  getArrayObserver(array) {\n    return getArrayObserver(this.taskQueue, array);\n  }\n\n  getMapObserver(map) {\n    return getMapObserver(this.taskQueue, map);\n  }\n\n  getSetObserver(set) {\n    return getSetObserver(this.taskQueue, set);\n  }\n}, _class11.inject = [aurelia_task_queue__WEBPACK_IMPORTED_MODULE_2__[\"TaskQueue\"], EventManager, DirtyChecker, SVGAnalyzer, Parser], _temp);\n\nlet ObjectObservationAdapter = class ObjectObservationAdapter {\n  getObserver(object, propertyName, descriptor) {\n    throw new Error('BindingAdapters must implement getObserver(object, propertyName).');\n  }\n};\n\nlet BindingExpression = class BindingExpression {\n  constructor(observerLocator, targetProperty, sourceExpression, mode, lookupFunctions, attribute) {\n    this.observerLocator = observerLocator;\n    this.targetProperty = targetProperty;\n    this.sourceExpression = sourceExpression;\n    this.mode = mode;\n    this.lookupFunctions = lookupFunctions;\n    this.attribute = attribute;\n    this.discrete = false;\n  }\n\n  createBinding(target) {\n    return new Binding(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.mode, this.lookupFunctions);\n  }\n};\n\nlet Binding = (_dec10 = connectable(), _dec10(_class12 = class Binding {\n  constructor(observerLocator, sourceExpression, target, targetProperty, mode, lookupFunctions) {\n    this.observerLocator = observerLocator;\n    this.sourceExpression = sourceExpression;\n    this.target = target;\n    this.targetProperty = targetProperty;\n    this.mode = mode;\n    this.lookupFunctions = lookupFunctions;\n  }\n\n  updateTarget(value) {\n    this.targetObserver.setValue(value, this.target, this.targetProperty);\n  }\n\n  updateSource(value) {\n    this.sourceExpression.assign(this.source, value, this.lookupFunctions);\n  }\n\n  call(context, newValue, oldValue) {\n    if (!this.isBound) {\n      return;\n    }\n    if (context === sourceContext) {\n      oldValue = this.targetObserver.getValue(this.target, this.targetProperty);\n      newValue = this.sourceExpression.evaluate(this.source, this.lookupFunctions);\n      if (newValue !== oldValue) {\n        this.updateTarget(newValue);\n      }\n      if (this.mode !== bindingMode.oneTime) {\n        this._version++;\n        this.sourceExpression.connect(this, this.source);\n        this.unobserve(false);\n      }\n      return;\n    }\n    if (context === targetContext) {\n      if (newValue !== this.sourceExpression.evaluate(this.source, this.lookupFunctions)) {\n        this.updateSource(newValue);\n      }\n      return;\n    }\n    throw new Error(`Unexpected call context ${context}`);\n  }\n\n  bind(source) {\n    if (this.isBound) {\n      if (this.source === source) {\n        return;\n      }\n      this.unbind();\n    }\n    this.isBound = true;\n    this.source = source;\n\n    if (this.sourceExpression.bind) {\n      this.sourceExpression.bind(this, source, this.lookupFunctions);\n    }\n\n    let mode = this.mode;\n    if (!this.targetObserver) {\n      let method = mode === bindingMode.twoWay || mode === bindingMode.fromView ? 'getObserver' : 'getAccessor';\n      this.targetObserver = this.observerLocator[method](this.target, this.targetProperty);\n    }\n\n    if ('bind' in this.targetObserver) {\n      this.targetObserver.bind();\n    }\n    if (this.mode !== bindingMode.fromView) {\n      let value = this.sourceExpression.evaluate(source, this.lookupFunctions);\n      this.updateTarget(value);\n    }\n\n    if (mode === bindingMode.oneTime) {\n      return;\n    } else if (mode === bindingMode.toView) {\n      enqueueBindingConnect(this);\n    } else if (mode === bindingMode.twoWay) {\n      this.sourceExpression.connect(this, source);\n      this.targetObserver.subscribe(targetContext, this);\n    } else if (mode === bindingMode.fromView) {\n      this.targetObserver.subscribe(targetContext, this);\n    }\n  }\n\n  unbind() {\n    if (!this.isBound) {\n      return;\n    }\n    this.isBound = false;\n    if (this.sourceExpression.unbind) {\n      this.sourceExpression.unbind(this, this.source);\n    }\n    this.source = null;\n    if ('unbind' in this.targetObserver) {\n      this.targetObserver.unbind();\n    }\n    if (this.targetObserver.unsubscribe) {\n      this.targetObserver.unsubscribe(targetContext, this);\n    }\n    this.unobserve(true);\n  }\n\n  connect(evaluate) {\n    if (!this.isBound) {\n      return;\n    }\n    if (evaluate) {\n      let value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);\n      this.updateTarget(value);\n    }\n    this.sourceExpression.connect(this, this.source);\n  }\n}) || _class12);\n\nlet CallExpression = class CallExpression {\n  constructor(observerLocator, targetProperty, sourceExpression, lookupFunctions) {\n    this.observerLocator = observerLocator;\n    this.targetProperty = targetProperty;\n    this.sourceExpression = sourceExpression;\n    this.lookupFunctions = lookupFunctions;\n  }\n\n  createBinding(target) {\n    return new Call(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.lookupFunctions);\n  }\n};\n\nlet Call = class Call {\n  constructor(observerLocator, sourceExpression, target, targetProperty, lookupFunctions) {\n    this.sourceExpression = sourceExpression;\n    this.target = target;\n    this.targetProperty = observerLocator.getObserver(target, targetProperty);\n    this.lookupFunctions = lookupFunctions;\n  }\n\n  callSource($event) {\n    let overrideContext = this.source.overrideContext;\n    Object.assign(overrideContext, $event);\n    overrideContext.$event = $event;\n    let mustEvaluate = true;\n    let result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);\n    delete overrideContext.$event;\n    for (let prop in $event) {\n      delete overrideContext[prop];\n    }\n    return result;\n  }\n\n  bind(source) {\n    if (this.isBound) {\n      if (this.source === source) {\n        return;\n      }\n      this.unbind();\n    }\n    this.isBound = true;\n    this.source = source;\n\n    if (this.sourceExpression.bind) {\n      this.sourceExpression.bind(this, source, this.lookupFunctions);\n    }\n    this.targetProperty.setValue($event => this.callSource($event));\n  }\n\n  unbind() {\n    if (!this.isBound) {\n      return;\n    }\n    this.isBound = false;\n    if (this.sourceExpression.unbind) {\n      this.sourceExpression.unbind(this, this.source);\n    }\n    this.source = null;\n    this.targetProperty.setValue(null);\n  }\n};\n\nlet ValueConverterResource = class ValueConverterResource {\n  constructor(name) {\n    this.name = name;\n  }\n\n  static convention(name) {\n    if (name.endsWith('ValueConverter')) {\n      return new ValueConverterResource(camelCase(name.substring(0, name.length - 14)));\n    }\n  }\n\n  initialize(container, target) {\n    this.instance = container.get(target);\n  }\n\n  register(registry, name) {\n    registry.registerValueConverter(name || this.name, this.instance);\n  }\n\n  load(container, target) {}\n};\n\nfunction valueConverter(nameOrTarget) {\n  if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {\n    return function (target) {\n      aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__[\"metadata\"].define(aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__[\"metadata\"].resource, new ValueConverterResource(nameOrTarget), target);\n    };\n  }\n\n  aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__[\"metadata\"].define(aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__[\"metadata\"].resource, new ValueConverterResource(), nameOrTarget);\n}\n\nlet BindingBehaviorResource = class BindingBehaviorResource {\n  constructor(name) {\n    this.name = name;\n  }\n\n  static convention(name) {\n    if (name.endsWith('BindingBehavior')) {\n      return new BindingBehaviorResource(camelCase(name.substring(0, name.length - 15)));\n    }\n  }\n\n  initialize(container, target) {\n    this.instance = container.get(target);\n  }\n\n  register(registry, name) {\n    registry.registerBindingBehavior(name || this.name, this.instance);\n  }\n\n  load(container, target) {}\n};\n\nfunction bindingBehavior(nameOrTarget) {\n  if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {\n    return function (target) {\n      aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__[\"metadata\"].define(aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__[\"metadata\"].resource, new BindingBehaviorResource(nameOrTarget), target);\n    };\n  }\n\n  aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__[\"metadata\"].define(aurelia_metadata__WEBPACK_IMPORTED_MODULE_3__[\"metadata\"].resource, new BindingBehaviorResource(), nameOrTarget);\n}\n\nlet ListenerExpression = class ListenerExpression {\n  constructor(eventManager, targetEvent, sourceExpression, delegationStrategy, preventDefault, lookupFunctions) {\n    this.eventManager = eventManager;\n    this.targetEvent = targetEvent;\n    this.sourceExpression = sourceExpression;\n    this.delegationStrategy = delegationStrategy;\n    this.discrete = true;\n    this.preventDefault = preventDefault;\n    this.lookupFunctions = lookupFunctions;\n  }\n\n  createBinding(target) {\n    return new Listener(this.eventManager, this.targetEvent, this.delegationStrategy, this.sourceExpression, target, this.preventDefault, this.lookupFunctions);\n  }\n};\n\nlet Listener = class Listener {\n  constructor(eventManager, targetEvent, delegationStrategy, sourceExpression, target, preventDefault, lookupFunctions) {\n    this.eventManager = eventManager;\n    this.targetEvent = targetEvent;\n    this.delegationStrategy = delegationStrategy;\n    this.sourceExpression = sourceExpression;\n    this.target = target;\n    this.preventDefault = preventDefault;\n    this.lookupFunctions = lookupFunctions;\n  }\n\n  callSource(event) {\n    let overrideContext = this.source.overrideContext;\n    overrideContext.$event = event;\n    let mustEvaluate = true;\n    let result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);\n    delete overrideContext.$event;\n    if (result !== true && this.preventDefault) {\n      event.preventDefault();\n    }\n    return result;\n  }\n\n  handleEvent(event) {\n    this.callSource(event);\n  }\n\n  bind(source) {\n    if (this.isBound) {\n      if (this.source === source) {\n        return;\n      }\n      this.unbind();\n    }\n    this.isBound = true;\n    this.source = source;\n\n    if (this.sourceExpression.bind) {\n      this.sourceExpression.bind(this, source, this.lookupFunctions);\n    }\n    this._handler = this.eventManager.addEventListener(this.target, this.targetEvent, this, this.delegationStrategy, true);\n  }\n\n  unbind() {\n    if (!this.isBound) {\n      return;\n    }\n    this.isBound = false;\n    if (this.sourceExpression.unbind) {\n      this.sourceExpression.unbind(this, this.source);\n    }\n    this.source = null;\n    this._handler.dispose();\n    this._handler = null;\n  }\n};\n\nfunction getAU(element) {\n  let au = element.au;\n\n  if (au === undefined) {\n    throw new Error(`No Aurelia APIs are defined for the element: \"${element.tagName}\".`);\n  }\n\n  return au;\n}\n\nlet NameExpression = class NameExpression {\n  constructor(sourceExpression, apiName, lookupFunctions) {\n    this.sourceExpression = sourceExpression;\n    this.apiName = apiName;\n    this.lookupFunctions = lookupFunctions;\n    this.discrete = true;\n  }\n\n  createBinding(target) {\n    return new NameBinder(this.sourceExpression, NameExpression.locateAPI(target, this.apiName), this.lookupFunctions);\n  }\n\n  static locateAPI(element, apiName) {\n    switch (apiName) {\n      case 'element':\n        return element;\n      case 'controller':\n        return getAU(element).controller;\n      case 'view-model':\n        return getAU(element).controller.viewModel;\n      case 'view':\n        return getAU(element).controller.view;\n      default:\n        let target = getAU(element)[apiName];\n\n        if (target === undefined) {\n          throw new Error(`Attempted to reference \"${apiName}\", but it was not found amongst the target's API.`);\n        }\n\n        return target.viewModel;\n    }\n  }\n};\n\nlet NameBinder = class NameBinder {\n  constructor(sourceExpression, target, lookupFunctions) {\n    this.sourceExpression = sourceExpression;\n    this.target = target;\n    this.lookupFunctions = lookupFunctions;\n  }\n\n  bind(source) {\n    if (this.isBound) {\n      if (this.source === source) {\n        return;\n      }\n      this.unbind();\n    }\n    this.isBound = true;\n    this.source = source;\n    if (this.sourceExpression.bind) {\n      this.sourceExpression.bind(this, source, this.lookupFunctions);\n    }\n    this.sourceExpression.assign(this.source, this.target, this.lookupFunctions);\n  }\n\n  unbind() {\n    if (!this.isBound) {\n      return;\n    }\n    this.isBound = false;\n    if (this.sourceExpression.evaluate(this.source, this.lookupFunctions) === this.target) {\n      this.sourceExpression.assign(this.source, null, this.lookupFunctions);\n    }\n    if (this.sourceExpression.unbind) {\n      this.sourceExpression.unbind(this, this.source);\n    }\n    this.source = null;\n  }\n};\n\n\nconst LookupFunctions = {\n  bindingBehaviors: name => null,\n  valueConverters: name => null\n};\n\nlet BindingEngine = (_temp2 = _class13 = class BindingEngine {\n\n  constructor(observerLocator, parser) {\n    this.observerLocator = observerLocator;\n    this.parser = parser;\n  }\n\n  createBindingExpression(targetProperty, sourceExpression, mode = bindingMode.toView, lookupFunctions = LookupFunctions) {\n    return new BindingExpression(this.observerLocator, targetProperty, this.parser.parse(sourceExpression), mode, lookupFunctions);\n  }\n\n  propertyObserver(obj, propertyName) {\n    return {\n      subscribe: callback => {\n        let observer = this.observerLocator.getObserver(obj, propertyName);\n        observer.subscribe(callback);\n        return {\n          dispose: () => observer.unsubscribe(callback)\n        };\n      }\n    };\n  }\n\n  collectionObserver(collection) {\n    return {\n      subscribe: callback => {\n        let observer;\n        if (collection instanceof Array) {\n          observer = this.observerLocator.getArrayObserver(collection);\n        } else if (collection instanceof Map) {\n          observer = this.observerLocator.getMapObserver(collection);\n        } else if (collection instanceof Set) {\n          observer = this.observerLocator.getSetObserver(collection);\n        } else {\n          throw new Error('collection must be an instance of Array, Map or Set.');\n        }\n        observer.subscribe(callback);\n        return {\n          dispose: () => observer.unsubscribe(callback)\n        };\n      }\n    };\n  }\n\n  expressionObserver(bindingContext, expression) {\n    let scope = { bindingContext, overrideContext: createOverrideContext(bindingContext) };\n    return new ExpressionObserver(scope, this.parser.parse(expression), this.observerLocator, LookupFunctions);\n  }\n\n  parseExpression(expression) {\n    return this.parser.parse(expression);\n  }\n\n  registerAdapter(adapter) {\n    this.observerLocator.addAdapter(adapter);\n  }\n}, _class13.inject = [ObserverLocator, Parser], _temp2);\n\nlet setProto = Set.prototype;\n\nfunction getSetObserver(taskQueue, set) {\n  return ModifySetObserver.for(taskQueue, set);\n}\n\nlet ModifySetObserver = class ModifySetObserver extends ModifyCollectionObserver {\n  constructor(taskQueue, set) {\n    super(taskQueue, set);\n  }\n\n  static for(taskQueue, set) {\n    if (!('__set_observer__' in set)) {\n      Reflect.defineProperty(set, '__set_observer__', {\n        value: ModifySetObserver.create(taskQueue, set),\n        enumerable: false, configurable: false\n      });\n    }\n    return set.__set_observer__;\n  }\n\n  static create(taskQueue, set) {\n    let observer = new ModifySetObserver(taskQueue, set);\n\n    let proto = setProto;\n    if (proto.add !== set.add || proto.delete !== set.delete || proto.clear !== set.clear) {\n      proto = {\n        add: set.add,\n        delete: set.delete,\n        clear: set.clear\n      };\n    }\n\n    set.add = function () {\n      let type = 'add';\n      let oldSize = set.size;\n      let methodCallResult = proto.add.apply(set, arguments);\n      let hasValue = set.size === oldSize;\n      if (!hasValue) {\n        observer.addChangeRecord({\n          type: type,\n          object: set,\n          value: Array.from(set).pop()\n        });\n      }\n      return methodCallResult;\n    };\n\n    set.delete = function () {\n      let hasValue = set.has(arguments[0]);\n      let methodCallResult = proto.delete.apply(set, arguments);\n      if (hasValue) {\n        observer.addChangeRecord({\n          type: 'delete',\n          object: set,\n          value: arguments[0]\n        });\n      }\n      return methodCallResult;\n    };\n\n    set.clear = function () {\n      let methodCallResult = proto.clear.apply(set, arguments);\n      observer.addChangeRecord({\n        type: 'clear',\n        object: set\n      });\n      return methodCallResult;\n    };\n\n    return observer;\n  }\n};\n\n\nfunction observable(targetOrConfig, key, descriptor) {\n  function deco(target, key, descriptor, config) {\n    const isClassDecorator = key === undefined;\n    if (isClassDecorator) {\n      target = target.prototype;\n      key = typeof config === 'string' ? config : config.name;\n    }\n\n    let innerPropertyName = `_${key}`;\n    const innerPropertyDescriptor = {\n      configurable: true,\n      enumerable: false,\n      writable: true\n    };\n\n    const callbackName = config && config.changeHandler || `${key}Changed`;\n\n    if (descriptor) {\n      if (typeof descriptor.initializer === 'function') {\n        innerPropertyDescriptor.value = descriptor.initializer();\n      }\n    } else {\n      descriptor = {};\n    }\n\n    if (!('enumerable' in descriptor)) {\n      descriptor.enumerable = true;\n    }\n\n    delete descriptor.value;\n    delete descriptor.writable;\n    delete descriptor.initializer;\n\n    Reflect.defineProperty(target, innerPropertyName, innerPropertyDescriptor);\n\n    descriptor.get = function () {\n      return this[innerPropertyName];\n    };\n    descriptor.set = function (newValue) {\n      let oldValue = this[innerPropertyName];\n      if (newValue === oldValue) {\n        return;\n      }\n\n      this[innerPropertyName] = newValue;\n      Reflect.defineProperty(this, innerPropertyName, { enumerable: false });\n\n      if (this[callbackName]) {\n        this[callbackName](newValue, oldValue, key);\n      }\n    };\n\n    descriptor.get.dependencies = [innerPropertyName];\n\n    if (isClassDecorator) {\n      Reflect.defineProperty(target, key, descriptor);\n    } else {\n      return descriptor;\n    }\n  }\n\n  if (key === undefined) {\n    return (t, k, d) => deco(t, k, d, targetOrConfig);\n  }\n  return deco(targetOrConfig, key, descriptor);\n}\n\nconst signals = {};\n\nfunction connectBindingToSignal(binding, name) {\n  if (!signals.hasOwnProperty(name)) {\n    signals[name] = 0;\n  }\n  binding.observeProperty(signals, name);\n}\n\nfunction signalBindings(name) {\n  if (signals.hasOwnProperty(name)) {\n    signals[name]++;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTkR0SS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWJpbmRpbmcvZGlzdC9lczIwMTUvYXVyZWxpYS1iaW5kaW5nLmpzPzM0M2IiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9kZWMsIF9kZWMyLCBfY2xhc3MsIF9kZWMzLCBfY2xhc3MyLCBfZGVjNCwgX2NsYXNzMywgX2RlYzUsIF9jbGFzczUsIF9kZWM2LCBfY2xhc3M3LCBfZGVjNywgX2NsYXNzOCwgX2RlYzgsIF9jbGFzczksIF9kZWM5LCBfY2xhc3MxMCwgX2NsYXNzMTEsIF90ZW1wLCBfZGVjMTAsIF9jbGFzczEyLCBfY2xhc3MxMywgX3RlbXAyO1xuXG5pbXBvcnQgKiBhcyBMb2dNYW5hZ2VyIGZyb20gJ2F1cmVsaWEtbG9nZ2luZyc7XG5pbXBvcnQgeyBQTEFURk9STSwgRE9NIH0gZnJvbSAnYXVyZWxpYS1wYWwnO1xuaW1wb3J0IHsgVGFza1F1ZXVlIH0gZnJvbSAnYXVyZWxpYS10YXNrLXF1ZXVlJztcbmltcG9ydCB7IG1ldGFkYXRhIH0gZnJvbSAnYXVyZWxpYS1tZXRhZGF0YSc7XG5cbmV4cG9ydCBjb25zdCB0YXJnZXRDb250ZXh0ID0gJ0JpbmRpbmc6dGFyZ2V0JztcbmV4cG9ydCBjb25zdCBzb3VyY2VDb250ZXh0ID0gJ0JpbmRpbmc6c291cmNlJztcblxuY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7XG4gIGlmIChuYW1lIGluIG1hcCkge1xuICAgIHJldHVybiBtYXBbbmFtZV07XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gbmFtZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIG5hbWUuc2xpY2UoMSkucmVwbGFjZSgvW18uLV0oXFx3fCQpL2csIChfLCB4KSA9PiB4LnRvVXBwZXJDYXNlKCkpO1xuICBtYXBbbmFtZV0gPSByZXN1bHQ7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPdmVycmlkZUNvbnRleHQoYmluZGluZ0NvbnRleHQsIHBhcmVudE92ZXJyaWRlQ29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIGJpbmRpbmdDb250ZXh0OiBiaW5kaW5nQ29udGV4dCxcbiAgICBwYXJlbnRPdmVycmlkZUNvbnRleHQ6IHBhcmVudE92ZXJyaWRlQ29udGV4dCB8fCBudWxsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0Rm9yKG5hbWUsIHNjb3BlLCBhbmNlc3Rvcikge1xuICBsZXQgb2MgPSBzY29wZS5vdmVycmlkZUNvbnRleHQ7XG5cbiAgaWYgKGFuY2VzdG9yKSB7XG4gICAgd2hpbGUgKGFuY2VzdG9yICYmIG9jKSB7XG4gICAgICBhbmNlc3Rvci0tO1xuICAgICAgb2MgPSBvYy5wYXJlbnRPdmVycmlkZUNvbnRleHQ7XG4gICAgfVxuICAgIGlmIChhbmNlc3RvciB8fCAhb2MpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBuYW1lIGluIG9jID8gb2MgOiBvYy5iaW5kaW5nQ29udGV4dDtcbiAgfVxuXG4gIHdoaWxlIChvYyAmJiAhKG5hbWUgaW4gb2MpICYmICEob2MuYmluZGluZ0NvbnRleHQgJiYgbmFtZSBpbiBvYy5iaW5kaW5nQ29udGV4dCkpIHtcbiAgICBvYyA9IG9jLnBhcmVudE92ZXJyaWRlQ29udGV4dDtcbiAgfVxuICBpZiAob2MpIHtcbiAgICByZXR1cm4gbmFtZSBpbiBvYyA/IG9jIDogb2MuYmluZGluZ0NvbnRleHQ7XG4gIH1cblxuICByZXR1cm4gc2NvcGUuYmluZGluZ0NvbnRleHQgfHwgc2NvcGUub3ZlcnJpZGVDb250ZXh0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2NvcGVGb3JUZXN0KGJpbmRpbmdDb250ZXh0LCBwYXJlbnRCaW5kaW5nQ29udGV4dCkge1xuICBpZiAocGFyZW50QmluZGluZ0NvbnRleHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmluZGluZ0NvbnRleHQsXG4gICAgICBvdmVycmlkZUNvbnRleHQ6IGNyZWF0ZU92ZXJyaWRlQ29udGV4dChiaW5kaW5nQ29udGV4dCwgY3JlYXRlT3ZlcnJpZGVDb250ZXh0KHBhcmVudEJpbmRpbmdDb250ZXh0KSlcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgYmluZGluZ0NvbnRleHQsXG4gICAgb3ZlcnJpZGVDb250ZXh0OiBjcmVhdGVPdmVycmlkZUNvbnRleHQoYmluZGluZ0NvbnRleHQpXG4gIH07XG59XG5cbmNvbnN0IHNsb3ROYW1lcyA9IFtdO1xuY29uc3QgdmVyc2lvblNsb3ROYW1lcyA9IFtdO1xubGV0IGxhc3RTbG90ID0gLTE7XG5mdW5jdGlvbiBlbnN1cmVFbm91Z2hTbG90TmFtZXMoY3VycmVudFNsb3QpIHtcbiAgaWYgKGN1cnJlbnRTbG90ID09PSBsYXN0U2xvdCkge1xuICAgIGxhc3RTbG90ICs9IDU7XG4gICAgY29uc3QgaWkgPSBzbG90TmFtZXMubGVuZ3RoID0gdmVyc2lvblNsb3ROYW1lcy5sZW5ndGggPSBsYXN0U2xvdCArIDE7XG4gICAgZm9yIChsZXQgaSA9IGN1cnJlbnRTbG90ICsgMTsgaSA8IGlpOyArK2kpIHtcbiAgICAgIHNsb3ROYW1lc1tpXSA9IGBfb2JzZXJ2ZXIke2l9YDtcbiAgICAgIHZlcnNpb25TbG90TmFtZXNbaV0gPSBgX29ic2VydmVyVmVyc2lvbiR7aX1gO1xuICAgIH1cbiAgfVxufVxuZW5zdXJlRW5vdWdoU2xvdE5hbWVzKC0xKTtcblxuZnVuY3Rpb24gYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgbGV0IG9ic2VydmVyU2xvdHMgPSB0aGlzLl9vYnNlcnZlclNsb3RzID09PSB1bmRlZmluZWQgPyAwIDogdGhpcy5fb2JzZXJ2ZXJTbG90cztcbiAgbGV0IGkgPSBvYnNlcnZlclNsb3RzO1xuICB3aGlsZSAoaS0tICYmIHRoaXNbc2xvdE5hbWVzW2ldXSAhPT0gb2JzZXJ2ZXIpIHt9XG5cbiAgaWYgKGkgPT09IC0xKSB7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKHRoaXNbc2xvdE5hbWVzW2ldXSkge1xuICAgICAgaSsrO1xuICAgIH1cbiAgICB0aGlzW3Nsb3ROYW1lc1tpXV0gPSBvYnNlcnZlcjtcbiAgICBvYnNlcnZlci5zdWJzY3JpYmUoc291cmNlQ29udGV4dCwgdGhpcyk7XG5cbiAgICBpZiAoaSA9PT0gb2JzZXJ2ZXJTbG90cykge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXJTbG90cyA9IGkgKyAxO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl92ZXJzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLl92ZXJzaW9uID0gMDtcbiAgfVxuICB0aGlzW3ZlcnNpb25TbG90TmFtZXNbaV1dID0gdGhpcy5fdmVyc2lvbjtcbiAgZW5zdXJlRW5vdWdoU2xvdE5hbWVzKGkpO1xufVxuXG5mdW5jdGlvbiBvYnNlcnZlUHJvcGVydHkob2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgbGV0IG9ic2VydmVyID0gdGhpcy5vYnNlcnZlckxvY2F0b3IuZ2V0T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpO1xuICBhZGRPYnNlcnZlci5jYWxsKHRoaXMsIG9ic2VydmVyKTtcbn1cblxuZnVuY3Rpb24gb2JzZXJ2ZUFycmF5KGFycmF5KSB7XG4gIGxldCBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJMb2NhdG9yLmdldEFycmF5T2JzZXJ2ZXIoYXJyYXkpO1xuICBhZGRPYnNlcnZlci5jYWxsKHRoaXMsIG9ic2VydmVyKTtcbn1cblxuZnVuY3Rpb24gdW5vYnNlcnZlKGFsbCkge1xuICBsZXQgaSA9IHRoaXMuX29ic2VydmVyU2xvdHM7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoYWxsIHx8IHRoaXNbdmVyc2lvblNsb3ROYW1lc1tpXV0gIT09IHRoaXMuX3ZlcnNpb24pIHtcbiAgICAgIGxldCBvYnNlcnZlciA9IHRoaXNbc2xvdE5hbWVzW2ldXTtcbiAgICAgIHRoaXNbc2xvdE5hbWVzW2ldXSA9IG51bGw7XG4gICAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIudW5zdWJzY3JpYmUoc291cmNlQ29udGV4dCwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25uZWN0YWJsZSgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucHJvdG90eXBlLm9ic2VydmVQcm9wZXJ0eSA9IG9ic2VydmVQcm9wZXJ0eTtcbiAgICB0YXJnZXQucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IG9ic2VydmVBcnJheTtcbiAgICB0YXJnZXQucHJvdG90eXBlLnVub2JzZXJ2ZSA9IHVub2JzZXJ2ZTtcbiAgICB0YXJnZXQucHJvdG90eXBlLmFkZE9ic2VydmVyID0gYWRkT2JzZXJ2ZXI7XG4gIH07XG59XG5cbmNvbnN0IHF1ZXVlID0gW107XG5jb25zdCBxdWV1ZWQgPSB7fTtcbmxldCBuZXh0SWQgPSAwO1xubGV0IG1pbmltdW1JbW1lZGlhdGUgPSAxMDA7XG5jb25zdCBmcmFtZUJ1ZGdldCA9IDE1O1xuXG5sZXQgaXNGbHVzaFJlcXVlc3RlZCA9IGZhbHNlO1xubGV0IGltbWVkaWF0ZSA9IDA7XG5cbmZ1bmN0aW9uIGZsdXNoKGFuaW1hdGlvbkZyYW1lU3RhcnQpIHtcbiAgY29uc3QgbGVuZ3RoID0gcXVldWUubGVuZ3RoO1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgY29uc3QgYmluZGluZyA9IHF1ZXVlW2ldO1xuICAgIHF1ZXVlZFtiaW5kaW5nLl9fY29ubmVjdFF1ZXVlSWRdID0gZmFsc2U7XG4gICAgYmluZGluZy5jb25uZWN0KHRydWUpO1xuICAgIGkrKztcblxuICAgIGlmIChpICUgMTAwID09PSAwICYmIFBMQVRGT1JNLnBlcmZvcm1hbmNlLm5vdygpIC0gYW5pbWF0aW9uRnJhbWVTdGFydCA+IGZyYW1lQnVkZ2V0KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcXVldWUuc3BsaWNlKDAsIGkpO1xuXG4gIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICBQTEFURk9STS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZmx1c2gpO1xuICB9IGVsc2Uge1xuICAgIGlzRmx1c2hSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICBpbW1lZGlhdGUgPSAwO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnF1ZXVlQmluZGluZ0Nvbm5lY3QoYmluZGluZykge1xuICBpZiAoaW1tZWRpYXRlIDwgbWluaW11bUltbWVkaWF0ZSkge1xuICAgIGltbWVkaWF0ZSsrO1xuICAgIGJpbmRpbmcuY29ubmVjdChmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGlkID0gYmluZGluZy5fX2Nvbm5lY3RRdWV1ZUlkO1xuICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZCA9IG5leHRJZDtcbiAgICAgIG5leHRJZCsrO1xuICAgICAgYmluZGluZy5fX2Nvbm5lY3RRdWV1ZUlkID0gaWQ7XG4gICAgfVxuXG4gICAgaWYgKCFxdWV1ZWRbaWRdKSB7XG4gICAgICBxdWV1ZS5wdXNoKGJpbmRpbmcpO1xuICAgICAgcXVldWVkW2lkXSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmICghaXNGbHVzaFJlcXVlc3RlZCkge1xuICAgIGlzRmx1c2hSZXF1ZXN0ZWQgPSB0cnVlO1xuICAgIFBMQVRGT1JNLnJlcXVlc3RBbmltYXRpb25GcmFtZShmbHVzaCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbm5lY3RRdWV1ZVRocmVzaG9sZCh2YWx1ZSkge1xuICBtaW5pbXVtSW1tZWRpYXRlID0gdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVDb25uZWN0UXVldWUoKSB7XG4gIHNldENvbm5lY3RRdWV1ZVRocmVzaG9sZCgxMDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZUNvbm5lY3RRdWV1ZSgpIHtcbiAgc2V0Q29ubmVjdFF1ZXVlVGhyZXNob2xkKE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbm5lY3RRdWV1ZVNpemUoKSB7XG4gIHJldHVybiBxdWV1ZS5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgaWYgKHRoaXMuaGFzU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCF0aGlzLl9jb250ZXh0MCkge1xuICAgIHRoaXMuX2NvbnRleHQwID0gY29udGV4dDtcbiAgICB0aGlzLl9jYWxsYWJsZTAgPSBjYWxsYWJsZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIXRoaXMuX2NvbnRleHQxKSB7XG4gICAgdGhpcy5fY29udGV4dDEgPSBjb250ZXh0O1xuICAgIHRoaXMuX2NhbGxhYmxlMSA9IGNhbGxhYmxlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghdGhpcy5fY29udGV4dDIpIHtcbiAgICB0aGlzLl9jb250ZXh0MiA9IGNvbnRleHQ7XG4gICAgdGhpcy5fY2FsbGFibGUyID0gY2FsbGFibGU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCF0aGlzLl9jb250ZXh0c1Jlc3QpIHtcbiAgICB0aGlzLl9jb250ZXh0c1Jlc3QgPSBbY29udGV4dF07XG4gICAgdGhpcy5fY2FsbGFibGVzUmVzdCA9IFtjYWxsYWJsZV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdGhpcy5fY29udGV4dHNSZXN0LnB1c2goY29udGV4dCk7XG4gIHRoaXMuX2NhbGxhYmxlc1Jlc3QucHVzaChjYWxsYWJsZSk7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKSB7XG4gIGlmICh0aGlzLl9jb250ZXh0MCA9PT0gY29udGV4dCAmJiB0aGlzLl9jYWxsYWJsZTAgPT09IGNhbGxhYmxlKSB7XG4gICAgdGhpcy5fY29udGV4dDAgPSBudWxsO1xuICAgIHRoaXMuX2NhbGxhYmxlMCA9IG51bGw7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHRoaXMuX2NvbnRleHQxID09PSBjb250ZXh0ICYmIHRoaXMuX2NhbGxhYmxlMSA9PT0gY2FsbGFibGUpIHtcbiAgICB0aGlzLl9jb250ZXh0MSA9IG51bGw7XG4gICAgdGhpcy5fY2FsbGFibGUxID0gbnVsbDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodGhpcy5fY29udGV4dDIgPT09IGNvbnRleHQgJiYgdGhpcy5fY2FsbGFibGUyID09PSBjYWxsYWJsZSkge1xuICAgIHRoaXMuX2NvbnRleHQyID0gbnVsbDtcbiAgICB0aGlzLl9jYWxsYWJsZTIgPSBudWxsO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IGNhbGxhYmxlcyA9IHRoaXMuX2NhbGxhYmxlc1Jlc3Q7XG4gIGlmIChjYWxsYWJsZXMgPT09IHVuZGVmaW5lZCB8fCBjYWxsYWJsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGNvbnRleHRzID0gdGhpcy5fY29udGV4dHNSZXN0O1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlICghKGNhbGxhYmxlc1tpXSA9PT0gY2FsbGFibGUgJiYgY29udGV4dHNbaV0gPT09IGNvbnRleHQpICYmIGNhbGxhYmxlcy5sZW5ndGggPiBpKSB7XG4gICAgaSsrO1xuICB9XG4gIGlmIChpID49IGNhbGxhYmxlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29udGV4dHMuc3BsaWNlKGksIDEpO1xuICBjYWxsYWJsZXMuc3BsaWNlKGksIDEpO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubGV0IGFycmF5UG9vbDEgPSBbXTtcbmxldCBhcnJheVBvb2wyID0gW107XG5sZXQgcG9vbFV0aWxpemF0aW9uID0gW107XG5cbmZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVycyhuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgbGV0IGNvbnRleHQwID0gdGhpcy5fY29udGV4dDA7XG4gIGxldCBjYWxsYWJsZTAgPSB0aGlzLl9jYWxsYWJsZTA7XG4gIGxldCBjb250ZXh0MSA9IHRoaXMuX2NvbnRleHQxO1xuICBsZXQgY2FsbGFibGUxID0gdGhpcy5fY2FsbGFibGUxO1xuICBsZXQgY29udGV4dDIgPSB0aGlzLl9jb250ZXh0MjtcbiAgbGV0IGNhbGxhYmxlMiA9IHRoaXMuX2NhbGxhYmxlMjtcbiAgbGV0IGxlbmd0aCA9IHRoaXMuX2NvbnRleHRzUmVzdCA/IHRoaXMuX2NvbnRleHRzUmVzdC5sZW5ndGggOiAwO1xuICBsZXQgY29udGV4dHNSZXN0O1xuICBsZXQgY2FsbGFibGVzUmVzdDtcbiAgbGV0IHBvb2xJbmRleDtcbiAgbGV0IGk7XG4gIGlmIChsZW5ndGgpIHtcbiAgICBwb29sSW5kZXggPSBwb29sVXRpbGl6YXRpb24ubGVuZ3RoO1xuICAgIHdoaWxlIChwb29sSW5kZXgtLSAmJiBwb29sVXRpbGl6YXRpb25bcG9vbEluZGV4XSkge31cbiAgICBpZiAocG9vbEluZGV4IDwgMCkge1xuICAgICAgcG9vbEluZGV4ID0gcG9vbFV0aWxpemF0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnRleHRzUmVzdCA9IFtdO1xuICAgICAgY2FsbGFibGVzUmVzdCA9IFtdO1xuICAgICAgcG9vbFV0aWxpemF0aW9uLnB1c2godHJ1ZSk7XG4gICAgICBhcnJheVBvb2wxLnB1c2goY29udGV4dHNSZXN0KTtcbiAgICAgIGFycmF5UG9vbDIucHVzaChjYWxsYWJsZXNSZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9vbFV0aWxpemF0aW9uW3Bvb2xJbmRleF0gPSB0cnVlO1xuICAgICAgY29udGV4dHNSZXN0ID0gYXJyYXlQb29sMVtwb29sSW5kZXhdO1xuICAgICAgY2FsbGFibGVzUmVzdCA9IGFycmF5UG9vbDJbcG9vbEluZGV4XTtcbiAgICB9XG5cbiAgICBpID0gbGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNvbnRleHRzUmVzdFtpXSA9IHRoaXMuX2NvbnRleHRzUmVzdFtpXTtcbiAgICAgIGNhbGxhYmxlc1Jlc3RbaV0gPSB0aGlzLl9jYWxsYWJsZXNSZXN0W2ldO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb250ZXh0MCkge1xuICAgIGlmIChjYWxsYWJsZTApIHtcbiAgICAgIGNhbGxhYmxlMC5jYWxsKGNvbnRleHQwLCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0MChuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGV4dDEpIHtcbiAgICBpZiAoY2FsbGFibGUxKSB7XG4gICAgICBjYWxsYWJsZTEuY2FsbChjb250ZXh0MSwgbmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGV4dDEobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRleHQyKSB7XG4gICAgaWYgKGNhbGxhYmxlMikge1xuICAgICAgY2FsbGFibGUyLmNhbGwoY29udGV4dDIsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQyKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChsZW5ndGgpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBjYWxsYWJsZSA9IGNhbGxhYmxlc1Jlc3RbaV07XG4gICAgICBsZXQgY29udGV4dCA9IGNvbnRleHRzUmVzdFtpXTtcbiAgICAgIGlmIChjYWxsYWJsZSkge1xuICAgICAgICBjYWxsYWJsZS5jYWxsKGNvbnRleHQsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0KG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgICBjb250ZXh0c1Jlc3RbaV0gPSBudWxsO1xuICAgICAgY2FsbGFibGVzUmVzdFtpXSA9IG51bGw7XG4gICAgfVxuICAgIHBvb2xVdGlsaXphdGlvbltwb29sSW5kZXhdID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzU3Vic2NyaWJlcnMoKSB7XG4gIHJldHVybiAhISh0aGlzLl9jb250ZXh0MCB8fCB0aGlzLl9jb250ZXh0MSB8fCB0aGlzLl9jb250ZXh0MiB8fCB0aGlzLl9jb250ZXh0c1Jlc3QgJiYgdGhpcy5fY29udGV4dHNSZXN0Lmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGhhc1N1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgbGV0IGhhcyA9IHRoaXMuX2NvbnRleHQwID09PSBjb250ZXh0ICYmIHRoaXMuX2NhbGxhYmxlMCA9PT0gY2FsbGFibGUgfHwgdGhpcy5fY29udGV4dDEgPT09IGNvbnRleHQgJiYgdGhpcy5fY2FsbGFibGUxID09PSBjYWxsYWJsZSB8fCB0aGlzLl9jb250ZXh0MiA9PT0gY29udGV4dCAmJiB0aGlzLl9jYWxsYWJsZTIgPT09IGNhbGxhYmxlO1xuICBpZiAoaGFzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgbGV0IGluZGV4O1xuICBsZXQgY29udGV4dHMgPSB0aGlzLl9jb250ZXh0c1Jlc3Q7XG4gIGlmICghY29udGV4dHMgfHwgKGluZGV4ID0gY29udGV4dHMubGVuZ3RoKSA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgY2FsbGFibGVzID0gdGhpcy5fY2FsbGFibGVzUmVzdDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICBpZiAoY29udGV4dHNbaW5kZXhdID09PSBjb250ZXh0ICYmIGNhbGxhYmxlc1tpbmRleF0gPT09IGNhbGxhYmxlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlckNvbGxlY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnByb3RvdHlwZS5hZGRTdWJzY3JpYmVyID0gYWRkU3Vic2NyaWJlcjtcbiAgICB0YXJnZXQucHJvdG90eXBlLnJlbW92ZVN1YnNjcmliZXIgPSByZW1vdmVTdWJzY3JpYmVyO1xuICAgIHRhcmdldC5wcm90b3R5cGUuY2FsbFN1YnNjcmliZXJzID0gY2FsbFN1YnNjcmliZXJzO1xuICAgIHRhcmdldC5wcm90b3R5cGUuaGFzU3Vic2NyaWJlcnMgPSBoYXNTdWJzY3JpYmVycztcbiAgICB0YXJnZXQucHJvdG90eXBlLmhhc1N1YnNjcmliZXIgPSBoYXNTdWJzY3JpYmVyO1xuICB9O1xufVxuXG5leHBvcnQgbGV0IEV4cHJlc3Npb25PYnNlcnZlciA9IChfZGVjID0gY29ubmVjdGFibGUoKSwgX2RlYzIgPSBzdWJzY3JpYmVyQ29sbGVjdGlvbigpLCBfZGVjKF9jbGFzcyA9IF9kZWMyKF9jbGFzcyA9IGNsYXNzIEV4cHJlc3Npb25PYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlLCBleHByZXNzaW9uLCBvYnNlcnZlckxvY2F0b3IsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgIHRoaXMubG9va3VwRnVuY3Rpb25zID0gbG9va3VwRnVuY3Rpb25zO1xuICB9XG5cbiAgZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhwcmVzc2lvbi5ldmFsdWF0ZSh0aGlzLnNjb3BlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XG4gIH1cblxuICBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIHRoaXMuZXhwcmVzc2lvbi5hc3NpZ24odGhpcy5zY29wZSwgbmV3VmFsdWUpO1xuICB9XG5cbiAgc3Vic2NyaWJlKGNvbnRleHQsIGNhbGxhYmxlKSB7XG4gICAgaWYgKCF0aGlzLmhhc1N1YnNjcmliZXJzKCkpIHtcbiAgICAgIHRoaXMub2xkVmFsdWUgPSB0aGlzLmV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zY29wZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICAgICAgdGhpcy5leHByZXNzaW9uLmNvbm5lY3QodGhpcywgdGhpcy5zY29wZSk7XG4gICAgfVxuICAgIHRoaXMuYWRkU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgY29udGV4dCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy51bnN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdW5zdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICBpZiAodGhpcy5yZW1vdmVTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKSAmJiAhdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLnVub2JzZXJ2ZSh0cnVlKTtcbiAgICAgIHRoaXMub2xkVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgY2FsbCgpIHtcbiAgICBsZXQgbmV3VmFsdWUgPSB0aGlzLmV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zY29wZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICAgIGxldCBvbGRWYWx1ZSA9IHRoaXMub2xkVmFsdWU7XG4gICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5vbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5jYWxsU3Vic2NyaWJlcnMobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5fdmVyc2lvbisrO1xuICAgIHRoaXMuZXhwcmVzc2lvbi5jb25uZWN0KHRoaXMsIHRoaXMuc2NvcGUpO1xuICAgIHRoaXMudW5vYnNlcnZlKGZhbHNlKTtcbiAgfVxufSkgfHwgX2NsYXNzKSB8fCBfY2xhc3MpO1xuXG5mdW5jdGlvbiBpc0luZGV4KHMpIHtcbiAgcmV0dXJuICtzID09PSBzID4+PiAwO1xufVxuXG5mdW5jdGlvbiB0b051bWJlcihzKSB7XG4gIHJldHVybiArcztcbn1cblxuZnVuY3Rpb24gbmV3U3BsaWNlKGluZGV4LCByZW1vdmVkLCBhZGRlZENvdW50KSB7XG4gIHJldHVybiB7XG4gICAgaW5kZXg6IGluZGV4LFxuICAgIHJlbW92ZWQ6IHJlbW92ZWQsXG4gICAgYWRkZWRDb3VudDogYWRkZWRDb3VudFxuICB9O1xufVxuXG5jb25zdCBFRElUX0xFQVZFID0gMDtcbmNvbnN0IEVESVRfVVBEQVRFID0gMTtcbmNvbnN0IEVESVRfQUREID0gMjtcbmNvbnN0IEVESVRfREVMRVRFID0gMztcblxuZnVuY3Rpb24gQXJyYXlTcGxpY2UoKSB7fVxuXG5BcnJheVNwbGljZS5wcm90b3R5cGUgPSB7XG4gIGNhbGNFZGl0RGlzdGFuY2VzOiBmdW5jdGlvbiAoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLCBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpIHtcbiAgICBsZXQgcm93Q291bnQgPSBvbGRFbmQgLSBvbGRTdGFydCArIDE7XG4gICAgbGV0IGNvbHVtbkNvdW50ID0gY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCArIDE7XG4gICAgbGV0IGRpc3RhbmNlcyA9IG5ldyBBcnJheShyb3dDb3VudCk7XG4gICAgbGV0IG5vcnRoO1xuICAgIGxldCB3ZXN0O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dDb3VudDsgKytpKSB7XG4gICAgICBkaXN0YW5jZXNbaV0gPSBuZXcgQXJyYXkoY29sdW1uQ291bnQpO1xuICAgICAgZGlzdGFuY2VzW2ldWzBdID0gaTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbkNvdW50OyArK2opIHtcbiAgICAgIGRpc3RhbmNlc1swXVtqXSA9IGo7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCByb3dDb3VudDsgKytpKSB7XG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGNvbHVtbkNvdW50OyArK2opIHtcbiAgICAgICAgaWYgKHRoaXMuZXF1YWxzKGN1cnJlbnRbY3VycmVudFN0YXJ0ICsgaiAtIDFdLCBvbGRbb2xkU3RhcnQgKyBpIC0gMV0pKSB7XG4gICAgICAgICAgZGlzdGFuY2VzW2ldW2pdID0gZGlzdGFuY2VzW2kgLSAxXVtqIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9ydGggPSBkaXN0YW5jZXNbaSAtIDFdW2pdICsgMTtcbiAgICAgICAgICB3ZXN0ID0gZGlzdGFuY2VzW2ldW2ogLSAxXSArIDE7XG4gICAgICAgICAgZGlzdGFuY2VzW2ldW2pdID0gbm9ydGggPCB3ZXN0ID8gbm9ydGggOiB3ZXN0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpc3RhbmNlcztcbiAgfSxcblxuICBzcGxpY2VPcGVyYXRpb25zRnJvbUVkaXREaXN0YW5jZXM6IGZ1bmN0aW9uIChkaXN0YW5jZXMpIHtcbiAgICBsZXQgaSA9IGRpc3RhbmNlcy5sZW5ndGggLSAxO1xuICAgIGxldCBqID0gZGlzdGFuY2VzWzBdLmxlbmd0aCAtIDE7XG4gICAgbGV0IGN1cnJlbnQgPSBkaXN0YW5jZXNbaV1bal07XG4gICAgbGV0IGVkaXRzID0gW107XG4gICAgd2hpbGUgKGkgPiAwIHx8IGogPiAwKSB7XG4gICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICBlZGl0cy5wdXNoKEVESVRfQUREKTtcbiAgICAgICAgai0tO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChqID09PSAwKSB7XG4gICAgICAgIGVkaXRzLnB1c2goRURJVF9ERUxFVEUpO1xuICAgICAgICBpLS07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGV0IG5vcnRoV2VzdCA9IGRpc3RhbmNlc1tpIC0gMV1baiAtIDFdO1xuICAgICAgbGV0IHdlc3QgPSBkaXN0YW5jZXNbaSAtIDFdW2pdO1xuICAgICAgbGV0IG5vcnRoID0gZGlzdGFuY2VzW2ldW2ogLSAxXTtcblxuICAgICAgbGV0IG1pbjtcbiAgICAgIGlmICh3ZXN0IDwgbm9ydGgpIHtcbiAgICAgICAgbWluID0gd2VzdCA8IG5vcnRoV2VzdCA/IHdlc3QgOiBub3J0aFdlc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtaW4gPSBub3J0aCA8IG5vcnRoV2VzdCA/IG5vcnRoIDogbm9ydGhXZXN0O1xuICAgICAgfVxuXG4gICAgICBpZiAobWluID09PSBub3J0aFdlc3QpIHtcbiAgICAgICAgaWYgKG5vcnRoV2VzdCA9PT0gY3VycmVudCkge1xuICAgICAgICAgIGVkaXRzLnB1c2goRURJVF9MRUFWRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWRpdHMucHVzaChFRElUX1VQREFURSk7XG4gICAgICAgICAgY3VycmVudCA9IG5vcnRoV2VzdDtcbiAgICAgICAgfVxuICAgICAgICBpLS07XG4gICAgICAgIGotLTtcbiAgICAgIH0gZWxzZSBpZiAobWluID09PSB3ZXN0KSB7XG4gICAgICAgIGVkaXRzLnB1c2goRURJVF9ERUxFVEUpO1xuICAgICAgICBpLS07XG4gICAgICAgIGN1cnJlbnQgPSB3ZXN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWRpdHMucHVzaChFRElUX0FERCk7XG4gICAgICAgIGotLTtcbiAgICAgICAgY3VycmVudCA9IG5vcnRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVkaXRzLnJldmVyc2UoKTtcbiAgICByZXR1cm4gZWRpdHM7XG4gIH0sXG5cbiAgY2FsY1NwbGljZXM6IGZ1bmN0aW9uIChjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCkge1xuICAgIGxldCBwcmVmaXhDb3VudCA9IDA7XG4gICAgbGV0IHN1ZmZpeENvdW50ID0gMDtcblxuICAgIGxldCBtaW5MZW5ndGggPSBNYXRoLm1pbihjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0LCBvbGRFbmQgLSBvbGRTdGFydCk7XG4gICAgaWYgKGN1cnJlbnRTdGFydCA9PT0gMCAmJiBvbGRTdGFydCA9PT0gMCkge1xuICAgICAgcHJlZml4Q291bnQgPSB0aGlzLnNoYXJlZFByZWZpeChjdXJyZW50LCBvbGQsIG1pbkxlbmd0aCk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRFbmQgPT09IGN1cnJlbnQubGVuZ3RoICYmIG9sZEVuZCA9PT0gb2xkLmxlbmd0aCkge1xuICAgICAgc3VmZml4Q291bnQgPSB0aGlzLnNoYXJlZFN1ZmZpeChjdXJyZW50LCBvbGQsIG1pbkxlbmd0aCAtIHByZWZpeENvdW50KTtcbiAgICB9XG5cbiAgICBjdXJyZW50U3RhcnQgKz0gcHJlZml4Q291bnQ7XG4gICAgb2xkU3RhcnQgKz0gcHJlZml4Q291bnQ7XG4gICAgY3VycmVudEVuZCAtPSBzdWZmaXhDb3VudDtcbiAgICBvbGRFbmQgLT0gc3VmZml4Q291bnQ7XG5cbiAgICBpZiAoY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCA9PT0gMCAmJiBvbGRFbmQgLSBvbGRTdGFydCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50U3RhcnQgPT09IGN1cnJlbnRFbmQpIHtcbiAgICAgIGxldCBzcGxpY2UgPSBuZXdTcGxpY2UoY3VycmVudFN0YXJ0LCBbXSwgMCk7XG4gICAgICB3aGlsZSAob2xkU3RhcnQgPCBvbGRFbmQpIHtcbiAgICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkU3RhcnQrK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW3NwbGljZV07XG4gICAgfSBlbHNlIGlmIChvbGRTdGFydCA9PT0gb2xkRW5kKSB7XG4gICAgICByZXR1cm4gW25ld1NwbGljZShjdXJyZW50U3RhcnQsIFtdLCBjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0KV07XG4gICAgfVxuXG4gICAgbGV0IG9wcyA9IHRoaXMuc3BsaWNlT3BlcmF0aW9uc0Zyb21FZGl0RGlzdGFuY2VzKHRoaXMuY2FsY0VkaXREaXN0YW5jZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLCBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpKTtcblxuICAgIGxldCBzcGxpY2UgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHNwbGljZXMgPSBbXTtcbiAgICBsZXQgaW5kZXggPSBjdXJyZW50U3RhcnQ7XG4gICAgbGV0IG9sZEluZGV4ID0gb2xkU3RhcnQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHN3aXRjaCAob3BzW2ldKSB7XG4gICAgICAgIGNhc2UgRURJVF9MRUFWRTpcbiAgICAgICAgICBpZiAoc3BsaWNlKSB7XG4gICAgICAgICAgICBzcGxpY2VzLnB1c2goc3BsaWNlKTtcbiAgICAgICAgICAgIHNwbGljZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgIG9sZEluZGV4Kys7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRURJVF9VUERBVEU6XG4gICAgICAgICAgaWYgKCFzcGxpY2UpIHtcbiAgICAgICAgICAgIHNwbGljZSA9IG5ld1NwbGljZShpbmRleCwgW10sIDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNwbGljZS5hZGRlZENvdW50Kys7XG4gICAgICAgICAgaW5kZXgrKztcblxuICAgICAgICAgIHNwbGljZS5yZW1vdmVkLnB1c2gob2xkW29sZEluZGV4XSk7XG4gICAgICAgICAgb2xkSW5kZXgrKztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFRElUX0FERDpcbiAgICAgICAgICBpZiAoIXNwbGljZSkge1xuICAgICAgICAgICAgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCBbXSwgMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3BsaWNlLmFkZGVkQ291bnQrKztcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEVESVRfREVMRVRFOlxuICAgICAgICAgIGlmICghc3BsaWNlKSB7XG4gICAgICAgICAgICBzcGxpY2UgPSBuZXdTcGxpY2UoaW5kZXgsIFtdLCAwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzcGxpY2UucmVtb3ZlZC5wdXNoKG9sZFtvbGRJbmRleF0pO1xuICAgICAgICAgIG9sZEluZGV4Kys7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNwbGljZSkge1xuICAgICAgc3BsaWNlcy5wdXNoKHNwbGljZSk7XG4gICAgfVxuICAgIHJldHVybiBzcGxpY2VzO1xuICB9LFxuXG4gIHNoYXJlZFByZWZpeDogZnVuY3Rpb24gKGN1cnJlbnQsIG9sZCwgc2VhcmNoTGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWFyY2hMZW5ndGg7ICsraSkge1xuICAgICAgaWYgKCF0aGlzLmVxdWFscyhjdXJyZW50W2ldLCBvbGRbaV0pKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWFyY2hMZW5ndGg7XG4gIH0sXG5cbiAgc2hhcmVkU3VmZml4OiBmdW5jdGlvbiAoY3VycmVudCwgb2xkLCBzZWFyY2hMZW5ndGgpIHtcbiAgICBsZXQgaW5kZXgxID0gY3VycmVudC5sZW5ndGg7XG4gICAgbGV0IGluZGV4MiA9IG9sZC5sZW5ndGg7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICB3aGlsZSAoY291bnQgPCBzZWFyY2hMZW5ndGggJiYgdGhpcy5lcXVhbHMoY3VycmVudFstLWluZGV4MV0sIG9sZFstLWluZGV4Ml0pKSB7XG4gICAgICBjb3VudCsrO1xuICAgIH1cblxuICAgIHJldHVybiBjb3VudDtcbiAgfSxcblxuICBjYWxjdWxhdGVTcGxpY2VzOiBmdW5jdGlvbiAoY3VycmVudCwgcHJldmlvdXMpIHtcbiAgICByZXR1cm4gdGhpcy5jYWxjU3BsaWNlcyhjdXJyZW50LCAwLCBjdXJyZW50Lmxlbmd0aCwgcHJldmlvdXMsIDAsIHByZXZpb3VzLmxlbmd0aCk7XG4gIH0sXG5cbiAgZXF1YWxzOiBmdW5jdGlvbiAoY3VycmVudFZhbHVlLCBwcmV2aW91c1ZhbHVlKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRWYWx1ZSA9PT0gcHJldmlvdXNWYWx1ZTtcbiAgfVxufTtcblxubGV0IGFycmF5U3BsaWNlID0gbmV3IEFycmF5U3BsaWNlKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjU3BsaWNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCkge1xuICByZXR1cm4gYXJyYXlTcGxpY2UuY2FsY1NwbGljZXMoY3VycmVudCwgY3VycmVudFN0YXJ0LCBjdXJyZW50RW5kLCBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQpO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3Qoc3RhcnQxLCBlbmQxLCBzdGFydDIsIGVuZDIpIHtcbiAgaWYgKGVuZDEgPCBzdGFydDIgfHwgZW5kMiA8IHN0YXJ0MSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGlmIChlbmQxID09PSBzdGFydDIgfHwgZW5kMiA9PT0gc3RhcnQxKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoc3RhcnQxIDwgc3RhcnQyKSB7XG4gICAgaWYgKGVuZDEgPCBlbmQyKSB7XG4gICAgICByZXR1cm4gZW5kMSAtIHN0YXJ0MjtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5kMiAtIHN0YXJ0MjtcbiAgfVxuXG4gIGlmIChlbmQyIDwgZW5kMSkge1xuICAgIHJldHVybiBlbmQyIC0gc3RhcnQxO1xuICB9XG5cbiAgcmV0dXJuIGVuZDEgLSBzdGFydDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVNwbGljZShzcGxpY2VzLCBpbmRleCwgcmVtb3ZlZCwgYWRkZWRDb3VudCkge1xuICBsZXQgc3BsaWNlID0gbmV3U3BsaWNlKGluZGV4LCByZW1vdmVkLCBhZGRlZENvdW50KTtcblxuICBsZXQgaW5zZXJ0ZWQgPSBmYWxzZTtcbiAgbGV0IGluc2VydGlvbk9mZnNldCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcGxpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGN1cnJlbnQgPSBzcGxpY2VzW2ldO1xuICAgIGN1cnJlbnQuaW5kZXggKz0gaW5zZXJ0aW9uT2Zmc2V0O1xuXG4gICAgaWYgKGluc2VydGVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBsZXQgaW50ZXJzZWN0Q291bnQgPSBpbnRlcnNlY3Qoc3BsaWNlLmluZGV4LCBzcGxpY2UuaW5kZXggKyBzcGxpY2UucmVtb3ZlZC5sZW5ndGgsIGN1cnJlbnQuaW5kZXgsIGN1cnJlbnQuaW5kZXggKyBjdXJyZW50LmFkZGVkQ291bnQpO1xuXG4gICAgaWYgKGludGVyc2VjdENvdW50ID49IDApIHtcblxuICAgICAgc3BsaWNlcy5zcGxpY2UoaSwgMSk7XG4gICAgICBpLS07XG5cbiAgICAgIGluc2VydGlvbk9mZnNldCAtPSBjdXJyZW50LmFkZGVkQ291bnQgLSBjdXJyZW50LnJlbW92ZWQubGVuZ3RoO1xuXG4gICAgICBzcGxpY2UuYWRkZWRDb3VudCArPSBjdXJyZW50LmFkZGVkQ291bnQgLSBpbnRlcnNlY3RDb3VudDtcbiAgICAgIGxldCBkZWxldGVDb3VudCA9IHNwbGljZS5yZW1vdmVkLmxlbmd0aCArIGN1cnJlbnQucmVtb3ZlZC5sZW5ndGggLSBpbnRlcnNlY3RDb3VudDtcblxuICAgICAgaWYgKCFzcGxpY2UuYWRkZWRDb3VudCAmJiAhZGVsZXRlQ291bnQpIHtcbiAgICAgICAgaW5zZXJ0ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGN1cnJlbnRSZW1vdmVkID0gY3VycmVudC5yZW1vdmVkO1xuXG4gICAgICAgIGlmIChzcGxpY2UuaW5kZXggPCBjdXJyZW50LmluZGV4KSB7XG4gICAgICAgICAgbGV0IHByZXBlbmQgPSBzcGxpY2UucmVtb3ZlZC5zbGljZSgwLCBjdXJyZW50LmluZGV4IC0gc3BsaWNlLmluZGV4KTtcbiAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShwcmVwZW5kLCBjdXJyZW50UmVtb3ZlZCk7XG4gICAgICAgICAgY3VycmVudFJlbW92ZWQgPSBwcmVwZW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNwbGljZS5pbmRleCArIHNwbGljZS5yZW1vdmVkLmxlbmd0aCA+IGN1cnJlbnQuaW5kZXggKyBjdXJyZW50LmFkZGVkQ291bnQpIHtcbiAgICAgICAgICBsZXQgYXBwZW5kID0gc3BsaWNlLnJlbW92ZWQuc2xpY2UoY3VycmVudC5pbmRleCArIGN1cnJlbnQuYWRkZWRDb3VudCAtIHNwbGljZS5pbmRleCk7XG4gICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoY3VycmVudFJlbW92ZWQsIGFwcGVuZCk7XG4gICAgICAgIH1cblxuICAgICAgICBzcGxpY2UucmVtb3ZlZCA9IGN1cnJlbnRSZW1vdmVkO1xuICAgICAgICBpZiAoY3VycmVudC5pbmRleCA8IHNwbGljZS5pbmRleCkge1xuICAgICAgICAgIHNwbGljZS5pbmRleCA9IGN1cnJlbnQuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNwbGljZS5pbmRleCA8IGN1cnJlbnQuaW5kZXgpIHtcblxuICAgICAgaW5zZXJ0ZWQgPSB0cnVlO1xuXG4gICAgICBzcGxpY2VzLnNwbGljZShpLCAwLCBzcGxpY2UpO1xuICAgICAgaSsrO1xuXG4gICAgICBsZXQgb2Zmc2V0ID0gc3BsaWNlLmFkZGVkQ291bnQgLSBzcGxpY2UucmVtb3ZlZC5sZW5ndGg7XG4gICAgICBjdXJyZW50LmluZGV4ICs9IG9mZnNldDtcbiAgICAgIGluc2VydGlvbk9mZnNldCArPSBvZmZzZXQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFpbnNlcnRlZCkge1xuICAgIHNwbGljZXMucHVzaChzcGxpY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUluaXRpYWxTcGxpY2VzKGFycmF5LCBjaGFuZ2VSZWNvcmRzKSB7XG4gIGxldCBzcGxpY2VzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFuZ2VSZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHJlY29yZCA9IGNoYW5nZVJlY29yZHNbaV07XG4gICAgc3dpdGNoIChyZWNvcmQudHlwZSkge1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgbWVyZ2VTcGxpY2Uoc3BsaWNlcywgcmVjb3JkLmluZGV4LCByZWNvcmQucmVtb3ZlZC5zbGljZSgpLCByZWNvcmQuYWRkZWRDb3VudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYWRkJzpcbiAgICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICBpZiAoIWlzSW5kZXgocmVjb3JkLm5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5kZXggPSB0b051bWJlcihyZWNvcmQubmFtZSk7XG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lcmdlU3BsaWNlKHNwbGljZXMsIGluZGV4LCBbcmVjb3JkLm9sZFZhbHVlXSwgcmVjb3JkLnR5cGUgPT09ICdkZWxldGUnID8gMCA6IDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgcmVjb3JkIHR5cGU6ICcgKyBKU09OLnN0cmluZ2lmeShyZWNvcmQpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNwbGljZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0QXJyYXlTcGxpY2VzKGFycmF5LCBjaGFuZ2VSZWNvcmRzKSB7XG4gIGxldCBzcGxpY2VzID0gW107XG5cbiAgY3JlYXRlSW5pdGlhbFNwbGljZXMoYXJyYXksIGNoYW5nZVJlY29yZHMpLmZvckVhY2goZnVuY3Rpb24gKHNwbGljZSkge1xuICAgIGlmIChzcGxpY2UuYWRkZWRDb3VudCA9PT0gMSAmJiBzcGxpY2UucmVtb3ZlZC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChzcGxpY2UucmVtb3ZlZFswXSAhPT0gYXJyYXlbc3BsaWNlLmluZGV4XSkge1xuICAgICAgICBzcGxpY2VzLnB1c2goc3BsaWNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNwbGljZXMgPSBzcGxpY2VzLmNvbmNhdChjYWxjU3BsaWNlcyhhcnJheSwgc3BsaWNlLmluZGV4LCBzcGxpY2UuaW5kZXggKyBzcGxpY2UuYWRkZWRDb3VudCwgc3BsaWNlLnJlbW92ZWQsIDAsIHNwbGljZS5yZW1vdmVkLmxlbmd0aCkpO1xuICB9KTtcblxuICByZXR1cm4gc3BsaWNlcztcbn1cblxuZnVuY3Rpb24gbmV3UmVjb3JkKHR5cGUsIG9iamVjdCwga2V5LCBvbGRWYWx1ZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgb2JqZWN0OiBvYmplY3QsXG4gICAga2V5OiBrZXksXG4gICAgb2xkVmFsdWU6IG9sZFZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGFuZ2VSZWNvcmRzKG1hcCkge1xuICBsZXQgZW50cmllcyA9IG5ldyBBcnJheShtYXAuc2l6ZSk7XG4gIGxldCBrZXlzID0gbWFwLmtleXMoKTtcbiAgbGV0IGkgPSAwO1xuICBsZXQgaXRlbTtcblxuICB3aGlsZSAoaXRlbSA9IGtleXMubmV4dCgpKSB7XG4gICAgaWYgKGl0ZW0uZG9uZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgZW50cmllc1tpXSA9IG5ld1JlY29yZCgnYWRkZWQnLCBtYXAsIGl0ZW0udmFsdWUpO1xuICAgIGkrKztcbiAgfVxuXG4gIHJldHVybiBlbnRyaWVzO1xufVxuXG5leHBvcnQgbGV0IE1vZGlmeUNvbGxlY3Rpb25PYnNlcnZlciA9IChfZGVjMyA9IHN1YnNjcmliZXJDb2xsZWN0aW9uKCksIF9kZWMzKF9jbGFzczIgPSBjbGFzcyBNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3Rvcih0YXNrUXVldWUsIGNvbGxlY3Rpb24pIHtcbiAgICB0aGlzLnRhc2tRdWV1ZSA9IHRhc2tRdWV1ZTtcbiAgICB0aGlzLnF1ZXVlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2hhbmdlUmVjb3JkcyA9IG51bGw7XG4gICAgdGhpcy5vbGRDb2xsZWN0aW9uID0gbnVsbDtcbiAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIHRoaXMubGVuZ3RoUHJvcGVydHlOYW1lID0gY29sbGVjdGlvbiBpbnN0YW5jZW9mIE1hcCB8fCBjb2xsZWN0aW9uIGluc3RhbmNlb2YgU2V0ID8gJ3NpemUnIDogJ2xlbmd0aCc7XG4gIH1cblxuICBzdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICB0aGlzLmFkZFN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xuICB9XG5cbiAgdW5zdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICB0aGlzLnJlbW92ZVN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xuICB9XG5cbiAgYWRkQ2hhbmdlUmVjb3JkKGNoYW5nZVJlY29yZCkge1xuICAgIGlmICghdGhpcy5oYXNTdWJzY3JpYmVycygpICYmICF0aGlzLmxlbmd0aE9ic2VydmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZVJlY29yZC50eXBlID09PSAnc3BsaWNlJykge1xuICAgICAgbGV0IGluZGV4ID0gY2hhbmdlUmVjb3JkLmluZGV4O1xuICAgICAgbGV0IGFycmF5TGVuZ3RoID0gY2hhbmdlUmVjb3JkLm9iamVjdC5sZW5ndGg7XG4gICAgICBpZiAoaW5kZXggPiBhcnJheUxlbmd0aCkge1xuICAgICAgICBpbmRleCA9IGFycmF5TGVuZ3RoIC0gY2hhbmdlUmVjb3JkLmFkZGVkQ291bnQ7XG4gICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IGFycmF5TGVuZ3RoICsgY2hhbmdlUmVjb3JkLnJlbW92ZWQubGVuZ3RoICsgaW5kZXggLSBjaGFuZ2VSZWNvcmQuYWRkZWRDb3VudDtcbiAgICAgIH1cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgY2hhbmdlUmVjb3JkLmluZGV4ID0gaW5kZXg7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2hhbmdlUmVjb3JkcyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5jaGFuZ2VSZWNvcmRzID0gW2NoYW5nZVJlY29yZF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhbmdlUmVjb3Jkcy5wdXNoKGNoYW5nZVJlY29yZCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnF1ZXVlZCkge1xuICAgICAgdGhpcy5xdWV1ZWQgPSB0cnVlO1xuICAgICAgdGhpcy50YXNrUXVldWUucXVldWVNaWNyb1Rhc2sodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgZmx1c2hDaGFuZ2VSZWNvcmRzKCkge1xuICAgIGlmICh0aGlzLmNoYW5nZVJlY29yZHMgJiYgdGhpcy5jaGFuZ2VSZWNvcmRzLmxlbmd0aCB8fCB0aGlzLm9sZENvbGxlY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0KG9sZENvbGxlY3Rpb24pIHtcbiAgICB0aGlzLm9sZENvbGxlY3Rpb24gPSBvbGRDb2xsZWN0aW9uO1xuXG4gICAgaWYgKHRoaXMuaGFzU3Vic2NyaWJlcnMoKSAmJiAhdGhpcy5xdWV1ZWQpIHtcbiAgICAgIHRoaXMucXVldWVkID0gdHJ1ZTtcbiAgICAgIHRoaXMudGFza1F1ZXVlLnF1ZXVlTWljcm9UYXNrKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGdldExlbmd0aE9ic2VydmVyKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aE9ic2VydmVyIHx8ICh0aGlzLmxlbmd0aE9ic2VydmVyID0gbmV3IENvbGxlY3Rpb25MZW5ndGhPYnNlcnZlcih0aGlzLmNvbGxlY3Rpb24pKTtcbiAgfVxuXG4gIGNhbGwoKSB7XG4gICAgbGV0IGNoYW5nZVJlY29yZHMgPSB0aGlzLmNoYW5nZVJlY29yZHM7XG4gICAgbGV0IG9sZENvbGxlY3Rpb24gPSB0aGlzLm9sZENvbGxlY3Rpb247XG4gICAgbGV0IHJlY29yZHM7XG5cbiAgICB0aGlzLnF1ZXVlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2hhbmdlUmVjb3JkcyA9IFtdO1xuICAgIHRoaXMub2xkQ29sbGVjdGlvbiA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICBpZiAob2xkQ29sbGVjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5jb2xsZWN0aW9uIGluc3RhbmNlb2YgTWFwIHx8IHRoaXMuY29sbGVjdGlvbiBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgIHJlY29yZHMgPSBnZXRDaGFuZ2VSZWNvcmRzKG9sZENvbGxlY3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY29yZHMgPSBjYWxjU3BsaWNlcyh0aGlzLmNvbGxlY3Rpb24sIDAsIHRoaXMuY29sbGVjdGlvbi5sZW5ndGgsIG9sZENvbGxlY3Rpb24sIDAsIG9sZENvbGxlY3Rpb24ubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuY29sbGVjdGlvbiBpbnN0YW5jZW9mIE1hcCB8fCB0aGlzLmNvbGxlY3Rpb24gaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICByZWNvcmRzID0gY2hhbmdlUmVjb3JkcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWNvcmRzID0gcHJvamVjdEFycmF5U3BsaWNlcyh0aGlzLmNvbGxlY3Rpb24sIGNoYW5nZVJlY29yZHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbFN1YnNjcmliZXJzKHJlY29yZHMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aE9ic2VydmVyKSB7XG4gICAgICB0aGlzLmxlbmd0aE9ic2VydmVyLmNhbGwodGhpcy5jb2xsZWN0aW9uW3RoaXMubGVuZ3RoUHJvcGVydHlOYW1lXSk7XG4gICAgfVxuICB9XG59KSB8fCBfY2xhc3MyKTtcblxuZXhwb3J0IGxldCBDb2xsZWN0aW9uTGVuZ3RoT2JzZXJ2ZXIgPSAoX2RlYzQgPSBzdWJzY3JpYmVyQ29sbGVjdGlvbigpLCBfZGVjNChfY2xhc3MzID0gY2xhc3MgQ29sbGVjdGlvbkxlbmd0aE9ic2VydmVyIHtcbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbikge1xuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5sZW5ndGhQcm9wZXJ0eU5hbWUgPSBjb2xsZWN0aW9uIGluc3RhbmNlb2YgTWFwIHx8IGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBTZXQgPyAnc2l6ZScgOiAnbGVuZ3RoJztcbiAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IGNvbGxlY3Rpb25bdGhpcy5sZW5ndGhQcm9wZXJ0eU5hbWVdO1xuICB9XG5cbiAgZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvblt0aGlzLmxlbmd0aFByb3BlcnR5TmFtZV07XG4gIH1cblxuICBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIHRoaXMuY29sbGVjdGlvblt0aGlzLmxlbmd0aFByb3BlcnR5TmFtZV0gPSBuZXdWYWx1ZTtcbiAgfVxuXG4gIHN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIHRoaXMuYWRkU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gIH1cblxuICB1bnN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIHRoaXMucmVtb3ZlU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gIH1cblxuICBjYWxsKG5ld1ZhbHVlKSB7XG4gICAgbGV0IG9sZFZhbHVlID0gdGhpcy5jdXJyZW50VmFsdWU7XG4gICAgdGhpcy5jYWxsU3Vic2NyaWJlcnMobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IG5ld1ZhbHVlO1xuICB9XG59KSB8fCBfY2xhc3MzKTtcblxuY29uc3QgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmNvbnN0IHBvcCA9IGFycmF5UHJvdG8ucG9wO1xuY29uc3QgcHVzaCA9IGFycmF5UHJvdG8ucHVzaDtcbmNvbnN0IHJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5jb25zdCBzaGlmdCA9IGFycmF5UHJvdG8uc2hpZnQ7XG5jb25zdCBzb3J0ID0gYXJyYXlQcm90by5zb3J0O1xuY29uc3Qgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5jb25zdCB1bnNoaWZ0ID0gYXJyYXlQcm90by51bnNoaWZ0O1xuXG5pZiAoYXJyYXlQcm90by5fX2F1X3BhdGNoZWRfXykge1xuICBMb2dNYW5hZ2VyLmdldExvZ2dlcignYXJyYXktb2JzZXJ2YXRpb24nKS53YXJuKCdEZXRlY3RlZCAybmQgYXR0ZW1wdCBvZiBwYXRjaGluZyBhcnJheSBmcm9tIEF1cmVsaWEgYmluZGluZy4nICsgJyBUaGlzIGlzIHByb2JhYmx5IGNhdXNlZCBieSBkZXBlbmRlbmN5IG1pc21hdGNoIGJldHdlZW4gY29yZSBtb2R1bGVzIGFuZCBhIDNyZCBwYXJ0eSBwbHVnaW4uJyArICcgUGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXVyZWxpYS9jbGkvcHVsbC85MDYgaWYgeW91IGFyZSB1c2luZyB3ZWJwYWNrLicpO1xufSBlbHNlIHtcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheVByb3RvLCAnX19hdV9wYXRjaGVkX18nLCB7IHZhbHVlOiAxIH0pO1xuICBhcnJheVByb3RvLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbm90RW1wdHkgPSB0aGlzLmxlbmd0aCA+IDA7XG4gICAgbGV0IG1ldGhvZENhbGxSZXN1bHQgPSBwb3AuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAobm90RW1wdHkgJiYgdGhpcy5fX2FycmF5X29ic2VydmVyX18gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fX2FycmF5X29ic2VydmVyX18uYWRkQ2hhbmdlUmVjb3JkKHtcbiAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgbmFtZTogdGhpcy5sZW5ndGgsXG4gICAgICAgIG9sZFZhbHVlOiBtZXRob2RDYWxsUmVzdWx0XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gIH07XG5cbiAgYXJyYXlQcm90by5wdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBtZXRob2RDYWxsUmVzdWx0ID0gcHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXy5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICB0eXBlOiAnc3BsaWNlJyxcbiAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICBpbmRleDogdGhpcy5sZW5ndGggLSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICByZW1vdmVkOiBbXSxcbiAgICAgICAgYWRkZWRDb3VudDogYXJndW1lbnRzLmxlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICB9O1xuXG4gIGFycmF5UHJvdG8ucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgb2xkQXJyYXk7XG4gICAgaWYgKHRoaXMuX19hcnJheV9vYnNlcnZlcl9fICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX19hcnJheV9vYnNlcnZlcl9fLmZsdXNoQ2hhbmdlUmVjb3JkcygpO1xuICAgICAgb2xkQXJyYXkgPSB0aGlzLnNsaWNlKCk7XG4gICAgfVxuICAgIGxldCBtZXRob2RDYWxsUmVzdWx0ID0gcmV2ZXJzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXy5yZXNldChvbGRBcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICB9O1xuXG4gIGFycmF5UHJvdG8uc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IG5vdEVtcHR5ID0gdGhpcy5sZW5ndGggPiAwO1xuICAgIGxldCBtZXRob2RDYWxsUmVzdWx0ID0gc2hpZnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAobm90RW1wdHkgJiYgdGhpcy5fX2FycmF5X29ic2VydmVyX18gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fX2FycmF5X29ic2VydmVyX18uYWRkQ2hhbmdlUmVjb3JkKHtcbiAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgbmFtZTogMCxcbiAgICAgICAgb2xkVmFsdWU6IG1ldGhvZENhbGxSZXN1bHRcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgfTtcblxuICBhcnJheVByb3RvLnNvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IG9sZEFycmF5O1xuICAgIGlmICh0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXy5mbHVzaENoYW5nZVJlY29yZHMoKTtcbiAgICAgIG9sZEFycmF5ID0gdGhpcy5zbGljZSgpO1xuICAgIH1cbiAgICBsZXQgbWV0aG9kQ2FsbFJlc3VsdCA9IHNvcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodGhpcy5fX2FycmF5X29ic2VydmVyX18gIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fX2FycmF5X29ic2VydmVyX18ucmVzZXQob2xkQXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgfTtcblxuICBhcnJheVByb3RvLnNwbGljZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbWV0aG9kQ2FsbFJlc3VsdCA9IHNwbGljZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9fYXJyYXlfb2JzZXJ2ZXJfXy5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICB0eXBlOiAnc3BsaWNlJyxcbiAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICBpbmRleDogK2FyZ3VtZW50c1swXSxcbiAgICAgICAgcmVtb3ZlZDogbWV0aG9kQ2FsbFJlc3VsdCxcbiAgICAgICAgYWRkZWRDb3VudDogYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHMubGVuZ3RoIC0gMiA6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgfTtcblxuICBhcnJheVByb3RvLnVuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IG1ldGhvZENhbGxSZXN1bHQgPSB1bnNoaWZ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHRoaXMuX19hcnJheV9vYnNlcnZlcl9fICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX19hcnJheV9vYnNlcnZlcl9fLmFkZENoYW5nZVJlY29yZCh7XG4gICAgICAgIHR5cGU6ICdzcGxpY2UnLFxuICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgIGluZGV4OiAwLFxuICAgICAgICByZW1vdmVkOiBbXSxcbiAgICAgICAgYWRkZWRDb3VudDogYXJndW1lbnRzLmxlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJyYXlPYnNlcnZlcih0YXNrUXVldWUsIGFycmF5KSB7XG4gIHJldHVybiBNb2RpZnlBcnJheU9ic2VydmVyLmZvcih0YXNrUXVldWUsIGFycmF5KTtcbn1cblxubGV0IE1vZGlmeUFycmF5T2JzZXJ2ZXIgPSBjbGFzcyBNb2RpZnlBcnJheU9ic2VydmVyIGV4dGVuZHMgTW9kaWZ5Q29sbGVjdGlvbk9ic2VydmVyIHtcbiAgY29uc3RydWN0b3IodGFza1F1ZXVlLCBhcnJheSkge1xuICAgIHN1cGVyKHRhc2tRdWV1ZSwgYXJyYXkpO1xuICB9XG5cbiAgc3RhdGljIGZvcih0YXNrUXVldWUsIGFycmF5KSB7XG4gICAgaWYgKCEoJ19fYXJyYXlfb2JzZXJ2ZXJfXycgaW4gYXJyYXkpKSB7XG4gICAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGFycmF5LCAnX19hcnJheV9vYnNlcnZlcl9fJywge1xuICAgICAgICB2YWx1ZTogTW9kaWZ5QXJyYXlPYnNlcnZlci5jcmVhdGUodGFza1F1ZXVlLCBhcnJheSksXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5Ll9fYXJyYXlfb2JzZXJ2ZXJfXztcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUodGFza1F1ZXVlLCBhcnJheSkge1xuICAgIHJldHVybiBuZXcgTW9kaWZ5QXJyYXlPYnNlcnZlcih0YXNrUXVldWUsIGFycmF5KTtcbiAgfVxufTtcblxuXG5leHBvcnQgbGV0IEV4cHJlc3Npb24gPSBjbGFzcyBFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pc0Fzc2lnbmFibGUgPSBmYWxzZTtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMsIGFyZ3MpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEJpbmRpbmcgZXhwcmVzc2lvbiBcIiR7dGhpc31cIiBjYW5ub3QgYmUgZXZhbHVhdGVkLmApO1xuICB9XG5cbiAgYXNzaWduKHNjb3BlLCB2YWx1ZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBCaW5kaW5nIGV4cHJlc3Npb24gXCIke3RoaXN9XCIgY2Fubm90IGJlIGFzc2lnbmVkIHRvLmApO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBGRUFUVVJFX05PX1VOUEFSU0VSID09PSAndW5kZWZpbmVkJyA/IFVucGFyc2VyLnVucGFyc2UodGhpcykgOiBzdXBlci50b1N0cmluZygpO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IEJpbmRpbmdCZWhhdmlvciA9IGNsYXNzIEJpbmRpbmdCZWhhdmlvciBleHRlbmRzIEV4cHJlc3Npb24ge1xuICBjb25zdHJ1Y3RvcihleHByZXNzaW9uLCBuYW1lLCBhcmdzKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICB9XG5cbiAgZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmV4cHJlc3Npb24uZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gIH1cblxuICBhc3NpZ24oc2NvcGUsIHZhbHVlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5leHByZXNzaW9uLmFzc2lnbihzY29wZSwgdmFsdWUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gIH1cblxuICBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0QmluZGluZ0JlaGF2aW9yKHRoaXMpO1xuICB9XG5cbiAgY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIHRoaXMuZXhwcmVzc2lvbi5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgfVxuXG4gIGJpbmQoYmluZGluZywgc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIGlmICh0aGlzLmV4cHJlc3Npb24uZXhwcmVzc2lvbiAmJiB0aGlzLmV4cHJlc3Npb24uYmluZCkge1xuICAgICAgdGhpcy5leHByZXNzaW9uLmJpbmQoYmluZGluZywgc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgfVxuICAgIGxldCBiZWhhdmlvciA9IGxvb2t1cEZ1bmN0aW9ucy5iaW5kaW5nQmVoYXZpb3JzKHRoaXMubmFtZSk7XG4gICAgaWYgKCFiZWhhdmlvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBCaW5kaW5nQmVoYXZpb3IgbmFtZWQgXCIke3RoaXMubmFtZX1cIiB3YXMgZm91bmQhYCk7XG4gICAgfVxuICAgIGxldCBiZWhhdmlvcktleSA9IGBiZWhhdmlvci0ke3RoaXMubmFtZX1gO1xuICAgIGlmIChiaW5kaW5nW2JlaGF2aW9yS2V5XSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBIGJpbmRpbmcgYmVoYXZpb3IgbmFtZWQgXCIke3RoaXMubmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gXCIke3RoaXMuZXhwcmVzc2lvbn1cImApO1xuICAgIH1cbiAgICBiaW5kaW5nW2JlaGF2aW9yS2V5XSA9IGJlaGF2aW9yO1xuICAgIGJlaGF2aW9yLmJpbmQuYXBwbHkoYmVoYXZpb3IsIFtiaW5kaW5nLCBzY29wZV0uY29uY2F0KGV2YWxMaXN0KHNjb3BlLCB0aGlzLmFyZ3MsIGJpbmRpbmcubG9va3VwRnVuY3Rpb25zKSkpO1xuICB9XG5cbiAgdW5iaW5kKGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgbGV0IGJlaGF2aW9yS2V5ID0gYGJlaGF2aW9yLSR7dGhpcy5uYW1lfWA7XG4gICAgYmluZGluZ1tiZWhhdmlvcktleV0udW5iaW5kKGJpbmRpbmcsIHNjb3BlKTtcbiAgICBiaW5kaW5nW2JlaGF2aW9yS2V5XSA9IG51bGw7XG4gICAgaWYgKHRoaXMuZXhwcmVzc2lvbi5leHByZXNzaW9uICYmIHRoaXMuZXhwcmVzc2lvbi51bmJpbmQpIHtcbiAgICAgIHRoaXMuZXhwcmVzc2lvbi51bmJpbmQoYmluZGluZywgc2NvcGUpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGxldCBWYWx1ZUNvbnZlcnRlciA9IGNsYXNzIFZhbHVlQ29udmVydGVyIGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKGV4cHJlc3Npb24sIG5hbWUsIGFyZ3MpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5hbGxBcmdzID0gW2V4cHJlc3Npb25dLmNvbmNhdChhcmdzKTtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICBsZXQgY29udmVydGVyID0gbG9va3VwRnVuY3Rpb25zLnZhbHVlQ29udmVydGVycyh0aGlzLm5hbWUpO1xuICAgIGlmICghY29udmVydGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIFZhbHVlQ29udmVydGVyIG5hbWVkIFwiJHt0aGlzLm5hbWV9XCIgd2FzIGZvdW5kIWApO1xuICAgIH1cblxuICAgIGlmICgndG9WaWV3JyBpbiBjb252ZXJ0ZXIpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0ZXIudG9WaWV3LmFwcGx5KGNvbnZlcnRlciwgZXZhbExpc3Qoc2NvcGUsIHRoaXMuYWxsQXJncywgbG9va3VwRnVuY3Rpb25zKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuYWxsQXJnc1swXS5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfVxuXG4gIGFzc2lnbihzY29wZSwgdmFsdWUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIGxldCBjb252ZXJ0ZXIgPSBsb29rdXBGdW5jdGlvbnMudmFsdWVDb252ZXJ0ZXJzKHRoaXMubmFtZSk7XG4gICAgaWYgKCFjb252ZXJ0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gVmFsdWVDb252ZXJ0ZXIgbmFtZWQgXCIke3RoaXMubmFtZX1cIiB3YXMgZm91bmQhYCk7XG4gICAgfVxuXG4gICAgaWYgKCdmcm9tVmlldycgaW4gY29udmVydGVyKSB7XG4gICAgICB2YWx1ZSA9IGNvbnZlcnRlci5mcm9tVmlldy5hcHBseShjb252ZXJ0ZXIsIFt2YWx1ZV0uY29uY2F0KGV2YWxMaXN0KHNjb3BlLCB0aGlzLmFyZ3MsIGxvb2t1cEZ1bmN0aW9ucykpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hbGxBcmdzWzBdLmFzc2lnbihzY29wZSwgdmFsdWUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gIH1cblxuICBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0VmFsdWVDb252ZXJ0ZXIodGhpcyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgbGV0IGV4cHJlc3Npb25zID0gdGhpcy5hbGxBcmdzO1xuICAgIGxldCBpID0gZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGV4cHJlc3Npb25zW2ldLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgIH1cbiAgICBsZXQgY29udmVydGVyID0gYmluZGluZy5sb29rdXBGdW5jdGlvbnMudmFsdWVDb252ZXJ0ZXJzKHRoaXMubmFtZSk7XG4gICAgaWYgKCFjb252ZXJ0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gVmFsdWVDb252ZXJ0ZXIgbmFtZWQgXCIke3RoaXMubmFtZX1cIiB3YXMgZm91bmQhYCk7XG4gICAgfVxuICAgIGxldCBzaWduYWxzID0gY29udmVydGVyLnNpZ25hbHM7XG4gICAgaWYgKHNpZ25hbHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpID0gc2lnbmFscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29ubmVjdEJpbmRpbmdUb1NpZ25hbChiaW5kaW5nLCBzaWduYWxzW2ldKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgQXNzaWduID0gY2xhc3MgQXNzaWduIGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKHRhcmdldCwgdmFsdWUpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuaXNBc3NpZ25hYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy50YXJnZXQuYXNzaWduKHNjb3BlLCB0aGlzLnZhbHVlLmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpKTtcbiAgfVxuXG4gIGFjY2VwdCh2aXN0b3IpIHtcbiAgICB2aXN0b3IudmlzaXRBc3NpZ24odGhpcyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7fVxuXG4gIGFzc2lnbihzY29wZSwgdmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlLmFzc2lnbihzY29wZSwgdmFsdWUpO1xuICAgIHRoaXMudGFyZ2V0LmFzc2lnbihzY29wZSwgdmFsdWUpO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IENvbmRpdGlvbmFsID0gY2xhc3MgQ29uZGl0aW9uYWwgZXh0ZW5kcyBFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY29uZGl0aW9uLCB5ZXMsIG5vKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgIHRoaXMueWVzID0geWVzO1xuICAgIHRoaXMubm8gPSBubztcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICByZXR1cm4gISF0aGlzLmNvbmRpdGlvbi5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSA/IHRoaXMueWVzLmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIDogdGhpcy5uby5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfVxuXG4gIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDb25kaXRpb25hbCh0aGlzKTtcbiAgfVxuXG4gIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICB0aGlzLmNvbmRpdGlvbi5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICBpZiAodGhpcy5jb25kaXRpb24uZXZhbHVhdGUoc2NvcGUpKSB7XG4gICAgICB0aGlzLnllcy5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5uby5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgQWNjZXNzVGhpcyA9IGNsYXNzIEFjY2Vzc1RoaXMgZXh0ZW5kcyBFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoYW5jZXN0b3IpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYW5jZXN0b3IgPSBhbmNlc3RvcjtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICBsZXQgb2MgPSBzY29wZS5vdmVycmlkZUNvbnRleHQ7XG4gICAgbGV0IGkgPSB0aGlzLmFuY2VzdG9yO1xuICAgIHdoaWxlIChpLS0gJiYgb2MpIHtcbiAgICAgIG9jID0gb2MucGFyZW50T3ZlcnJpZGVDb250ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gaSA8IDEgJiYgb2MgPyBvYy5iaW5kaW5nQ29udGV4dCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRBY2Nlc3NUaGlzKHRoaXMpO1xuICB9XG5cbiAgY29ubmVjdChiaW5kaW5nLCBzY29wZSkge31cbn07XG5cbmV4cG9ydCBsZXQgQWNjZXNzU2NvcGUgPSBjbGFzcyBBY2Nlc3NTY29wZSBleHRlbmRzIEV4cHJlc3Npb24ge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBhbmNlc3Rvcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuYW5jZXN0b3IgPSBhbmNlc3RvcjtcbiAgICB0aGlzLmlzQXNzaWduYWJsZSA9IHRydWU7XG4gIH1cblxuICBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgbGV0IGNvbnRleHQgPSBnZXRDb250ZXh0Rm9yKHRoaXMubmFtZSwgc2NvcGUsIHRoaXMuYW5jZXN0b3IpO1xuICAgIHJldHVybiBjb250ZXh0W3RoaXMubmFtZV07XG4gIH1cblxuICBhc3NpZ24oc2NvcGUsIHZhbHVlKSB7XG4gICAgbGV0IGNvbnRleHQgPSBnZXRDb250ZXh0Rm9yKHRoaXMubmFtZSwgc2NvcGUsIHRoaXMuYW5jZXN0b3IpO1xuICAgIHJldHVybiBjb250ZXh0ID8gY29udGV4dFt0aGlzLm5hbWVdID0gdmFsdWUgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0QWNjZXNzU2NvcGUodGhpcyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgbGV0IGNvbnRleHQgPSBnZXRDb250ZXh0Rm9yKHRoaXMubmFtZSwgc2NvcGUsIHRoaXMuYW5jZXN0b3IpO1xuICAgIGJpbmRpbmcub2JzZXJ2ZVByb3BlcnR5KGNvbnRleHQsIHRoaXMubmFtZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgQWNjZXNzTWVtYmVyID0gY2xhc3MgQWNjZXNzTWVtYmVyIGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKG9iamVjdCwgbmFtZSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaXNBc3NpZ25hYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLm9iamVjdC5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICByZXR1cm4gaW5zdGFuY2UgPT09IG51bGwgfHwgaW5zdGFuY2UgPT09IHVuZGVmaW5lZCA/IGluc3RhbmNlIDogaW5zdGFuY2VbdGhpcy5uYW1lXTtcbiAgfVxuXG4gIGFzc2lnbihzY29wZSwgdmFsdWUpIHtcbiAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLm9iamVjdC5ldmFsdWF0ZShzY29wZSk7XG5cbiAgICBpZiAoaW5zdGFuY2UgPT09IG51bGwgfHwgaW5zdGFuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5zdGFuY2UgPSB7fTtcbiAgICAgIHRoaXMub2JqZWN0LmFzc2lnbihzY29wZSwgaW5zdGFuY2UpO1xuICAgIH1cblxuICAgIGluc3RhbmNlW3RoaXMubmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0QWNjZXNzTWVtYmVyKHRoaXMpO1xuICB9XG5cbiAgY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIHRoaXMub2JqZWN0LmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgIGxldCBvYmogPSB0aGlzLm9iamVjdC5ldmFsdWF0ZShzY29wZSk7XG4gICAgaWYgKG9iaikge1xuICAgICAgYmluZGluZy5vYnNlcnZlUHJvcGVydHkob2JqLCB0aGlzLm5hbWUpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGxldCBBY2Nlc3NLZXllZCA9IGNsYXNzIEFjY2Vzc0tleWVkIGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKG9iamVjdCwga2V5KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuaXNBc3NpZ25hYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLm9iamVjdC5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICBsZXQgbG9va3VwID0gdGhpcy5rZXkuZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgcmV0dXJuIGdldEtleWVkKGluc3RhbmNlLCBsb29rdXApO1xuICB9XG5cbiAgYXNzaWduKHNjb3BlLCB2YWx1ZSkge1xuICAgIGxldCBpbnN0YW5jZSA9IHRoaXMub2JqZWN0LmV2YWx1YXRlKHNjb3BlKTtcbiAgICBsZXQgbG9va3VwID0gdGhpcy5rZXkuZXZhbHVhdGUoc2NvcGUpO1xuICAgIHJldHVybiBzZXRLZXllZChpbnN0YW5jZSwgbG9va3VwLCB2YWx1ZSk7XG4gIH1cblxuICBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0QWNjZXNzS2V5ZWQodGhpcyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgdGhpcy5vYmplY3QuY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG4gICAgbGV0IG9iaiA9IHRoaXMub2JqZWN0LmV2YWx1YXRlKHNjb3BlKTtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICB0aGlzLmtleS5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICAgIGxldCBrZXkgPSB0aGlzLmtleS5ldmFsdWF0ZShzY29wZSk7XG5cbiAgICAgIGlmIChrZXkgIT09IG51bGwgJiYga2V5ICE9PSB1bmRlZmluZWQgJiYgIShBcnJheS5pc0FycmF5KG9iaikgJiYgdHlwZW9mIGtleSA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgIGJpbmRpbmcub2JzZXJ2ZVByb3BlcnR5KG9iaiwga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgQ2FsbFNjb3BlID0gY2xhc3MgQ2FsbFNjb3BlIGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGFyZ3MsIGFuY2VzdG9yKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmFuY2VzdG9yID0gYW5jZXN0b3I7XG4gIH1cblxuICBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zLCBtdXN0RXZhbHVhdGUpIHtcbiAgICBsZXQgYXJncyA9IGV2YWxMaXN0KHNjb3BlLCB0aGlzLmFyZ3MsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgbGV0IGNvbnRleHQgPSBnZXRDb250ZXh0Rm9yKHRoaXMubmFtZSwgc2NvcGUsIHRoaXMuYW5jZXN0b3IpO1xuICAgIGxldCBmdW5jID0gZ2V0RnVuY3Rpb24oY29udGV4dCwgdGhpcy5uYW1lLCBtdXN0RXZhbHVhdGUpO1xuICAgIGlmIChmdW5jKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDYWxsU2NvcGUodGhpcyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgbGV0IGFyZ3MgPSB0aGlzLmFyZ3M7XG4gICAgbGV0IGkgPSBhcmdzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBhcmdzW2ldLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGxldCBDYWxsTWVtYmVyID0gY2xhc3MgQ2FsbE1lbWJlciBleHRlbmRzIEV4cHJlc3Npb24ge1xuICBjb25zdHJ1Y3RvcihvYmplY3QsIG5hbWUsIGFyZ3MpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICB9XG5cbiAgZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucywgbXVzdEV2YWx1YXRlKSB7XG4gICAgbGV0IGluc3RhbmNlID0gdGhpcy5vYmplY3QuZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgbGV0IGFyZ3MgPSBldmFsTGlzdChzY29wZSwgdGhpcy5hcmdzLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgIGxldCBmdW5jID0gZ2V0RnVuY3Rpb24oaW5zdGFuY2UsIHRoaXMubmFtZSwgbXVzdEV2YWx1YXRlKTtcbiAgICBpZiAoZnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaW5zdGFuY2UsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgYWNjZXB0KHZpc2l0b3IpIHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdENhbGxNZW1iZXIodGhpcyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgdGhpcy5vYmplY3QuY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG4gICAgbGV0IG9iaiA9IHRoaXMub2JqZWN0LmV2YWx1YXRlKHNjb3BlKTtcbiAgICBpZiAoZ2V0RnVuY3Rpb24ob2JqLCB0aGlzLm5hbWUsIGZhbHNlKSkge1xuICAgICAgbGV0IGFyZ3MgPSB0aGlzLmFyZ3M7XG4gICAgICBsZXQgaSA9IGFyZ3MubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBhcmdzW2ldLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGxldCBDYWxsRnVuY3Rpb24gPSBjbGFzcyBDYWxsRnVuY3Rpb24gZXh0ZW5kcyBFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoZnVuYywgYXJncykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmZ1bmMgPSBmdW5jO1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gIH1cblxuICBldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zLCBtdXN0RXZhbHVhdGUpIHtcbiAgICBsZXQgZnVuYyA9IHRoaXMuZnVuYy5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGV2YWxMaXN0KHNjb3BlLCB0aGlzLmFyZ3MsIGxvb2t1cEZ1bmN0aW9ucykpO1xuICAgIH1cbiAgICBpZiAoIW11c3RFdmFsdWF0ZSAmJiAoZnVuYyA9PT0gbnVsbCB8fCBmdW5jID09PSB1bmRlZmluZWQpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGhpcy5mdW5jfSBpcyBub3QgYSBmdW5jdGlvbmApO1xuICB9XG5cbiAgYWNjZXB0KHZpc2l0b3IpIHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdENhbGxGdW5jdGlvbih0aGlzKTtcbiAgfVxuXG4gIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICB0aGlzLmZ1bmMuY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG4gICAgbGV0IGZ1bmMgPSB0aGlzLmZ1bmMuZXZhbHVhdGUoc2NvcGUpO1xuICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbGV0IGFyZ3MgPSB0aGlzLmFyZ3M7XG4gICAgICBsZXQgaSA9IGFyZ3MubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBhcmdzW2ldLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGxldCBCaW5hcnkgPSBjbGFzcyBCaW5hcnkgZXh0ZW5kcyBFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3Iob3BlcmF0aW9uLCBsZWZ0LCByaWdodCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICBsZXQgbGVmdCA9IHRoaXMubGVmdC5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcblxuICAgIHN3aXRjaCAodGhpcy5vcGVyYXRpb24pIHtcbiAgICAgIGNhc2UgJyYmJzpcbiAgICAgICAgcmV0dXJuIGxlZnQgJiYgdGhpcy5yaWdodC5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICAgIGNhc2UgJ3x8JzpcbiAgICAgICAgcmV0dXJuIGxlZnQgfHwgdGhpcy5yaWdodC5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICB9XG5cbiAgICBsZXQgcmlnaHQgPSB0aGlzLnJpZ2h0LmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuXG4gICAgc3dpdGNoICh0aGlzLm9wZXJhdGlvbikge1xuICAgICAgY2FzZSAnPT0nOlxuICAgICAgICByZXR1cm4gbGVmdCA9PSByaWdodDtcbiAgICAgIGNhc2UgJz09PSc6XG4gICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodDtcbiAgICAgIGNhc2UgJyE9JzpcbiAgICAgICAgcmV0dXJuIGxlZnQgIT0gcmlnaHQ7XG4gICAgICBjYXNlICchPT0nOlxuICAgICAgICByZXR1cm4gbGVmdCAhPT0gcmlnaHQ7XG4gICAgICBjYXNlICdpbnN0YW5jZW9mJzpcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByaWdodCA9PT0gJ2Z1bmN0aW9uJyAmJiBsZWZ0IGluc3RhbmNlb2YgcmlnaHQ7XG4gICAgICBjYXNlICdpbic6XG4gICAgICAgIHJldHVybiB0eXBlb2YgcmlnaHQgPT09ICdvYmplY3QnICYmIHJpZ2h0ICE9PSBudWxsICYmIGxlZnQgaW4gcmlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKGxlZnQgPT09IG51bGwgfHwgcmlnaHQgPT09IG51bGwgfHwgbGVmdCA9PT0gdW5kZWZpbmVkIHx8IHJpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5vcGVyYXRpb24pIHtcbiAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgaWYgKGxlZnQgIT09IG51bGwgJiYgbGVmdCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gbGVmdDtcbiAgICAgICAgICBpZiAocmlnaHQgIT09IG51bGwgJiYgcmlnaHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHJpZ2h0O1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICBpZiAobGVmdCAhPT0gbnVsbCAmJiBsZWZ0ICE9PSB1bmRlZmluZWQpIHJldHVybiBsZWZ0O1xuICAgICAgICAgIGlmIChyaWdodCAhPT0gbnVsbCAmJiByaWdodCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gMCAtIHJpZ2h0O1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMub3BlcmF0aW9uKSB7XG4gICAgICBjYXNlICcrJzpcbiAgICAgICAgcmV0dXJuIGF1dG9Db252ZXJ0QWRkKGxlZnQsIHJpZ2h0KTtcbiAgICAgIGNhc2UgJy0nOlxuICAgICAgICByZXR1cm4gbGVmdCAtIHJpZ2h0O1xuICAgICAgY2FzZSAnKic6XG4gICAgICAgIHJldHVybiBsZWZ0ICogcmlnaHQ7XG4gICAgICBjYXNlICcvJzpcbiAgICAgICAgcmV0dXJuIGxlZnQgLyByaWdodDtcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgICByZXR1cm4gbGVmdCAlIHJpZ2h0O1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIHJldHVybiBsZWZ0IDwgcmlnaHQ7XG4gICAgICBjYXNlICc+JzpcbiAgICAgICAgcmV0dXJuIGxlZnQgPiByaWdodDtcbiAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgcmV0dXJuIGxlZnQgPD0gcmlnaHQ7XG4gICAgICBjYXNlICc+PSc6XG4gICAgICAgIHJldHVybiBsZWZ0ID49IHJpZ2h0O1xuICAgICAgY2FzZSAnXic6XG4gICAgICAgIHJldHVybiBsZWZ0IF4gcmlnaHQ7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnRlcm5hbCBlcnJvciBbJHt0aGlzLm9wZXJhdGlvbn1dIG5vdCBoYW5kbGVkYCk7XG4gIH1cblxuICBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0QmluYXJ5KHRoaXMpO1xuICB9XG5cbiAgY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIHRoaXMubGVmdC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICBsZXQgbGVmdCA9IHRoaXMubGVmdC5ldmFsdWF0ZShzY29wZSk7XG4gICAgaWYgKHRoaXMub3BlcmF0aW9uID09PSAnJiYnICYmICFsZWZ0IHx8IHRoaXMub3BlcmF0aW9uID09PSAnfHwnICYmIGxlZnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yaWdodC5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBVbmFyeSA9IGNsYXNzIFVuYXJ5IGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKG9wZXJhdGlvbiwgZXhwcmVzc2lvbikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICB9XG5cbiAgZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHN3aXRjaCAodGhpcy5vcGVyYXRpb24pIHtcbiAgICAgIGNhc2UgJyEnOlxuICAgICAgICByZXR1cm4gIXRoaXMuZXhwcmVzc2lvbi5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICAgIGNhc2UgJ3R5cGVvZic6XG4gICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5leHByZXNzaW9uLmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgICAgY2FzZSAndm9pZCc6XG4gICAgICAgIHJldHVybiB2b2lkIHRoaXMuZXhwcmVzc2lvbi5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludGVybmFsIGVycm9yIFske3RoaXMub3BlcmF0aW9ufV0gbm90IGhhbmRsZWRgKTtcbiAgfVxuXG4gIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRQcmVmaXgodGhpcyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgdGhpcy5leHByZXNzaW9uLmNvbm5lY3QoYmluZGluZywgc2NvcGUpO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IExpdGVyYWxQcmltaXRpdmUgPSBjbGFzcyBMaXRlcmFsUHJpbWl0aXZlIGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRMaXRlcmFsUHJpbWl0aXZlKHRoaXMpO1xuICB9XG5cbiAgY29ubmVjdChiaW5kaW5nLCBzY29wZSkge31cbn07XG5cbmV4cG9ydCBsZXQgTGl0ZXJhbFN0cmluZyA9IGNsYXNzIExpdGVyYWxTdHJpbmcgZXh0ZW5kcyBFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG5cbiAgYWNjZXB0KHZpc2l0b3IpIHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdExpdGVyYWxTdHJpbmcodGhpcyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7fVxufTtcblxuZXhwb3J0IGxldCBMaXRlcmFsVGVtcGxhdGUgPSBjbGFzcyBMaXRlcmFsVGVtcGxhdGUgZXh0ZW5kcyBFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoY29va2VkLCBleHByZXNzaW9ucywgcmF3LCB0YWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29va2VkID0gY29va2VkO1xuICAgIHRoaXMuZXhwcmVzc2lvbnMgPSBleHByZXNzaW9ucyB8fCBbXTtcbiAgICB0aGlzLmxlbmd0aCA9IHRoaXMuZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgIHRoaXMudGFnZ2VkID0gdGFnICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKHRoaXMudGFnZ2VkKSB7XG4gICAgICB0aGlzLmNvb2tlZC5yYXcgPSByYXc7XG4gICAgICB0aGlzLnRhZyA9IHRhZztcbiAgICAgIGlmICh0YWcgaW5zdGFuY2VvZiBBY2Nlc3NTY29wZSkge1xuICAgICAgICB0aGlzLmNvbnRleHRUeXBlID0gJ1Njb3BlJztcbiAgICAgIH0gZWxzZSBpZiAodGFnIGluc3RhbmNlb2YgQWNjZXNzTWVtYmVyIHx8IHRhZyBpbnN0YW5jZW9mIEFjY2Vzc0tleWVkKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFR5cGUgPSAnT2JqZWN0JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0aGlzLnRhZ30gaXMgbm90IGEgdmFsaWQgdGVtcGxhdGUgdGFnYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U2NvcGVDb250ZXh0KHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0Q29udGV4dEZvcih0aGlzLnRhZy5uYW1lLCBzY29wZSwgdGhpcy50YWcuYW5jZXN0b3IpO1xuICB9XG5cbiAgZ2V0T2JqZWN0Q29udGV4dChzY29wZSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMudGFnLm9iamVjdC5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMsIG11c3RFdmFsdWF0ZSkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0c1tpXSA9IHRoaXMuZXhwcmVzc2lvbnNbaV0uZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnRhZ2dlZCkge1xuICAgICAgY29uc3QgZnVuYyA9IHRoaXMudGFnLmV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgICAgaWYgKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzW2BnZXQke3RoaXMuY29udGV4dFR5cGV9Q29udGV4dGBdKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpO1xuICAgICAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIHRoaXMuY29va2VkLCAuLi5yZXN1bHRzKTtcbiAgICAgIH1cbiAgICAgIGlmICghbXVzdEV2YWx1YXRlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXMudGFnfSBpcyBub3QgYSBmdW5jdGlvbmApO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5jb29rZWRbMF07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQgPSBTdHJpbmcucHJvdG90eXBlLmNvbmNhdChyZXN1bHQsIHJlc3VsdHNbaV0sIHRoaXMuY29va2VkW2kgKyAxXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0TGl0ZXJhbFRlbXBsYXRlKHRoaXMpO1xuICB9XG5cbiAgY29ubmVjdChiaW5kaW5nLCBzY29wZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5leHByZXNzaW9uc1tpXS5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudGFnZ2VkKSB7XG4gICAgICB0aGlzLnRhZy5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgTGl0ZXJhbEFycmF5ID0gY2xhc3MgTGl0ZXJhbEFycmF5IGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRzKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICBsZXQgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzO1xuICAgIGxldCByZXN1bHQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgcmVzdWx0W2ldID0gZWxlbWVudHNbaV0uZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGFjY2VwdCh2aXNpdG9yKSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRMaXRlcmFsQXJyYXkodGhpcyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgbGV0IGxlbmd0aCA9IHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuZWxlbWVudHNbaV0uY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgbGV0IExpdGVyYWxPYmplY3QgPSBjbGFzcyBMaXRlcmFsT2JqZWN0IGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKGtleXMsIHZhbHVlcykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmtleXMgPSBrZXlzO1xuICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICB9XG5cbiAgZXZhbHVhdGUoc2NvcGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIGxldCBpbnN0YW5jZSA9IHt9O1xuICAgIGxldCBrZXlzID0gdGhpcy5rZXlzO1xuICAgIGxldCB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICBpbnN0YW5jZVtrZXlzW2ldXSA9IHZhbHVlc1tpXS5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cblxuICBhY2NlcHQodmlzaXRvcikge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0TGl0ZXJhbE9iamVjdCh0aGlzKTtcbiAgfVxuXG4gIGNvbm5lY3QoYmluZGluZywgc2NvcGUpIHtcbiAgICBsZXQgbGVuZ3RoID0gdGhpcy5rZXlzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnZhbHVlc1tpXS5jb25uZWN0KGJpbmRpbmcsIHNjb3BlKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGV2YWxMaXN0KHNjb3BlLCBsaXN0LCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgY29uc3QgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gbGlzdFtpXS5ldmFsdWF0ZShzY29wZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBhdXRvQ29udmVydEFkZChhLCBiKSB7XG4gIGlmIChhICE9PSBudWxsICYmIGIgIT09IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBiICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGEgKyBiLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgYiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBhLnRvU3RyaW5nKCkgKyBiO1xuICAgIH1cblxuICAgIHJldHVybiBhICsgYjtcbiAgfVxuXG4gIGlmIChhICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBpZiAoYiAhPT0gbnVsbCkge1xuICAgIHJldHVybiBiO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbmZ1bmN0aW9uIGdldEZ1bmN0aW9uKG9iaiwgbmFtZSwgbXVzdEV4aXN0KSB7XG4gIGxldCBmdW5jID0gb2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG9ialtuYW1lXTtcbiAgaWYgKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbiAgaWYgKCFtdXN0RXhpc3QgJiYgKGZ1bmMgPT09IG51bGwgfHwgZnVuYyA9PT0gdW5kZWZpbmVkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgJHtuYW1lfSBpcyBub3QgYSBmdW5jdGlvbmApO1xufVxuXG5mdW5jdGlvbiBnZXRLZXllZChvYmosIGtleSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9ialtwYXJzZUludChrZXksIDEwKV07XG4gIH0gZWxzZSBpZiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9IGVsc2UgaWYgKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gb2JqW2tleV07XG59XG5cbmZ1bmN0aW9uIHNldEtleWVkKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgbGV0IGluZGV4ID0gcGFyc2VJbnQoa2V5LCAxMCk7XG5cbiAgICBpZiAob2JqLmxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgb2JqLmxlbmd0aCA9IGluZGV4ICsgMTtcbiAgICB9XG5cbiAgICBvYmpbaW5kZXhdID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGxldCBVbnBhcnNlciA9IG51bGw7XG5cbmlmICh0eXBlb2YgRkVBVFVSRV9OT19VTlBBUlNFUiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgVW5wYXJzZXIgPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoYnVmZmVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9XG5cbiAgICBzdGF0aWMgdW5wYXJzZShleHByZXNzaW9uKSB7XG4gICAgICBsZXQgYnVmZmVyID0gW107XG4gICAgICBsZXQgdmlzaXRvciA9IG5ldyBVbnBhcnNlcihidWZmZXIpO1xuXG4gICAgICBleHByZXNzaW9uLmFjY2VwdCh2aXNpdG9yKTtcblxuICAgICAgcmV0dXJuIGJ1ZmZlci5qb2luKCcnKTtcbiAgICB9XG5cbiAgICB3cml0ZSh0ZXh0KSB7XG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKHRleHQpO1xuICAgIH1cblxuICAgIHdyaXRlQXJncyhhcmdzKSB7XG4gICAgICB0aGlzLndyaXRlKCcoJyk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBhcmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgdGhpcy53cml0ZSgnLCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJnc1tpXS5hY2NlcHQodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMud3JpdGUoJyknKTtcbiAgICB9XG5cbiAgICB2aXNpdEJpbmRpbmdCZWhhdmlvcihiZWhhdmlvcikge1xuICAgICAgbGV0IGFyZ3MgPSBiZWhhdmlvci5hcmdzO1xuXG4gICAgICBiZWhhdmlvci5leHByZXNzaW9uLmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoYCYke2JlaGF2aW9yLm5hbWV9YCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBhcmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIHRoaXMud3JpdGUoJzonKTtcbiAgICAgICAgYXJnc1tpXS5hY2NlcHQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmlzaXRWYWx1ZUNvbnZlcnRlcihjb252ZXJ0ZXIpIHtcbiAgICAgIGxldCBhcmdzID0gY29udmVydGVyLmFyZ3M7XG5cbiAgICAgIGNvbnZlcnRlci5leHByZXNzaW9uLmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoYHwke2NvbnZlcnRlci5uYW1lfWApO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gYXJncy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICB0aGlzLndyaXRlKCc6Jyk7XG4gICAgICAgIGFyZ3NbaV0uYWNjZXB0KHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZpc2l0QXNzaWduKGFzc2lnbikge1xuICAgICAgYXNzaWduLnRhcmdldC5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCc9Jyk7XG4gICAgICBhc3NpZ24udmFsdWUuYWNjZXB0KHRoaXMpO1xuICAgIH1cblxuICAgIHZpc2l0Q29uZGl0aW9uYWwoY29uZGl0aW9uYWwpIHtcbiAgICAgIGNvbmRpdGlvbmFsLmNvbmRpdGlvbi5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCc/Jyk7XG4gICAgICBjb25kaXRpb25hbC55ZXMuYWNjZXB0KHRoaXMpO1xuICAgICAgdGhpcy53cml0ZSgnOicpO1xuICAgICAgY29uZGl0aW9uYWwubm8uYWNjZXB0KHRoaXMpO1xuICAgIH1cblxuICAgIHZpc2l0QWNjZXNzVGhpcyhhY2Nlc3MpIHtcbiAgICAgIGlmIChhY2Nlc3MuYW5jZXN0b3IgPT09IDApIHtcbiAgICAgICAgdGhpcy53cml0ZSgnJHRoaXMnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy53cml0ZSgnJHBhcmVudCcpO1xuICAgICAgbGV0IGkgPSBhY2Nlc3MuYW5jZXN0b3IgLSAxO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB0aGlzLndyaXRlKCcuJHBhcmVudCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZpc2l0QWNjZXNzU2NvcGUoYWNjZXNzKSB7XG4gICAgICBsZXQgaSA9IGFjY2Vzcy5hbmNlc3RvcjtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdGhpcy53cml0ZSgnJHBhcmVudC4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMud3JpdGUoYWNjZXNzLm5hbWUpO1xuICAgIH1cblxuICAgIHZpc2l0QWNjZXNzTWVtYmVyKGFjY2Vzcykge1xuICAgICAgYWNjZXNzLm9iamVjdC5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKGAuJHthY2Nlc3MubmFtZX1gKTtcbiAgICB9XG5cbiAgICB2aXNpdEFjY2Vzc0tleWVkKGFjY2Vzcykge1xuICAgICAgYWNjZXNzLm9iamVjdC5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKCdbJyk7XG4gICAgICBhY2Nlc3Mua2V5LmFjY2VwdCh0aGlzKTtcbiAgICAgIHRoaXMud3JpdGUoJ10nKTtcbiAgICB9XG5cbiAgICB2aXNpdENhbGxTY29wZShjYWxsKSB7XG4gICAgICBsZXQgaSA9IGNhbGwuYW5jZXN0b3I7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHRoaXMud3JpdGUoJyRwYXJlbnQuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLndyaXRlKGNhbGwubmFtZSk7XG4gICAgICB0aGlzLndyaXRlQXJncyhjYWxsLmFyZ3MpO1xuICAgIH1cblxuICAgIHZpc2l0Q2FsbEZ1bmN0aW9uKGNhbGwpIHtcbiAgICAgIGNhbGwuZnVuYy5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlQXJncyhjYWxsLmFyZ3MpO1xuICAgIH1cblxuICAgIHZpc2l0Q2FsbE1lbWJlcihjYWxsKSB7XG4gICAgICBjYWxsLm9iamVjdC5hY2NlcHQodGhpcyk7XG4gICAgICB0aGlzLndyaXRlKGAuJHtjYWxsLm5hbWV9YCk7XG4gICAgICB0aGlzLndyaXRlQXJncyhjYWxsLmFyZ3MpO1xuICAgIH1cblxuICAgIHZpc2l0UHJlZml4KHByZWZpeCkge1xuICAgICAgdGhpcy53cml0ZShgKCR7cHJlZml4Lm9wZXJhdGlvbn1gKTtcbiAgICAgIGlmIChwcmVmaXgub3BlcmF0aW9uLmNoYXJDb2RlQXQoMCkgPj0gOTcpIHtcbiAgICAgICAgdGhpcy53cml0ZSgnICcpO1xuICAgICAgfVxuICAgICAgcHJlZml4LmV4cHJlc3Npb24uYWNjZXB0KHRoaXMpO1xuICAgICAgdGhpcy53cml0ZSgnKScpO1xuICAgIH1cblxuICAgIHZpc2l0QmluYXJ5KGJpbmFyeSkge1xuICAgICAgYmluYXJ5LmxlZnQuYWNjZXB0KHRoaXMpO1xuICAgICAgaWYgKGJpbmFyeS5vcGVyYXRpb24uY2hhckNvZGVBdCgwKSA9PT0gMTA1KSB7XG4gICAgICAgIHRoaXMud3JpdGUoYCAke2JpbmFyeS5vcGVyYXRpb259IGApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53cml0ZShiaW5hcnkub3BlcmF0aW9uKTtcbiAgICAgIH1cbiAgICAgIGJpbmFyeS5yaWdodC5hY2NlcHQodGhpcyk7XG4gICAgfVxuXG4gICAgdmlzaXRMaXRlcmFsUHJpbWl0aXZlKGxpdGVyYWwpIHtcbiAgICAgIHRoaXMud3JpdGUoYCR7bGl0ZXJhbC52YWx1ZX1gKTtcbiAgICB9XG5cbiAgICB2aXNpdExpdGVyYWxBcnJheShsaXRlcmFsKSB7XG4gICAgICBsZXQgZWxlbWVudHMgPSBsaXRlcmFsLmVsZW1lbnRzO1xuXG4gICAgICB0aGlzLndyaXRlKCdbJyk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgIHRoaXMud3JpdGUoJywnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRzW2ldLmFjY2VwdCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy53cml0ZSgnXScpO1xuICAgIH1cblxuICAgIHZpc2l0TGl0ZXJhbE9iamVjdChsaXRlcmFsKSB7XG4gICAgICBsZXQga2V5cyA9IGxpdGVyYWwua2V5cztcbiAgICAgIGxldCB2YWx1ZXMgPSBsaXRlcmFsLnZhbHVlcztcblxuICAgICAgdGhpcy53cml0ZSgneycpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgIHRoaXMud3JpdGUoJywnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMud3JpdGUoYCcke2tleXNbaV19JzpgKTtcbiAgICAgICAgdmFsdWVzW2ldLmFjY2VwdCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy53cml0ZSgnfScpO1xuICAgIH1cblxuICAgIHZpc2l0TGl0ZXJhbFN0cmluZyhsaXRlcmFsKSB7XG4gICAgICBsZXQgZXNjYXBlZCA9IGxpdGVyYWwudmFsdWUucmVwbGFjZSgvJy9nLCBcIlxcJ1wiKTtcbiAgICAgIHRoaXMud3JpdGUoYCcke2VzY2FwZWR9J2ApO1xuICAgIH1cblxuICAgIHZpc2l0TGl0ZXJhbFRlbXBsYXRlKGxpdGVyYWwpIHtcbiAgICAgIGNvbnN0IHsgY29va2VkLCBleHByZXNzaW9ucyB9ID0gbGl0ZXJhbDtcbiAgICAgIGNvbnN0IGxlbmd0aCA9IGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgIHRoaXMud3JpdGUoJ2AnKTtcbiAgICAgIHRoaXMud3JpdGUoY29va2VkWzBdKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZXhwcmVzc2lvbnNbaV0uYWNjZXB0KHRoaXMpO1xuICAgICAgICB0aGlzLndyaXRlKGNvb2tlZFtpICsgMV0pO1xuICAgICAgfVxuICAgICAgdGhpcy53cml0ZSgnYCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGxldCBFeHByZXNzaW9uQ2xvbmVyID0gY2xhc3MgRXhwcmVzc2lvbkNsb25lciB7XG4gIGNsb25lRXhwcmVzc2lvbkFycmF5KGFycmF5KSB7XG4gICAgbGV0IGNsb25lZEFycmF5ID0gW107XG4gICAgbGV0IGkgPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2xvbmVkQXJyYXlbaV0gPSBhcnJheVtpXS5hY2NlcHQodGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZWRBcnJheTtcbiAgfVxuXG4gIHZpc2l0QmluZGluZ0JlaGF2aW9yKGJlaGF2aW9yKSB7XG4gICAgcmV0dXJuIG5ldyBCaW5kaW5nQmVoYXZpb3IoYmVoYXZpb3IuZXhwcmVzc2lvbi5hY2NlcHQodGhpcyksIGJlaGF2aW9yLm5hbWUsIHRoaXMuY2xvbmVFeHByZXNzaW9uQXJyYXkoYmVoYXZpb3IuYXJncykpO1xuICB9XG5cbiAgdmlzaXRWYWx1ZUNvbnZlcnRlcihjb252ZXJ0ZXIpIHtcbiAgICByZXR1cm4gbmV3IFZhbHVlQ29udmVydGVyKGNvbnZlcnRlci5leHByZXNzaW9uLmFjY2VwdCh0aGlzKSwgY29udmVydGVyLm5hbWUsIHRoaXMuY2xvbmVFeHByZXNzaW9uQXJyYXkoY29udmVydGVyLmFyZ3MpKTtcbiAgfVxuXG4gIHZpc2l0QXNzaWduKGFzc2lnbikge1xuICAgIHJldHVybiBuZXcgQXNzaWduKGFzc2lnbi50YXJnZXQuYWNjZXB0KHRoaXMpLCBhc3NpZ24udmFsdWUuYWNjZXB0KHRoaXMpKTtcbiAgfVxuXG4gIHZpc2l0Q29uZGl0aW9uYWwoY29uZGl0aW9uYWwpIHtcbiAgICByZXR1cm4gbmV3IENvbmRpdGlvbmFsKGNvbmRpdGlvbmFsLmNvbmRpdGlvbi5hY2NlcHQodGhpcyksIGNvbmRpdGlvbmFsLnllcy5hY2NlcHQodGhpcyksIGNvbmRpdGlvbmFsLm5vLmFjY2VwdCh0aGlzKSk7XG4gIH1cblxuICB2aXNpdEFjY2Vzc1RoaXMoYWNjZXNzKSB7XG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NUaGlzKGFjY2Vzcy5hbmNlc3Rvcik7XG4gIH1cblxuICB2aXNpdEFjY2Vzc1Njb3BlKGFjY2Vzcykge1xuICAgIHJldHVybiBuZXcgQWNjZXNzU2NvcGUoYWNjZXNzLm5hbWUsIGFjY2Vzcy5hbmNlc3Rvcik7XG4gIH1cblxuICB2aXNpdEFjY2Vzc01lbWJlcihhY2Nlc3MpIHtcbiAgICByZXR1cm4gbmV3IEFjY2Vzc01lbWJlcihhY2Nlc3Mub2JqZWN0LmFjY2VwdCh0aGlzKSwgYWNjZXNzLm5hbWUpO1xuICB9XG5cbiAgdmlzaXRBY2Nlc3NLZXllZChhY2Nlc3MpIHtcbiAgICByZXR1cm4gbmV3IEFjY2Vzc0tleWVkKGFjY2Vzcy5vYmplY3QuYWNjZXB0KHRoaXMpLCBhY2Nlc3Mua2V5LmFjY2VwdCh0aGlzKSk7XG4gIH1cblxuICB2aXNpdENhbGxTY29wZShjYWxsKSB7XG4gICAgcmV0dXJuIG5ldyBDYWxsU2NvcGUoY2FsbC5uYW1lLCB0aGlzLmNsb25lRXhwcmVzc2lvbkFycmF5KGNhbGwuYXJncyksIGNhbGwuYW5jZXN0b3IpO1xuICB9XG5cbiAgdmlzaXRDYWxsRnVuY3Rpb24oY2FsbCkge1xuICAgIHJldHVybiBuZXcgQ2FsbEZ1bmN0aW9uKGNhbGwuZnVuYy5hY2NlcHQodGhpcyksIHRoaXMuY2xvbmVFeHByZXNzaW9uQXJyYXkoY2FsbC5hcmdzKSk7XG4gIH1cblxuICB2aXNpdENhbGxNZW1iZXIoY2FsbCkge1xuICAgIHJldHVybiBuZXcgQ2FsbE1lbWJlcihjYWxsLm9iamVjdC5hY2NlcHQodGhpcyksIGNhbGwubmFtZSwgdGhpcy5jbG9uZUV4cHJlc3Npb25BcnJheShjYWxsLmFyZ3MpKTtcbiAgfVxuXG4gIHZpc2l0VW5hcnkodW5hcnkpIHtcbiAgICByZXR1cm4gbmV3IFVuYXJ5KHByZWZpeC5vcGVyYXRpb24sIHByZWZpeC5leHByZXNzaW9uLmFjY2VwdCh0aGlzKSk7XG4gIH1cblxuICB2aXNpdEJpbmFyeShiaW5hcnkpIHtcbiAgICByZXR1cm4gbmV3IEJpbmFyeShiaW5hcnkub3BlcmF0aW9uLCBiaW5hcnkubGVmdC5hY2NlcHQodGhpcyksIGJpbmFyeS5yaWdodC5hY2NlcHQodGhpcykpO1xuICB9XG5cbiAgdmlzaXRMaXRlcmFsUHJpbWl0aXZlKGxpdGVyYWwpIHtcbiAgICByZXR1cm4gbmV3IExpdGVyYWxQcmltaXRpdmUobGl0ZXJhbCk7XG4gIH1cblxuICB2aXNpdExpdGVyYWxBcnJheShsaXRlcmFsKSB7XG4gICAgcmV0dXJuIG5ldyBMaXRlcmFsQXJyYXkodGhpcy5jbG9uZUV4cHJlc3Npb25BcnJheShsaXRlcmFsLmVsZW1lbnRzKSk7XG4gIH1cblxuICB2aXNpdExpdGVyYWxPYmplY3QobGl0ZXJhbCkge1xuICAgIHJldHVybiBuZXcgTGl0ZXJhbE9iamVjdChsaXRlcmFsLmtleXMsIHRoaXMuY2xvbmVFeHByZXNzaW9uQXJyYXkobGl0ZXJhbC52YWx1ZXMpKTtcbiAgfVxuXG4gIHZpc2l0TGl0ZXJhbFN0cmluZyhsaXRlcmFsKSB7XG4gICAgcmV0dXJuIG5ldyBMaXRlcmFsU3RyaW5nKGxpdGVyYWwudmFsdWUpO1xuICB9XG5cbiAgdmlzaXRMaXRlcmFsVGVtcGxhdGUobGl0ZXJhbCkge1xuICAgIHJldHVybiBuZXcgTGl0ZXJhbFRlbXBsYXRlKGxpdGVyYWwuY29va2VkLCB0aGlzLmNsb25lRXhwcmVzc2lvbkFycmF5KGxpdGVyYWwuZXhwcmVzc2lvbnMpLCBsaXRlcmFsLnJhdywgbGl0ZXJhbC50YWcgJiYgbGl0ZXJhbC50YWcuYWNjZXB0KHRoaXMpKTtcbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lRXhwcmVzc2lvbihleHByZXNzaW9uKSB7XG4gIGxldCB2aXNpdG9yID0gbmV3IEV4cHJlc3Npb25DbG9uZXIoKTtcbiAgcmV0dXJuIGV4cHJlc3Npb24uYWNjZXB0KHZpc2l0b3IpO1xufVxuXG5leHBvcnQgY29uc3QgYmluZGluZ01vZGUgPSB7XG4gIG9uZVRpbWU6IDAsXG4gIHRvVmlldzogMSxcbiAgb25lV2F5OiAxLFxuICB0d29XYXk6IDIsXG4gIGZyb21WaWV3OiAzXG59O1xuXG5leHBvcnQgbGV0IFBhcnNlciA9IGNsYXNzIFBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgcGFyc2Uoc3JjKSB7XG4gICAgc3JjID0gc3JjIHx8ICcnO1xuXG4gICAgcmV0dXJuIHRoaXMuY2FjaGVbc3JjXSB8fCAodGhpcy5jYWNoZVtzcmNdID0gbmV3IFBhcnNlckltcGxlbWVudGF0aW9uKHNyYykucGFyc2VCaW5kaW5nQmVoYXZpb3IoKSk7XG4gIH1cbn07XG5cbmNvbnN0IGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbmV4cG9ydCBsZXQgUGFyc2VySW1wbGVtZW50YXRpb24gPSBjbGFzcyBQYXJzZXJJbXBsZW1lbnRhdGlvbiB7XG4gIGdldCByYXcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3JjLnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMuaWR4KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHNyYykge1xuICAgIHRoaXMuaWR4ID0gMDtcblxuICAgIHRoaXMuc3RhcnQgPSAwO1xuXG4gICAgdGhpcy5zcmMgPSBzcmM7XG4gICAgdGhpcy5sZW4gPSBzcmMubGVuZ3RoO1xuXG4gICAgdGhpcy50a24gPSBUJEVPRjtcblxuICAgIHRoaXMudmFsID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5jaCA9IHNyYy5jaGFyQ29kZUF0KDApO1xuICB9XG5cbiAgcGFyc2VCaW5kaW5nQmVoYXZpb3IoKSB7XG4gICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICBpZiAodGhpcy50a24gJiBUJEV4cHJlc3Npb25UZXJtaW5hbCkge1xuICAgICAgdGhpcy5lcnIoJ0ludmFsaWQgc3RhcnQgb2YgZXhwcmVzc2lvbicpO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5wYXJzZVZhbHVlQ29udmVydGVyKCk7XG4gICAgd2hpbGUgKHRoaXMub3B0KFQkQW1wZXJzYW5kKSkge1xuICAgICAgcmVzdWx0ID0gbmV3IEJpbmRpbmdCZWhhdmlvcihyZXN1bHQsIHRoaXMudmFsLCB0aGlzLnBhcnNlVmFyaWFkaWNBcmdzKCkpO1xuICAgIH1cbiAgICBpZiAodGhpcy50a24gIT09IFQkRU9GKSB7XG4gICAgICB0aGlzLmVycihgVW5jb25zdW1lZCB0b2tlbiAke3RoaXMucmF3fWApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcGFyc2VWYWx1ZUNvbnZlcnRlcigpIHtcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICB3aGlsZSAodGhpcy5vcHQoVCRCYXIpKSB7XG4gICAgICByZXN1bHQgPSBuZXcgVmFsdWVDb252ZXJ0ZXIocmVzdWx0LCB0aGlzLnZhbCwgdGhpcy5wYXJzZVZhcmlhZGljQXJncygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHBhcnNlVmFyaWFkaWNBcmdzKCkge1xuICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgd2hpbGUgKHRoaXMub3B0KFQkQ29sb24pKSB7XG4gICAgICByZXN1bHQucHVzaCh0aGlzLnBhcnNlRXhwcmVzc2lvbigpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHBhcnNlRXhwcmVzc2lvbigpIHtcbiAgICBsZXQgZXhwclN0YXJ0ID0gdGhpcy5pZHg7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucGFyc2VDb25kaXRpb25hbCgpO1xuXG4gICAgd2hpbGUgKHRoaXMudGtuID09PSBUJEVxKSB7XG4gICAgICBpZiAoIXJlc3VsdC5pc0Fzc2lnbmFibGUpIHtcbiAgICAgICAgdGhpcy5lcnIoYEV4cHJlc3Npb24gJHt0aGlzLnNyYy5zbGljZShleHByU3RhcnQsIHRoaXMuc3RhcnQpfSBpcyBub3QgYXNzaWduYWJsZWApO1xuICAgICAgfVxuICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgIGV4cHJTdGFydCA9IHRoaXMuaWR4O1xuICAgICAgcmVzdWx0ID0gbmV3IEFzc2lnbihyZXN1bHQsIHRoaXMucGFyc2VDb25kaXRpb25hbCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHBhcnNlQ29uZGl0aW9uYWwoKSB7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucGFyc2VCaW5hcnkoMCk7XG5cbiAgICBpZiAodGhpcy5vcHQoVCRRdWVzdGlvbikpIHtcbiAgICAgIGxldCB5ZXMgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgdGhpcy5leHBlY3QoVCRDb2xvbik7XG4gICAgICByZXN1bHQgPSBuZXcgQ29uZGl0aW9uYWwocmVzdWx0LCB5ZXMsIHRoaXMucGFyc2VFeHByZXNzaW9uKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcGFyc2VCaW5hcnkobWluUHJlY2VkZW5jZSkge1xuICAgIGxldCBsZWZ0ID0gdGhpcy5wYXJzZUxlZnRIYW5kU2lkZSgwKTtcblxuICAgIHdoaWxlICh0aGlzLnRrbiAmIFQkQmluYXJ5T3ApIHtcbiAgICAgIGNvbnN0IG9wVG9rZW4gPSB0aGlzLnRrbjtcbiAgICAgIGlmICgob3BUb2tlbiAmIFQkUHJlY2VkZW5jZSkgPD0gbWluUHJlY2VkZW5jZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICBsZWZ0ID0gbmV3IEJpbmFyeShUb2tlblZhbHVlc1tvcFRva2VuICYgVCRUb2tlbk1hc2tdLCBsZWZ0LCB0aGlzLnBhcnNlQmluYXJ5KG9wVG9rZW4gJiBUJFByZWNlZGVuY2UpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH1cblxuICBwYXJzZUxlZnRIYW5kU2lkZShjb250ZXh0KSB7XG4gICAgbGV0IHJlc3VsdDtcblxuICAgIHByaW1hcnk6IHN3aXRjaCAodGhpcy50a24pIHtcbiAgICAgIGNhc2UgVCRQbHVzOlxuICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUxlZnRIYW5kU2lkZSgwKTtcbiAgICAgIGNhc2UgVCRNaW51czpcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaW5hcnkoJy0nLCBuZXcgTGl0ZXJhbFByaW1pdGl2ZSgwKSwgdGhpcy5wYXJzZUxlZnRIYW5kU2lkZSgwKSk7XG4gICAgICBjYXNlIFQkQmFuZzpcbiAgICAgIGNhc2UgVCRUeXBlb2ZLZXl3b3JkOlxuICAgICAgY2FzZSBUJFZvaWRLZXl3b3JkOlxuICAgICAgICBjb25zdCBvcCA9IFRva2VuVmFsdWVzW3RoaXMudGtuICYgVCRUb2tlbk1hc2tdO1xuICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICByZXR1cm4gbmV3IFVuYXJ5KG9wLCB0aGlzLnBhcnNlTGVmdEhhbmRTaWRlKDApKTtcbiAgICAgIGNhc2UgVCRQYXJlbnRTY29wZTpcbiAgICAgICAge1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgICAgICBjb250ZXh0Kys7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHQoVCRQZXJpb2QpKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnRrbiA9PT0gVCRQZXJpb2QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRrbiAmIFQkQWNjZXNzU2NvcGVUZXJtaW5hbCkge1xuICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgQWNjZXNzVGhpcyhjb250ZXh0ICYgQyRBbmNlc3Rvcik7XG5cbiAgICAgICAgICAgICAgY29udGV4dCA9IGNvbnRleHQgJiBDJFNob3J0aGFuZFByb3AgfCBDJFRoaXM7XG4gICAgICAgICAgICAgIGJyZWFrIHByaW1hcnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmVycigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKHRoaXMudGtuID09PSBUJFBhcmVudFNjb3BlKTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFQkSWRlbnRpZmllcjpcbiAgICAgICAge1xuICAgICAgICAgIHJlc3VsdCA9IG5ldyBBY2Nlc3NTY29wZSh0aGlzLnZhbCwgY29udGV4dCAmIEMkQW5jZXN0b3IpO1xuICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgICAgY29udGV4dCA9IGNvbnRleHQgJiBDJFNob3J0aGFuZFByb3AgfCBDJFNjb3BlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIFQkVGhpc1Njb3BlOlxuICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICByZXN1bHQgPSBuZXcgQWNjZXNzVGhpcygwKTtcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQgJiBDJFNob3J0aGFuZFByb3AgfCBDJFRoaXM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUJExQYXJlbjpcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgdGhpcy5leHBlY3QoVCRSUGFyZW4pO1xuICAgICAgICBjb250ZXh0ID0gQyRQcmltYXJ5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVCRMQnJhY2tldDpcbiAgICAgICAge1xuICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICAgICAgICBpZiAodGhpcy50a24gIT09IFQkUkJyYWNrZXQpIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLnBhcnNlRXhwcmVzc2lvbigpKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKHRoaXMub3B0KFQkQ29tbWEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5leHBlY3QoVCRSQnJhY2tldCk7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IExpdGVyYWxBcnJheShlbGVtZW50cyk7XG4gICAgICAgICAgY29udGV4dCA9IEMkUHJpbWFyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBUJExCcmFjZTpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICAgIHdoaWxlICh0aGlzLnRrbiAhPT0gVCRSQnJhY2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRrbiAmIFQkSWRlbnRpZmllck9yS2V5d29yZCkge1xuICAgICAgICAgICAgICBjb25zdCB7IGNoLCB0a24sIGlkeCB9ID0gdGhpcztcbiAgICAgICAgICAgICAga2V5cy5wdXNoKHRoaXMudmFsKTtcbiAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgICAgICAgaWYgKHRoaXMub3B0KFQkQ29sb24pKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godGhpcy5wYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaCA9IGNoO1xuICAgICAgICAgICAgICAgIHRoaXMudGtuID0gdGtuO1xuICAgICAgICAgICAgICAgIHRoaXMuaWR4ID0gaWR4O1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXMucGFyc2VMZWZ0SGFuZFNpZGUoQyRTaG9ydGhhbmRQcm9wKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50a24gJiBUJExpdGVyYWwpIHtcbiAgICAgICAgICAgICAga2V5cy5wdXNoKHRoaXMudmFsKTtcbiAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgICAgICAgdGhpcy5leHBlY3QoVCRDb2xvbik7XG4gICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRoaXMucGFyc2VFeHByZXNzaW9uKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5lcnIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnRrbiAhPT0gVCRSQnJhY2UpIHtcbiAgICAgICAgICAgICAgdGhpcy5leHBlY3QoVCRDb21tYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZXhwZWN0KFQkUkJyYWNlKTtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgTGl0ZXJhbE9iamVjdChrZXlzLCB2YWx1ZXMpO1xuICAgICAgICAgIGNvbnRleHQgPSBDJFByaW1hcnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgVCRTdHJpbmdMaXRlcmFsOlxuICAgICAgICByZXN1bHQgPSBuZXcgTGl0ZXJhbFN0cmluZyh0aGlzLnZhbCk7XG4gICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgIGNvbnRleHQgPSBDJFByaW1hcnk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUJFRlbXBsYXRlVGFpbDpcbiAgICAgICAgcmVzdWx0ID0gbmV3IExpdGVyYWxUZW1wbGF0ZShbdGhpcy52YWxdKTtcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgY29udGV4dCA9IEMkUHJpbWFyeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFQkVGVtcGxhdGVDb250aW51YXRpb246XG4gICAgICAgIHJlc3VsdCA9IHRoaXMucGFyc2VUZW1wbGF0ZSgwKTtcbiAgICAgICAgY29udGV4dCA9IEMkUHJpbWFyeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFQkTnVtZXJpY0xpdGVyYWw6XG4gICAgICAgIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgTGl0ZXJhbFByaW1pdGl2ZSh0aGlzLnZhbCk7XG4gICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIFQkTnVsbEtleXdvcmQ6XG4gICAgICBjYXNlIFQkVW5kZWZpbmVkS2V5d29yZDpcbiAgICAgIGNhc2UgVCRUcnVlS2V5d29yZDpcbiAgICAgIGNhc2UgVCRGYWxzZUtleXdvcmQ6XG4gICAgICAgIHJlc3VsdCA9IG5ldyBMaXRlcmFsUHJpbWl0aXZlKFRva2VuVmFsdWVzW3RoaXMudGtuICYgVCRUb2tlbk1hc2tdKTtcbiAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgY29udGV4dCA9IEMkUHJpbWFyeTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodGhpcy5pZHggPj0gdGhpcy5sZW4pIHtcbiAgICAgICAgICB0aGlzLmVycignVW5leHBlY3RlZCBlbmQgb2YgZXhwcmVzc2lvbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZXJyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGV4dCAmIEMkU2hvcnRoYW5kUHJvcCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBsZXQgbmFtZSA9IHRoaXMudmFsO1xuICAgIHdoaWxlICh0aGlzLnRrbiAmIFQkTWVtYmVyT3JDYWxsRXhwcmVzc2lvbikge1xuICAgICAgc3dpdGNoICh0aGlzLnRrbikge1xuICAgICAgICBjYXNlIFQkUGVyaW9kOlxuICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgICAgaWYgKCEodGhpcy50a24gJiBUJElkZW50aWZpZXJPcktleXdvcmQpKSB7XG4gICAgICAgICAgICB0aGlzLmVycigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuYW1lID0gdGhpcy52YWw7XG4gICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblxuICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0ICYgQyRQcmltYXJ5IHwgKGNvbnRleHQgJiAoQyRUaGlzIHwgQyRTY29wZSkpIDw8IDEgfCBjb250ZXh0ICYgQyRNZW1iZXIgfCAoY29udGV4dCAmIEMkS2V5ZWQpID4+IDEgfCAoY29udGV4dCAmIEMkQ2FsbCkgPj4gMjtcbiAgICAgICAgICBpZiAodGhpcy50a24gPT09IFQkTFBhcmVuKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbnRleHQgJiBDJFNjb3BlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQWNjZXNzU2NvcGUobmFtZSwgcmVzdWx0LmFuY2VzdG9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEFjY2Vzc01lbWJlcihyZXN1bHQsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBUJExCcmFja2V0OlxuICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgICAgY29udGV4dCA9IEMkS2V5ZWQ7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IEFjY2Vzc0tleWVkKHJlc3VsdCwgdGhpcy5wYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgICAgICAgdGhpcy5leHBlY3QoVCRSQnJhY2tldCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVCRMUGFyZW46XG4gICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgICBjb25zdCBhcmdzID0gW107XG4gICAgICAgICAgd2hpbGUgKHRoaXMudGtuICE9PSBUJFJQYXJlbikge1xuICAgICAgICAgICAgYXJncy5wdXNoKHRoaXMucGFyc2VFeHByZXNzaW9uKCkpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdChUJENvbW1hKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5leHBlY3QoVCRSUGFyZW4pO1xuICAgICAgICAgIGlmIChjb250ZXh0ICYgQyRTY29wZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IENhbGxTY29wZShuYW1lLCBhcmdzLCByZXN1bHQuYW5jZXN0b3IpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dCAmIChDJE1lbWJlciB8IEMkUHJpbWFyeSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYWxsTWVtYmVyKHJlc3VsdCwgbmFtZSwgYXJncyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBDYWxsRnVuY3Rpb24ocmVzdWx0LCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGV4dCA9IEMkQ2FsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUJFRlbXBsYXRlVGFpbDpcbiAgICAgICAgICByZXN1bHQgPSBuZXcgTGl0ZXJhbFRlbXBsYXRlKFt0aGlzLnZhbF0sIFtdLCBbdGhpcy5yYXddLCByZXN1bHQpO1xuICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVCRUZW1wbGF0ZUNvbnRpbnVhdGlvbjpcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLnBhcnNlVGVtcGxhdGUoY29udGV4dCB8IEMkVGFnZ2VkLCByZXN1bHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwYXJzZVRlbXBsYXRlKGNvbnRleHQsIGZ1bmMpIHtcbiAgICBjb25zdCBjb29rZWQgPSBbdGhpcy52YWxdO1xuICAgIGNvbnN0IHJhdyA9IGNvbnRleHQgJiBDJFRhZ2dlZCA/IFt0aGlzLnJhd10gOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5leHBlY3QoVCRUZW1wbGF0ZUNvbnRpbnVhdGlvbik7XG4gICAgY29uc3QgZXhwcmVzc2lvbnMgPSBbdGhpcy5wYXJzZUV4cHJlc3Npb24oKV07XG5cbiAgICB3aGlsZSAoKHRoaXMudGtuID0gdGhpcy5zY2FuVGVtcGxhdGVUYWlsKCkpICE9PSBUJFRlbXBsYXRlVGFpbCkge1xuICAgICAgY29va2VkLnB1c2godGhpcy52YWwpO1xuICAgICAgaWYgKGNvbnRleHQgJiBDJFRhZ2dlZCkge1xuICAgICAgICByYXcucHVzaCh0aGlzLnJhdyk7XG4gICAgICB9XG4gICAgICB0aGlzLmV4cGVjdChUJFRlbXBsYXRlQ29udGludWF0aW9uKTtcbiAgICAgIGV4cHJlc3Npb25zLnB1c2godGhpcy5wYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgfVxuXG4gICAgY29va2VkLnB1c2godGhpcy52YWwpO1xuICAgIGlmIChjb250ZXh0ICYgQyRUYWdnZWQpIHtcbiAgICAgIHJhdy5wdXNoKHRoaXMucmF3KTtcbiAgICB9XG4gICAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgICByZXR1cm4gbmV3IExpdGVyYWxUZW1wbGF0ZShjb29rZWQsIGV4cHJlc3Npb25zLCByYXcsIGZ1bmMpO1xuICB9XG5cbiAgbmV4dFRva2VuKCkge1xuICAgIHdoaWxlICh0aGlzLmlkeCA8IHRoaXMubGVuKSB7XG4gICAgICBpZiAodGhpcy5jaCA8PSAweDIwKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLmlkeDtcbiAgICAgIGlmICh0aGlzLmNoID09PSAweDI0IHx8IHRoaXMuY2ggPj0gMHg2MSAmJiB0aGlzLmNoIDw9IDB4N0EpIHtcbiAgICAgICAgdGhpcy50a24gPSB0aGlzLnNjYW5JZGVudGlmaWVyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCh0aGlzLnRrbiA9IENoYXJTY2FubmVyc1t0aGlzLmNoXSh0aGlzKSkgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRrbiA9IFQkRU9GO1xuICB9XG5cbiAgbmV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaCA9IHRoaXMuc3JjLmNoYXJDb2RlQXQoKyt0aGlzLmlkeCk7XG4gIH1cblxuICBzY2FuSWRlbnRpZmllcigpIHtcbiAgICB3aGlsZSAoQXNjaWlJZFBhcnRzLmhhcyh0aGlzLm5leHQoKSkgfHwgdGhpcy5jaCA+IDB4N0YgJiYgSWRQYXJ0c1t0aGlzLmNoXSkge31cblxuICAgIHJldHVybiBLZXl3b3JkTG9va3VwW3RoaXMudmFsID0gdGhpcy5yYXddIHx8IFQkSWRlbnRpZmllcjtcbiAgfVxuXG4gIHNjYW5OdW1iZXIoaXNGbG9hdCkge1xuICAgIGlmIChpc0Zsb2F0KSB7XG4gICAgICB0aGlzLnZhbCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsID0gdGhpcy5jaCAtIDB4MzA7XG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkgPD0gMHgzOSAmJiB0aGlzLmNoID49IDB4MzApIHtcbiAgICAgICAgdGhpcy52YWwgPSB0aGlzLnZhbCAqIDEwICsgdGhpcy5jaCAtIDB4MzA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzRmxvYXQgfHwgdGhpcy5jaCA9PT0gMHgyRSkge1xuICAgICAgaWYgKCFpc0Zsb2F0KSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLmlkeDtcbiAgICAgIGxldCB2YWx1ZSA9IHRoaXMuY2ggLSAweDMwO1xuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpIDw9IDB4MzkgJiYgdGhpcy5jaCA+PSAweDMwKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgKiAxMCArIHRoaXMuY2ggLSAweDMwO1xuICAgICAgfVxuICAgICAgdGhpcy52YWwgPSB0aGlzLnZhbCArIHZhbHVlIC8gTWF0aC5wb3coMTAsIHRoaXMuaWR4IC0gc3RhcnQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNoID09PSAweDY1IHx8IHRoaXMuY2ggPT09IDB4NDUpIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5pZHg7XG5cbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgaWYgKHRoaXMuY2ggPT09IDB4MkQgfHwgdGhpcy5jaCA9PT0gMHgyQikge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEodGhpcy5jaCA+PSAweDMwICYmIHRoaXMuY2ggPD0gMHgzOSkpIHtcbiAgICAgICAgdGhpcy5pZHggPSBzdGFydDtcbiAgICAgICAgdGhpcy5lcnIoJ0ludmFsaWQgZXhwb25lbnQnKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICh0aGlzLm5leHQoKSA8PSAweDM5ICYmIHRoaXMuY2ggPj0gMHgzMCkge31cbiAgICAgIHRoaXMudmFsID0gcGFyc2VGbG9hdCh0aGlzLnNyYy5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmlkeCkpO1xuICAgIH1cblxuICAgIHJldHVybiBUJE51bWVyaWNMaXRlcmFsO1xuICB9XG5cbiAgc2NhblN0cmluZygpIHtcbiAgICBsZXQgcXVvdGUgPSB0aGlzLmNoO1xuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgbGV0IGJ1ZmZlcjtcbiAgICBsZXQgbWFya2VyID0gdGhpcy5pZHg7XG5cbiAgICB3aGlsZSAodGhpcy5jaCAhPT0gcXVvdGUpIHtcbiAgICAgIGlmICh0aGlzLmNoID09PSAweDVDKSB7XG4gICAgICAgIGlmICghYnVmZmVyKSB7XG4gICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBidWZmZXIucHVzaCh0aGlzLnNyYy5zbGljZShtYXJrZXIsIHRoaXMuaWR4KSk7XG5cbiAgICAgICAgdGhpcy5uZXh0KCk7XG5cbiAgICAgICAgbGV0IHVuZXNjYXBlZDtcblxuICAgICAgICBpZiAodGhpcy5jaCA9PT0gMHg3NSkge1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaWR4ICsgNCA8IHRoaXMubGVuKSB7XG4gICAgICAgICAgICBsZXQgaGV4ID0gdGhpcy5zcmMuc2xpY2UodGhpcy5pZHgsIHRoaXMuaWR4ICsgNCk7XG5cbiAgICAgICAgICAgIGlmICghL1tBLVowLTldezR9L2kudGVzdChoZXgpKSB7XG4gICAgICAgICAgICAgIHRoaXMuZXJyKGBJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdSR7aGV4fV1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdW5lc2NhcGVkID0gcGFyc2VJbnQoaGV4LCAxNik7XG4gICAgICAgICAgICB0aGlzLmlkeCArPSA0O1xuICAgICAgICAgICAgdGhpcy5jaCA9IHRoaXMuc3JjLmNoYXJDb2RlQXQodGhpcy5pZHgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVycigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bmVzY2FwZWQgPSB1bmVzY2FwZSh0aGlzLmNoKTtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmZlci5wdXNoKGZyb21DaGFyQ29kZSh1bmVzY2FwZWQpKTtcbiAgICAgICAgbWFya2VyID0gdGhpcy5pZHg7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY2ggPT09IDAgfHwgdGhpcy5pZHggPj0gdGhpcy5sZW4pIHtcbiAgICAgICAgdGhpcy5lcnIoJ1VudGVybWluYXRlZCBxdW90ZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGxhc3QgPSB0aGlzLnNyYy5zbGljZShtYXJrZXIsIHRoaXMuaWR4KTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBsZXQgdW5lc2NhcGVkID0gbGFzdDtcblxuICAgIGlmIChidWZmZXIgIT09IG51bGwgJiYgYnVmZmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJ1ZmZlci5wdXNoKGxhc3QpO1xuICAgICAgdW5lc2NhcGVkID0gYnVmZmVyLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHRoaXMudmFsID0gdW5lc2NhcGVkO1xuICAgIHJldHVybiBUJFN0cmluZ0xpdGVyYWw7XG4gIH1cblxuICBzY2FuVGVtcGxhdGUoKSB7XG4gICAgbGV0IHRhaWwgPSB0cnVlO1xuICAgIGxldCByZXN1bHQgPSAnJztcblxuICAgIHdoaWxlICh0aGlzLm5leHQoKSAhPT0gMHg2MCkge1xuICAgICAgaWYgKHRoaXMuY2ggPT09IDB4MjQpIHtcbiAgICAgICAgaWYgKHRoaXMuaWR4ICsgMSA8IHRoaXMubGVuICYmIHRoaXMuc3JjLmNoYXJDb2RlQXQodGhpcy5pZHggKyAxKSA9PT0gMHg3Qikge1xuICAgICAgICAgIHRoaXMuaWR4Kys7XG4gICAgICAgICAgdGFpbCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCArPSAnJCc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jaCA9PT0gMHg1Qykge1xuICAgICAgICByZXN1bHQgKz0gZnJvbUNoYXJDb2RlKHVuZXNjYXBlKHRoaXMubmV4dCgpKSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY2ggPT09IDAgfHwgdGhpcy5pZHggPj0gdGhpcy5sZW4pIHtcbiAgICAgICAgdGhpcy5lcnIoJ1VudGVybWluYXRlZCB0ZW1wbGF0ZSBsaXRlcmFsJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgKz0gZnJvbUNoYXJDb2RlKHRoaXMuY2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubmV4dCgpO1xuICAgIHRoaXMudmFsID0gcmVzdWx0O1xuICAgIGlmICh0YWlsKSB7XG4gICAgICByZXR1cm4gVCRUZW1wbGF0ZVRhaWw7XG4gICAgfVxuICAgIHJldHVybiBUJFRlbXBsYXRlQ29udGludWF0aW9uO1xuICB9XG5cbiAgc2NhblRlbXBsYXRlVGFpbCgpIHtcbiAgICBpZiAodGhpcy5pZHggPj0gdGhpcy5sZW4pIHtcbiAgICAgIHRoaXMuZXJyKCdVbnRlcm1pbmF0ZWQgdGVtcGxhdGUnKTtcbiAgICB9XG4gICAgdGhpcy5pZHgtLTtcbiAgICByZXR1cm4gdGhpcy5zY2FuVGVtcGxhdGUoKTtcbiAgfVxuXG4gIGVycihtZXNzYWdlID0gYFVuZXhwZWN0ZWQgdG9rZW4gJHt0aGlzLnJhd31gLCBjb2x1bW4gPSB0aGlzLnN0YXJ0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBQYXJzZXIgRXJyb3I6ICR7bWVzc2FnZX0gYXQgY29sdW1uICR7Y29sdW1ufSBpbiBleHByZXNzaW9uIFske3RoaXMuc3JjfV1gKTtcbiAgfVxuXG4gIG9wdCh0b2tlbikge1xuICAgIGlmICh0aGlzLnRrbiA9PT0gdG9rZW4pIHtcbiAgICAgIHRoaXMubmV4dFRva2VuKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBleHBlY3QodG9rZW4pIHtcbiAgICBpZiAodGhpcy50a24gPT09IHRva2VuKSB7XG4gICAgICB0aGlzLm5leHRUb2tlbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycihgTWlzc2luZyBleHBlY3RlZCB0b2tlbiAke1Rva2VuVmFsdWVzW3Rva2VuICYgVCRUb2tlbk1hc2tdfWAsIHRoaXMuaWR4KTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHVuZXNjYXBlKGNvZGUpIHtcbiAgc3dpdGNoIChjb2RlKSB7XG4gICAgY2FzZSAweDY2OlxuICAgICAgcmV0dXJuIDB4QztcbiAgICBjYXNlIDB4NkU6XG4gICAgICByZXR1cm4gMHhBO1xuICAgIGNhc2UgMHg3MjpcbiAgICAgIHJldHVybiAweEQ7XG4gICAgY2FzZSAweDc0OlxuICAgICAgcmV0dXJuIDB4OTtcbiAgICBjYXNlIDB4NzY6XG4gICAgICByZXR1cm4gMHhCO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY29kZTtcbiAgfVxufVxuXG5jb25zdCBDJFRoaXMgPSAxIDw8IDEwO1xuY29uc3QgQyRTY29wZSA9IDEgPDwgMTE7XG5jb25zdCBDJE1lbWJlciA9IDEgPDwgMTI7XG5jb25zdCBDJEtleWVkID0gMSA8PCAxMztcbmNvbnN0IEMkQ2FsbCA9IDEgPDwgMTQ7XG5jb25zdCBDJFByaW1hcnkgPSAxIDw8IDE1O1xuY29uc3QgQyRTaG9ydGhhbmRQcm9wID0gMSA8PCAxNjtcbmNvbnN0IEMkVGFnZ2VkID0gMSA8PCAxNztcblxuY29uc3QgQyRBbmNlc3RvciA9ICgxIDw8IDkpIC0gMTtcblxuY29uc3QgVCRUb2tlbk1hc2sgPSAoMSA8PCA2KSAtIDE7XG5cbmNvbnN0IFQkUHJlY1NoaWZ0ID0gNjtcblxuY29uc3QgVCRQcmVjZWRlbmNlID0gNyA8PCBUJFByZWNTaGlmdDtcblxuY29uc3QgVCRFeHByZXNzaW9uVGVybWluYWwgPSAxIDw8IDExO1xuXG5jb25zdCBUJENsb3NpbmdUb2tlbiA9IDEgPDwgMTI7XG5cbmNvbnN0IFQkT3BlbmluZ1Rva2VuID0gMSA8PCAxMztcblxuY29uc3QgVCRBY2Nlc3NTY29wZVRlcm1pbmFsID0gMSA8PCAxNDtcbmNvbnN0IFQkS2V5d29yZCA9IDEgPDwgMTU7XG5jb25zdCBUJEVPRiA9IDEgPDwgMTYgfCBUJEFjY2Vzc1Njb3BlVGVybWluYWwgfCBUJEV4cHJlc3Npb25UZXJtaW5hbDtcbmNvbnN0IFQkSWRlbnRpZmllciA9IDEgPDwgMTc7XG5jb25zdCBUJElkZW50aWZpZXJPcktleXdvcmQgPSBUJElkZW50aWZpZXIgfCBUJEtleXdvcmQ7XG5jb25zdCBUJExpdGVyYWwgPSAxIDw8IDE4O1xuY29uc3QgVCROdW1lcmljTGl0ZXJhbCA9IDEgPDwgMTkgfCBUJExpdGVyYWw7XG5jb25zdCBUJFN0cmluZ0xpdGVyYWwgPSAxIDw8IDIwIHwgVCRMaXRlcmFsO1xuY29uc3QgVCRCaW5hcnlPcCA9IDEgPDwgMjE7XG5cbmNvbnN0IFQkVW5hcnlPcCA9IDEgPDwgMjI7XG5cbmNvbnN0IFQkTWVtYmVyRXhwcmVzc2lvbiA9IDEgPDwgMjM7XG5cbmNvbnN0IFQkTWVtYmVyT3JDYWxsRXhwcmVzc2lvbiA9IDEgPDwgMjQ7XG5jb25zdCBUJFRlbXBsYXRlVGFpbCA9IDEgPDwgMjUgfCBUJE1lbWJlck9yQ2FsbEV4cHJlc3Npb247XG5jb25zdCBUJFRlbXBsYXRlQ29udGludWF0aW9uID0gMSA8PCAyNiB8IFQkTWVtYmVyT3JDYWxsRXhwcmVzc2lvbjtcblxuY29uc3QgVCRGYWxzZUtleXdvcmQgPSAwIHwgVCRLZXl3b3JkIHwgVCRMaXRlcmFsO1xuY29uc3QgVCRUcnVlS2V5d29yZCA9IDEgfCBUJEtleXdvcmQgfCBUJExpdGVyYWw7XG5jb25zdCBUJE51bGxLZXl3b3JkID0gMiB8IFQkS2V5d29yZCB8IFQkTGl0ZXJhbDtcbmNvbnN0IFQkVW5kZWZpbmVkS2V5d29yZCA9IDMgfCBUJEtleXdvcmQgfCBUJExpdGVyYWw7XG5jb25zdCBUJFRoaXNTY29wZSA9IDQgfCBUJElkZW50aWZpZXJPcktleXdvcmQ7XG5jb25zdCBUJFBhcmVudFNjb3BlID0gNSB8IFQkSWRlbnRpZmllck9yS2V5d29yZDtcblxuY29uc3QgVCRMUGFyZW4gPSA2IHwgVCRPcGVuaW5nVG9rZW4gfCBUJEFjY2Vzc1Njb3BlVGVybWluYWwgfCBUJE1lbWJlck9yQ2FsbEV4cHJlc3Npb247XG5jb25zdCBUJExCcmFjZSA9IDcgfCBUJE9wZW5pbmdUb2tlbjtcbmNvbnN0IFQkUGVyaW9kID0gOCB8IFQkTWVtYmVyRXhwcmVzc2lvbiB8IFQkTWVtYmVyT3JDYWxsRXhwcmVzc2lvbjtcbmNvbnN0IFQkUkJyYWNlID0gOSB8IFQkQWNjZXNzU2NvcGVUZXJtaW5hbCB8IFQkQ2xvc2luZ1Rva2VuIHwgVCRFeHByZXNzaW9uVGVybWluYWw7XG5jb25zdCBUJFJQYXJlbiA9IDEwIHwgVCRBY2Nlc3NTY29wZVRlcm1pbmFsIHwgVCRDbG9zaW5nVG9rZW4gfCBUJEV4cHJlc3Npb25UZXJtaW5hbDtcbmNvbnN0IFQkQ29tbWEgPSAxMSB8IFQkQWNjZXNzU2NvcGVUZXJtaW5hbDtcbmNvbnN0IFQkTEJyYWNrZXQgPSAxMiB8IFQkT3BlbmluZ1Rva2VuIHwgVCRBY2Nlc3NTY29wZVRlcm1pbmFsIHwgVCRNZW1iZXJFeHByZXNzaW9uIHwgVCRNZW1iZXJPckNhbGxFeHByZXNzaW9uO1xuY29uc3QgVCRSQnJhY2tldCA9IDEzIHwgVCRDbG9zaW5nVG9rZW4gfCBUJEV4cHJlc3Npb25UZXJtaW5hbDtcbmNvbnN0IFQkQ29sb24gPSAxNCB8IFQkQWNjZXNzU2NvcGVUZXJtaW5hbDtcbmNvbnN0IFQkUXVlc3Rpb24gPSAxNTtcblxuY29uc3QgVCRBbXBlcnNhbmQgPSAxOCB8IFQkQWNjZXNzU2NvcGVUZXJtaW5hbDtcbmNvbnN0IFQkQmFyID0gMTkgfCBUJEFjY2Vzc1Njb3BlVGVybWluYWw7XG5jb25zdCBUJEJhckJhciA9IDIwIHwgMSA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG5jb25zdCBUJEFtcGVyc2FuZEFtcGVyc2FuZCA9IDIxIHwgMiA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG5jb25zdCBUJENhcmV0ID0gMjIgfCAzIDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcDtcbmNvbnN0IFQkRXFFcSA9IDIzIHwgNCA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG5jb25zdCBUJEJhbmdFcSA9IDI0IHwgNCA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG5jb25zdCBUJEVxRXFFcSA9IDI1IHwgNCA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG5jb25zdCBUJEJhbmdFcUVxID0gMjYgfCA0IDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcDtcbmNvbnN0IFQkTHQgPSAyNyB8IDUgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wO1xuY29uc3QgVCRHdCA9IDI4IHwgNSA8PCBUJFByZWNTaGlmdCB8IFQkQmluYXJ5T3A7XG5jb25zdCBUJEx0RXEgPSAyOSB8IDUgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wO1xuY29uc3QgVCRHdEVxID0gMzAgfCA1IDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcDtcbmNvbnN0IFQkSW5LZXl3b3JkID0gMzEgfCA1IDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcCB8IFQkS2V5d29yZDtcbmNvbnN0IFQkSW5zdGFuY2VPZktleXdvcmQgPSAzMiB8IDUgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wIHwgVCRLZXl3b3JkO1xuY29uc3QgVCRQbHVzID0gMzMgfCA2IDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcCB8IFQkVW5hcnlPcDtcbmNvbnN0IFQkTWludXMgPSAzNCB8IDYgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wIHwgVCRVbmFyeU9wO1xuY29uc3QgVCRUeXBlb2ZLZXl3b3JkID0gMzUgfCBUJFVuYXJ5T3AgfCBUJEtleXdvcmQ7XG5jb25zdCBUJFZvaWRLZXl3b3JkID0gMzYgfCBUJFVuYXJ5T3AgfCBUJEtleXdvcmQ7XG5jb25zdCBUJFN0YXIgPSAzNyB8IDcgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wO1xuY29uc3QgVCRQZXJjZW50ID0gMzggfCA3IDw8IFQkUHJlY1NoaWZ0IHwgVCRCaW5hcnlPcDtcbmNvbnN0IFQkU2xhc2ggPSAzOSB8IDcgPDwgVCRQcmVjU2hpZnQgfCBUJEJpbmFyeU9wO1xuY29uc3QgVCRFcSA9IDQwO1xuY29uc3QgVCRCYW5nID0gNDEgfCBUJFVuYXJ5T3A7XG5cbmNvbnN0IEtleXdvcmRMb29rdXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuS2V5d29yZExvb2t1cC50cnVlID0gVCRUcnVlS2V5d29yZDtcbktleXdvcmRMb29rdXAubnVsbCA9IFQkTnVsbEtleXdvcmQ7XG5LZXl3b3JkTG9va3VwLmZhbHNlID0gVCRGYWxzZUtleXdvcmQ7XG5LZXl3b3JkTG9va3VwLnVuZGVmaW5lZCA9IFQkVW5kZWZpbmVkS2V5d29yZDtcbktleXdvcmRMb29rdXAuJHRoaXMgPSBUJFRoaXNTY29wZTtcbktleXdvcmRMb29rdXAuJHBhcmVudCA9IFQkUGFyZW50U2NvcGU7XG5LZXl3b3JkTG9va3VwLmluID0gVCRJbktleXdvcmQ7XG5LZXl3b3JkTG9va3VwLmluc3RhbmNlb2YgPSBUJEluc3RhbmNlT2ZLZXl3b3JkO1xuS2V5d29yZExvb2t1cC50eXBlb2YgPSBUJFR5cGVvZktleXdvcmQ7XG5LZXl3b3JkTG9va3VwLnZvaWQgPSBUJFZvaWRLZXl3b3JkO1xuXG5jb25zdCBUb2tlblZhbHVlcyA9IFtmYWxzZSwgdHJ1ZSwgbnVsbCwgdW5kZWZpbmVkLCAnJHRoaXMnLCAnJHBhcmVudCcsICcoJywgJ3snLCAnLicsICd9JywgJyknLCAnLCcsICdbJywgJ10nLCAnOicsICc/JywgJ1xcJycsICdcIicsICcmJywgJ3wnLCAnfHwnLCAnJiYnLCAnXicsICc9PScsICchPScsICc9PT0nLCAnIT09JywgJzwnLCAnPicsICc8PScsICc+PScsICdpbicsICdpbnN0YW5jZW9mJywgJysnLCAnLScsICd0eXBlb2YnLCAndm9pZCcsICcqJywgJyUnLCAnLycsICc9JywgJyEnXTtcblxuY29uc3QgY29kZXMgPSB7XG4gIEFzY2lpSWRQYXJ0OiBbMHgyNCwgMCwgMHgzMCwgMHgzQSwgMHg0MSwgMHg1QiwgMHg1RiwgMCwgMHg2MSwgMHg3Ql0sXG4gIElkU3RhcnQ6IFsweDI0LCAwLCAweDQxLCAweDVCLCAweDVGLCAwLCAweDYxLCAweDdCLCAweEFBLCAwLCAweEJBLCAwLCAweEMwLCAweEQ3LCAweEQ4LCAweEY3LCAweEY4LCAweDJCOSwgMHgyRTAsIDB4MkU1LCAweDFEMDAsIDB4MUQyNiwgMHgxRDJDLCAweDFENUQsIDB4MUQ2MiwgMHgxRDY2LCAweDFENkIsIDB4MUQ3OCwgMHgxRDc5LCAweDFEQkYsIDB4MUUwMCwgMHgxRjAwLCAweDIwNzEsIDAsIDB4MjA3RiwgMCwgMHgyMDkwLCAweDIwOUQsIDB4MjEyQSwgMHgyMTJDLCAweDIxMzIsIDAsIDB4MjE0RSwgMCwgMHgyMTYwLCAweDIxODksIDB4MkM2MCwgMHgyQzgwLCAweEE3MjIsIDB4QTc4OCwgMHhBNzhCLCAweEE3QUYsIDB4QTdCMCwgMHhBN0I4LCAweEE3RjcsIDB4QTgwMCwgMHhBQjMwLCAweEFCNUIsIDB4QUI1QywgMHhBQjY1LCAweEZCMDAsIDB4RkIwNywgMHhGRjIxLCAweEZGM0IsIDB4RkY0MSwgMHhGRjVCXSxcbiAgRGlnaXQ6IFsweDMwLCAweDNBXSxcbiAgU2tpcDogWzAsIDB4MjEsIDB4N0YsIDB4QTFdXG59O1xuXG5mdW5jdGlvbiBkZWNvbXByZXNzKGxvb2t1cCwgc2V0LCBjb21wcmVzc2VkLCB2YWx1ZSkge1xuICBsZXQgcmFuZ2VDb3VudCA9IGNvbXByZXNzZWQubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlQ291bnQ7IGkgKz0gMikge1xuICAgIGNvbnN0IHN0YXJ0ID0gY29tcHJlc3NlZFtpXTtcbiAgICBsZXQgZW5kID0gY29tcHJlc3NlZFtpICsgMV07XG4gICAgZW5kID0gZW5kID4gMCA/IGVuZCA6IHN0YXJ0ICsgMTtcbiAgICBpZiAobG9va3VwKSB7XG4gICAgICBsZXQgaiA9IHN0YXJ0O1xuICAgICAgd2hpbGUgKGogPCBlbmQpIHtcbiAgICAgICAgbG9va3VwW2pdID0gdmFsdWU7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNldCkge1xuICAgICAgZm9yIChsZXQgY2ggPSBzdGFydDsgY2ggPCBlbmQ7IGNoKyspIHtcbiAgICAgICAgc2V0LmFkZChjaCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJldHVyblRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwID0+IHtcbiAgICBwLm5leHQoKTtcbiAgICByZXR1cm4gdG9rZW47XG4gIH07XG59XG5mdW5jdGlvbiB1bmV4cGVjdGVkQ2hhcmFjdGVyKHApIHtcbiAgcC5lcnIoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIFske2Zyb21DaGFyQ29kZShwLmNoKX1dYCk7XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBBc2NpaUlkUGFydHMgPSBuZXcgU2V0KCk7XG5kZWNvbXByZXNzKG51bGwsIEFzY2lpSWRQYXJ0cywgY29kZXMuQXNjaWlJZFBhcnQsIHRydWUpO1xuXG5jb25zdCBJZFBhcnRzID0gbmV3IFVpbnQ4QXJyYXkoMHhGRkZGKTtcbmRlY29tcHJlc3MoSWRQYXJ0cywgbnVsbCwgY29kZXMuSWRTdGFydCwgMSk7XG5kZWNvbXByZXNzKElkUGFydHMsIG51bGwsIGNvZGVzLkRpZ2l0LCAxKTtcblxuY29uc3QgQ2hhclNjYW5uZXJzID0gbmV3IEFycmF5KDB4RkZGRik7XG5sZXQgY2kgPSAwO1xud2hpbGUgKGNpIDwgMHhGRkZGKSB7XG4gIENoYXJTY2FubmVyc1tjaV0gPSB1bmV4cGVjdGVkQ2hhcmFjdGVyO1xuICBjaSsrO1xufVxuXG5kZWNvbXByZXNzKENoYXJTY2FubmVycywgbnVsbCwgY29kZXMuU2tpcCwgcCA9PiB7XG4gIHAubmV4dCgpO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuZGVjb21wcmVzcyhDaGFyU2Nhbm5lcnMsIG51bGwsIGNvZGVzLklkU3RhcnQsIHAgPT4gcC5zY2FuSWRlbnRpZmllcigpKTtcbmRlY29tcHJlc3MoQ2hhclNjYW5uZXJzLCBudWxsLCBjb2Rlcy5EaWdpdCwgcCA9PiBwLnNjYW5OdW1iZXIoZmFsc2UpKTtcblxuQ2hhclNjYW5uZXJzWzB4MjJdID0gQ2hhclNjYW5uZXJzWzB4MjddID0gcCA9PiB7XG4gIHJldHVybiBwLnNjYW5TdHJpbmcoKTtcbn07XG5DaGFyU2Nhbm5lcnNbMHg2MF0gPSBwID0+IHtcbiAgcmV0dXJuIHAuc2NhblRlbXBsYXRlKCk7XG59O1xuXG5DaGFyU2Nhbm5lcnNbMHgyMV0gPSBwID0+IHtcbiAgaWYgKHAubmV4dCgpICE9PSAweDNEKSB7XG4gICAgcmV0dXJuIFQkQmFuZztcbiAgfVxuICBpZiAocC5uZXh0KCkgIT09IDB4M0QpIHtcbiAgICByZXR1cm4gVCRCYW5nRXE7XG4gIH1cbiAgcC5uZXh0KCk7XG4gIHJldHVybiBUJEJhbmdFcUVxO1xufTtcblxuQ2hhclNjYW5uZXJzWzB4M0RdID0gcCA9PiB7XG4gIGlmIChwLm5leHQoKSAhPT0gMHgzRCkge1xuICAgIHJldHVybiBUJEVxO1xuICB9XG4gIGlmIChwLm5leHQoKSAhPT0gMHgzRCkge1xuICAgIHJldHVybiBUJEVxRXE7XG4gIH1cbiAgcC5uZXh0KCk7XG4gIHJldHVybiBUJEVxRXFFcTtcbn07XG5cbkNoYXJTY2FubmVyc1sweDI2XSA9IHAgPT4ge1xuICBpZiAocC5uZXh0KCkgIT09IDB4MjYpIHtcbiAgICByZXR1cm4gVCRBbXBlcnNhbmQ7XG4gIH1cbiAgcC5uZXh0KCk7XG4gIHJldHVybiBUJEFtcGVyc2FuZEFtcGVyc2FuZDtcbn07XG5cbkNoYXJTY2FubmVyc1sweDdDXSA9IHAgPT4ge1xuICBpZiAocC5uZXh0KCkgIT09IDB4N0MpIHtcbiAgICByZXR1cm4gVCRCYXI7XG4gIH1cbiAgcC5uZXh0KCk7XG4gIHJldHVybiBUJEJhckJhcjtcbn07XG5cbkNoYXJTY2FubmVyc1sweDJFXSA9IHAgPT4ge1xuICBpZiAocC5uZXh0KCkgPD0gMHgzOSAmJiBwLmNoID49IDB4MzApIHtcbiAgICByZXR1cm4gcC5zY2FuTnVtYmVyKHRydWUpO1xuICB9XG4gIHJldHVybiBUJFBlcmlvZDtcbn07XG5cbkNoYXJTY2FubmVyc1sweDNDXSA9IHAgPT4ge1xuICBpZiAocC5uZXh0KCkgIT09IDB4M0QpIHtcbiAgICByZXR1cm4gVCRMdDtcbiAgfVxuICBwLm5leHQoKTtcbiAgcmV0dXJuIFQkTHRFcTtcbn07XG5cbkNoYXJTY2FubmVyc1sweDNFXSA9IHAgPT4ge1xuICBpZiAocC5uZXh0KCkgIT09IDB4M0QpIHtcbiAgICByZXR1cm4gVCRHdDtcbiAgfVxuICBwLm5leHQoKTtcbiAgcmV0dXJuIFQkR3RFcTtcbn07XG5cbkNoYXJTY2FubmVyc1sweDI1XSA9IHJldHVyblRva2VuKFQkUGVyY2VudCk7XG5DaGFyU2Nhbm5lcnNbMHgyOF0gPSByZXR1cm5Ub2tlbihUJExQYXJlbik7XG5DaGFyU2Nhbm5lcnNbMHgyOV0gPSByZXR1cm5Ub2tlbihUJFJQYXJlbik7XG5DaGFyU2Nhbm5lcnNbMHgyQV0gPSByZXR1cm5Ub2tlbihUJFN0YXIpO1xuQ2hhclNjYW5uZXJzWzB4MkJdID0gcmV0dXJuVG9rZW4oVCRQbHVzKTtcbkNoYXJTY2FubmVyc1sweDJDXSA9IHJldHVyblRva2VuKFQkQ29tbWEpO1xuQ2hhclNjYW5uZXJzWzB4MkRdID0gcmV0dXJuVG9rZW4oVCRNaW51cyk7XG5DaGFyU2Nhbm5lcnNbMHgyRl0gPSByZXR1cm5Ub2tlbihUJFNsYXNoKTtcbkNoYXJTY2FubmVyc1sweDNBXSA9IHJldHVyblRva2VuKFQkQ29sb24pO1xuQ2hhclNjYW5uZXJzWzB4M0ZdID0gcmV0dXJuVG9rZW4oVCRRdWVzdGlvbik7XG5DaGFyU2Nhbm5lcnNbMHg1Ql0gPSByZXR1cm5Ub2tlbihUJExCcmFja2V0KTtcbkNoYXJTY2FubmVyc1sweDVEXSA9IHJldHVyblRva2VuKFQkUkJyYWNrZXQpO1xuQ2hhclNjYW5uZXJzWzB4NUVdID0gcmV0dXJuVG9rZW4oVCRDYXJldCk7XG5DaGFyU2Nhbm5lcnNbMHg3Ql0gPSByZXR1cm5Ub2tlbihUJExCcmFjZSk7XG5DaGFyU2Nhbm5lcnNbMHg3RF0gPSByZXR1cm5Ub2tlbihUJFJCcmFjZSk7XG5cbmxldCBtYXBQcm90byA9IE1hcC5wcm90b3R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXBPYnNlcnZlcih0YXNrUXVldWUsIG1hcCkge1xuICByZXR1cm4gTW9kaWZ5TWFwT2JzZXJ2ZXIuZm9yKHRhc2tRdWV1ZSwgbWFwKTtcbn1cblxubGV0IE1vZGlmeU1hcE9ic2VydmVyID0gY2xhc3MgTW9kaWZ5TWFwT2JzZXJ2ZXIgZXh0ZW5kcyBNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3Rvcih0YXNrUXVldWUsIG1hcCkge1xuICAgIHN1cGVyKHRhc2tRdWV1ZSwgbWFwKTtcbiAgfVxuXG4gIHN0YXRpYyBmb3IodGFza1F1ZXVlLCBtYXApIHtcbiAgICBpZiAoISgnX19tYXBfb2JzZXJ2ZXJfXycgaW4gbWFwKSkge1xuICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShtYXAsICdfX21hcF9vYnNlcnZlcl9fJywge1xuICAgICAgICB2YWx1ZTogTW9kaWZ5TWFwT2JzZXJ2ZXIuY3JlYXRlKHRhc2tRdWV1ZSwgbWFwKSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwLl9fbWFwX29ic2VydmVyX187XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKHRhc2tRdWV1ZSwgbWFwKSB7XG4gICAgbGV0IG9ic2VydmVyID0gbmV3IE1vZGlmeU1hcE9ic2VydmVyKHRhc2tRdWV1ZSwgbWFwKTtcblxuICAgIGxldCBwcm90byA9IG1hcFByb3RvO1xuICAgIGlmIChwcm90by5zZXQgIT09IG1hcC5zZXQgfHwgcHJvdG8uZGVsZXRlICE9PSBtYXAuZGVsZXRlIHx8IHByb3RvLmNsZWFyICE9PSBtYXAuY2xlYXIpIHtcbiAgICAgIHByb3RvID0ge1xuICAgICAgICBzZXQ6IG1hcC5zZXQsXG4gICAgICAgIGRlbGV0ZTogbWFwLmRlbGV0ZSxcbiAgICAgICAgY2xlYXI6IG1hcC5jbGVhclxuICAgICAgfTtcbiAgICB9XG5cbiAgICBtYXAuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGhhc1ZhbHVlID0gbWFwLmhhcyhhcmd1bWVudHNbMF0pO1xuICAgICAgbGV0IHR5cGUgPSBoYXNWYWx1ZSA/ICd1cGRhdGUnIDogJ2FkZCc7XG4gICAgICBsZXQgb2xkVmFsdWUgPSBtYXAuZ2V0KGFyZ3VtZW50c1swXSk7XG4gICAgICBsZXQgbWV0aG9kQ2FsbFJlc3VsdCA9IHByb3RvLnNldC5hcHBseShtYXAsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoIWhhc1ZhbHVlIHx8IG9sZFZhbHVlICE9PSBtYXAuZ2V0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgb2JzZXJ2ZXIuYWRkQ2hhbmdlUmVjb3JkKHtcbiAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgIG9iamVjdDogbWFwLFxuICAgICAgICAgIGtleTogYXJndW1lbnRzWzBdLFxuICAgICAgICAgIG9sZFZhbHVlOiBvbGRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXRob2RDYWxsUmVzdWx0O1xuICAgIH07XG5cbiAgICBtYXAuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGhhc1ZhbHVlID0gbWFwLmhhcyhhcmd1bWVudHNbMF0pO1xuICAgICAgbGV0IG9sZFZhbHVlID0gbWFwLmdldChhcmd1bWVudHNbMF0pO1xuICAgICAgbGV0IG1ldGhvZENhbGxSZXN1bHQgPSBwcm90by5kZWxldGUuYXBwbHkobWFwLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgIG9ic2VydmVyLmFkZENoYW5nZVJlY29yZCh7XG4gICAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgICAgb2JqZWN0OiBtYXAsXG4gICAgICAgICAga2V5OiBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgb2xkVmFsdWU6IG9sZFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgfTtcblxuICAgIG1hcC5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtZXRob2RDYWxsUmVzdWx0ID0gcHJvdG8uY2xlYXIuYXBwbHkobWFwLCBhcmd1bWVudHMpO1xuICAgICAgb2JzZXJ2ZXIuYWRkQ2hhbmdlUmVjb3JkKHtcbiAgICAgICAgdHlwZTogJ2NsZWFyJyxcbiAgICAgICAgb2JqZWN0OiBtYXBcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgfTtcblxuICAgIHJldHVybiBvYnNlcnZlcjtcbiAgfVxufTtcblxubGV0IGVtTG9nZ2VyID0gTG9nTWFuYWdlci5nZXRMb2dnZXIoJ2V2ZW50LW1hbmFnZXInKTtcblxuZnVuY3Rpb24gZmluZE9yaWdpbmFsRXZlbnRUYXJnZXQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LmNvbXBvc2VkUGF0aCAmJiBldmVudC5jb21wb3NlZFBhdGgoKVswXSB8fCBldmVudC5kZWVwUGF0aCAmJiBldmVudC5kZWVwUGF0aCgpWzBdIHx8IGV2ZW50LnBhdGggJiYgZXZlbnQucGF0aFswXSB8fCBldmVudC50YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcbiAgdGhpcy5zdGFuZGFyZFN0b3BQcm9wYWdhdGlvbigpO1xuICB0aGlzLnByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUNhcHR1cmVkRXZlbnQoZXZlbnQpIHtcbiAgZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XG4gIGxldCB0YXJnZXQgPSBmaW5kT3JpZ2luYWxFdmVudFRhcmdldChldmVudCk7XG5cbiAgbGV0IG9yZGVyZWRDYWxsYmFja3MgPSBbXTtcblxuICB3aGlsZSAodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5jYXB0dXJlZENhbGxiYWNrcykge1xuICAgICAgbGV0IGNhbGxiYWNrID0gdGFyZ2V0LmNhcHR1cmVkQ2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24gIT09IHN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgIGV2ZW50LnN0YW5kYXJkU3RvcFByb3BhZ2F0aW9uID0gZXZlbnQuc3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IHN0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBvcmRlcmVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcbiAgfVxuICBmb3IgKGxldCBpID0gb3JkZXJlZENhbGxiYWNrcy5sZW5ndGggLSAxOyBpID49IDAgJiYgIWV2ZW50LnByb3BhZ2F0aW9uU3RvcHBlZDsgaS0tKSB7XG4gICAgbGV0IG9yZGVyZWRDYWxsYmFjayA9IG9yZGVyZWRDYWxsYmFja3NbaV07XG4gICAgaWYgKCdoYW5kbGVFdmVudCcgaW4gb3JkZXJlZENhbGxiYWNrKSB7XG4gICAgICBvcmRlcmVkQ2FsbGJhY2suaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcmRlcmVkQ2FsbGJhY2soZXZlbnQpO1xuICAgIH1cbiAgfVxufVxuXG5sZXQgQ2FwdHVyZWRIYW5kbGVyRW50cnkgPSBjbGFzcyBDYXB0dXJlZEhhbmRsZXJFbnRyeSB7XG4gIGNvbnN0cnVjdG9yKGV2ZW50TmFtZSkge1xuICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgIHRoaXMuY291bnQgPSAwO1xuICB9XG5cbiAgaW5jcmVtZW50KCkge1xuICAgIHRoaXMuY291bnQrKztcblxuICAgIGlmICh0aGlzLmNvdW50ID09PSAxKSB7XG4gICAgICBET00uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgaGFuZGxlQ2FwdHVyZWRFdmVudCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZGVjcmVtZW50KCkge1xuICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICBlbUxvZ2dlci53YXJuKCdUaGUgc2FtZSBFdmVudExpc3RlbmVyIHdhcyBkaXNwb3NlZCBtdWx0aXBsZSB0aW1lcy4nKTtcbiAgICB9IGVsc2UgaWYgKC0tdGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsIGhhbmRsZUNhcHR1cmVkRXZlbnQsIHRydWUpO1xuICAgIH1cbiAgfVxufTtcbmxldCBEZWxlZ2F0ZUhhbmRsZXJFbnRyeSA9IGNsYXNzIERlbGVnYXRlSGFuZGxlckVudHJ5IHtcbiAgY29uc3RydWN0b3IoZXZlbnROYW1lLCBldmVudE1hbmFnZXIpIHtcbiAgICB0aGlzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB0aGlzLmV2ZW50TWFuYWdlciA9IGV2ZW50TWFuYWdlcjtcbiAgfVxuXG4gIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XG4gICAgbGV0IHRhcmdldCA9IGZpbmRPcmlnaW5hbEV2ZW50VGFyZ2V0KGV2ZW50KTtcblxuICAgIHdoaWxlICh0YXJnZXQgJiYgIWV2ZW50LnByb3BhZ2F0aW9uU3RvcHBlZCkge1xuICAgICAgaWYgKHRhcmdldC5kZWxlZ2F0ZWRDYWxsYmFja3MpIHtcbiAgICAgICAgbGV0IGNhbGxiYWNrID0gdGFyZ2V0LmRlbGVnYXRlZENhbGxiYWNrc1tldmVudC50eXBlXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbiAhPT0gc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5zdGFuZGFyZFN0b3BQcm9wYWdhdGlvbiA9IGV2ZW50LnN0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IHN0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCdoYW5kbGVFdmVudCcgaW4gY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmhhbmRsZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXJlbnQgPSB0YXJnZXQucGFyZW50Tm9kZTtcbiAgICAgIGNvbnN0IHNob3VsZEVzY2FwZVNoYWRvd1Jvb3QgPSB0aGlzLmV2ZW50TWFuYWdlci5lc2NhcGVTaGFkb3dSb290ICYmIHBhcmVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG5cbiAgICAgIHRhcmdldCA9IHNob3VsZEVzY2FwZVNoYWRvd1Jvb3QgPyBwYXJlbnQuaG9zdCA6IHBhcmVudDtcbiAgICB9XG4gIH1cblxuICBpbmNyZW1lbnQoKSB7XG4gICAgdGhpcy5jb3VudCsrO1xuXG4gICAgaWYgKHRoaXMuY291bnQgPT09IDEpIHtcbiAgICAgIERPTS5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCB0aGlzLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgZGVjcmVtZW50KCkge1xuICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICBlbUxvZ2dlci53YXJuKCdUaGUgc2FtZSBFdmVudExpc3RlbmVyIHdhcyBkaXNwb3NlZCBtdWx0aXBsZSB0aW1lcy4nKTtcbiAgICB9IGVsc2UgaWYgKC0tdGhpcy5jb3VudCA9PT0gMCkge1xuICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudE5hbWUsIHRoaXMsIGZhbHNlKTtcbiAgICB9XG4gIH1cbn07XG5sZXQgRGVsZWdhdGlvbkVudHJ5SGFuZGxlciA9IGNsYXNzIERlbGVnYXRpb25FbnRyeUhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihlbnRyeSwgbG9va3VwLCB0YXJnZXRFdmVudCkge1xuICAgIHRoaXMuZW50cnkgPSBlbnRyeTtcbiAgICB0aGlzLmxvb2t1cCA9IGxvb2t1cDtcbiAgICB0aGlzLnRhcmdldEV2ZW50ID0gdGFyZ2V0RXZlbnQ7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLmxvb2t1cFt0aGlzLnRhcmdldEV2ZW50XSkge1xuICAgICAgdGhpcy5lbnRyeS5kZWNyZW1lbnQoKTtcbiAgICAgIHRoaXMubG9va3VwW3RoaXMudGFyZ2V0RXZlbnRdID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1Mb2dnZXIud2FybignQ2FsbGluZyAuZGlzcG9zZSgpIG9uIGFscmVhZHkgZGlzcG9zZWQgZXZlbnRMaXN0ZW5lcicpO1xuICAgIH1cbiAgfVxufTtcbmxldCBFdmVudEhhbmRsZXIgPSBjbGFzcyBFdmVudEhhbmRsZXIge1xuICBjb25zdHJ1Y3Rvcih0YXJnZXQsIHRhcmdldEV2ZW50LCBjYWxsYmFjaykge1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMudGFyZ2V0RXZlbnQgPSB0YXJnZXRFdmVudDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy50YXJnZXRFdmVudCwgdGhpcy5jYWxsYmFjayk7XG4gIH1cbn07XG5sZXQgRGVmYXVsdEV2ZW50U3RyYXRlZ3kgPSBjbGFzcyBEZWZhdWx0RXZlbnRTdHJhdGVneSB7XG5cbiAgY29uc3RydWN0b3IoZXZlbnRNYW5hZ2VyKSB7XG4gICAgdGhpcy5kZWxlZ2F0ZWRIYW5kbGVycyA9IHt9O1xuICAgIHRoaXMuY2FwdHVyZWRIYW5kbGVycyA9IHt9O1xuXG4gICAgdGhpcy5ldmVudE1hbmFnZXIgPSBldmVudE1hbmFnZXI7XG4gIH1cblxuICBzdWJzY3JpYmUodGFyZ2V0LCB0YXJnZXRFdmVudCwgY2FsbGJhY2ssIHN0cmF0ZWd5LCBkaXNwb3NhYmxlKSB7XG4gICAgbGV0IGRlbGVnYXRlZEhhbmRsZXJzO1xuICAgIGxldCBjYXB0dXJlZEhhbmRsZXJzO1xuICAgIGxldCBoYW5kbGVyRW50cnk7XG5cbiAgICBpZiAoc3RyYXRlZ3kgPT09IGRlbGVnYXRpb25TdHJhdGVneS5idWJibGluZykge1xuICAgICAgZGVsZWdhdGVkSGFuZGxlcnMgPSB0aGlzLmRlbGVnYXRlZEhhbmRsZXJzO1xuICAgICAgaGFuZGxlckVudHJ5ID0gZGVsZWdhdGVkSGFuZGxlcnNbdGFyZ2V0RXZlbnRdIHx8IChkZWxlZ2F0ZWRIYW5kbGVyc1t0YXJnZXRFdmVudF0gPSBuZXcgRGVsZWdhdGVIYW5kbGVyRW50cnkodGFyZ2V0RXZlbnQsIHRoaXMuZXZlbnRNYW5hZ2VyKSk7XG4gICAgICBsZXQgZGVsZWdhdGVkQ2FsbGJhY2tzID0gdGFyZ2V0LmRlbGVnYXRlZENhbGxiYWNrcyB8fCAodGFyZ2V0LmRlbGVnYXRlZENhbGxiYWNrcyA9IHt9KTtcbiAgICAgIGlmICghZGVsZWdhdGVkQ2FsbGJhY2tzW3RhcmdldEV2ZW50XSkge1xuICAgICAgICBoYW5kbGVyRW50cnkuaW5jcmVtZW50KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbUxvZ2dlci53YXJuKCdPdmVycmlkaW5nIHByZXZpb3VzIGNhbGxiYWNrIGZvciBldmVudCBsaXN0ZW5lcicsIHsgZXZlbnQ6IHRhcmdldEV2ZW50LCBjYWxsYmFjazogY2FsbGJhY2ssIHByZXZpb3VzQ2FsbGJhY2s6IGRlbGVnYXRlZENhbGxiYWNrc1t0YXJnZXRFdmVudF0gfSk7XG4gICAgICB9XG4gICAgICBkZWxlZ2F0ZWRDYWxsYmFja3NbdGFyZ2V0RXZlbnRdID0gY2FsbGJhY2s7XG5cbiAgICAgIGlmIChkaXNwb3NhYmxlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVsZWdhdGlvbkVudHJ5SGFuZGxlcihoYW5kbGVyRW50cnksIGRlbGVnYXRlZENhbGxiYWNrcywgdGFyZ2V0RXZlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBoYW5kbGVyRW50cnkuZGVjcmVtZW50KCk7XG4gICAgICAgIGRlbGVnYXRlZENhbGxiYWNrc1t0YXJnZXRFdmVudF0gPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHN0cmF0ZWd5ID09PSBkZWxlZ2F0aW9uU3RyYXRlZ3kuY2FwdHVyaW5nKSB7XG4gICAgICBjYXB0dXJlZEhhbmRsZXJzID0gdGhpcy5jYXB0dXJlZEhhbmRsZXJzO1xuICAgICAgaGFuZGxlckVudHJ5ID0gY2FwdHVyZWRIYW5kbGVyc1t0YXJnZXRFdmVudF0gfHwgKGNhcHR1cmVkSGFuZGxlcnNbdGFyZ2V0RXZlbnRdID0gbmV3IENhcHR1cmVkSGFuZGxlckVudHJ5KHRhcmdldEV2ZW50KSk7XG4gICAgICBsZXQgY2FwdHVyZWRDYWxsYmFja3MgPSB0YXJnZXQuY2FwdHVyZWRDYWxsYmFja3MgfHwgKHRhcmdldC5jYXB0dXJlZENhbGxiYWNrcyA9IHt9KTtcbiAgICAgIGlmICghY2FwdHVyZWRDYWxsYmFja3NbdGFyZ2V0RXZlbnRdKSB7XG4gICAgICAgIGhhbmRsZXJFbnRyeS5pbmNyZW1lbnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtTG9nZ2VyLmVycm9yKCdhbHJlYWR5IGhhdmUgYSBjYWxsYmFjayBmb3IgZXZlbnQnLCB7IGV2ZW50OiB0YXJnZXRFdmVudCwgY2FsbGJhY2s6IGNhbGxiYWNrIH0pO1xuICAgICAgfVxuICAgICAgY2FwdHVyZWRDYWxsYmFja3NbdGFyZ2V0RXZlbnRdID0gY2FsbGJhY2s7XG5cbiAgICAgIGlmIChkaXNwb3NhYmxlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVsZWdhdGlvbkVudHJ5SGFuZGxlcihoYW5kbGVyRW50cnksIGNhcHR1cmVkQ2FsbGJhY2tzLCB0YXJnZXRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhhbmRsZXJFbnRyeS5kZWNyZW1lbnQoKTtcbiAgICAgICAgY2FwdHVyZWRDYWxsYmFja3NbdGFyZ2V0RXZlbnRdID0gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodGFyZ2V0RXZlbnQsIGNhbGxiYWNrKTtcblxuICAgIGlmIChkaXNwb3NhYmxlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gbmV3IEV2ZW50SGFuZGxlcih0YXJnZXQsIHRhcmdldEV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRhcmdldEV2ZW50LCBjYWxsYmFjayk7XG4gICAgfTtcbiAgfVxufTtcblxuXG5leHBvcnQgY29uc3QgZGVsZWdhdGlvblN0cmF0ZWd5ID0ge1xuICBub25lOiAwLFxuICBjYXB0dXJpbmc6IDEsXG4gIGJ1YmJsaW5nOiAyXG59O1xuXG5leHBvcnQgbGV0IEV2ZW50TWFuYWdlciA9IGNsYXNzIEV2ZW50TWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKGVzY2FwZVNoYWRvd1Jvb3QgPSBmYWxzZSkge1xuICAgIHRoaXMuZWxlbWVudEhhbmRsZXJMb29rdXAgPSB7fTtcbiAgICB0aGlzLmV2ZW50U3RyYXRlZ3lMb29rdXAgPSB7fTtcbiAgICB0aGlzLmVzY2FwZVNoYWRvd1Jvb3QgPSBlc2NhcGVTaGFkb3dSb290O1xuXG4gICAgdGhpcy5yZWdpc3RlckVsZW1lbnRDb25maWcoe1xuICAgICAgdGFnTmFtZTogJ2lucHV0JyxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdmFsdWU6IFsnY2hhbmdlJywgJ2lucHV0J10sXG4gICAgICAgIGNoZWNrZWQ6IFsnY2hhbmdlJywgJ2lucHV0J10sXG4gICAgICAgIGZpbGVzOiBbJ2NoYW5nZScsICdpbnB1dCddXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyRWxlbWVudENvbmZpZyh7XG4gICAgICB0YWdOYW1lOiAndGV4dGFyZWEnLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICB2YWx1ZTogWydjaGFuZ2UnLCAnaW5wdXQnXVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlckVsZW1lbnRDb25maWcoe1xuICAgICAgdGFnTmFtZTogJ3NlbGVjdCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHZhbHVlOiBbJ2NoYW5nZSddXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyRWxlbWVudENvbmZpZyh7XG4gICAgICB0YWdOYW1lOiAnY29udGVudCBlZGl0YWJsZScsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHZhbHVlOiBbJ2NoYW5nZScsICdpbnB1dCcsICdibHVyJywgJ2tleXVwJywgJ3Bhc3RlJ11cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMucmVnaXN0ZXJFbGVtZW50Q29uZmlnKHtcbiAgICAgIHRhZ05hbWU6ICdzY3JvbGxhYmxlIGVsZW1lbnQnLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBzY3JvbGxUb3A6IFsnc2Nyb2xsJ10sXG4gICAgICAgIHNjcm9sbExlZnQ6IFsnc2Nyb2xsJ11cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuZGVmYXVsdEV2ZW50U3RyYXRlZ3kgPSBuZXcgRGVmYXVsdEV2ZW50U3RyYXRlZ3kodGhpcyk7XG4gIH1cblxuICByZWdpc3RlckVsZW1lbnRDb25maWcoY29uZmlnKSB7XG4gICAgbGV0IHRhZ05hbWUgPSBjb25maWcudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBwcm9wZXJ0aWVzID0gY29uZmlnLnByb3BlcnRpZXM7XG4gICAgbGV0IHByb3BlcnR5TmFtZTtcblxuICAgIGxldCBsb29rdXAgPSB0aGlzLmVsZW1lbnRIYW5kbGVyTG9va3VwW3RhZ05hbWVdID0ge307XG5cbiAgICBmb3IgKHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIGxvb2t1cFtwcm9wZXJ0eU5hbWVdID0gcHJvcGVydGllc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyRXZlbnRTdHJhdGVneShldmVudE5hbWUsIHN0cmF0ZWd5KSB7XG4gICAgdGhpcy5ldmVudFN0cmF0ZWd5TG9va3VwW2V2ZW50TmFtZV0gPSBzdHJhdGVneTtcbiAgfVxuXG4gIGdldEVsZW1lbnRIYW5kbGVyKHRhcmdldCwgcHJvcGVydHlOYW1lKSB7XG4gICAgbGV0IHRhZ05hbWU7XG4gICAgbGV0IGxvb2t1cCA9IHRoaXMuZWxlbWVudEhhbmRsZXJMb29rdXA7XG5cbiAgICBpZiAodGFyZ2V0LnRhZ05hbWUpIHtcbiAgICAgIHRhZ05hbWUgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBpZiAobG9va3VwW3RhZ05hbWVdICYmIGxvb2t1cFt0YWdOYW1lXVtwcm9wZXJ0eU5hbWVdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXZlbnRTdWJzY3JpYmVyKGxvb2t1cFt0YWdOYW1lXVtwcm9wZXJ0eU5hbWVdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3RleHRDb250ZW50JyB8fCBwcm9wZXJ0eU5hbWUgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXZlbnRTdWJzY3JpYmVyKGxvb2t1cFsnY29udGVudCBlZGl0YWJsZSddLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3Njcm9sbFRvcCcgfHwgcHJvcGVydHlOYW1lID09PSAnc2Nyb2xsTGVmdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFdmVudFN1YnNjcmliZXIobG9va3VwWydzY3JvbGxhYmxlIGVsZW1lbnQnXVtwcm9wZXJ0eU5hbWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXIodGFyZ2V0LCB0YXJnZXRFdmVudCwgY2FsbGJhY2tPckxpc3RlbmVyLCBkZWxlZ2F0ZSwgZGlzcG9zYWJsZSkge1xuICAgIHJldHVybiAodGhpcy5ldmVudFN0cmF0ZWd5TG9va3VwW3RhcmdldEV2ZW50XSB8fCB0aGlzLmRlZmF1bHRFdmVudFN0cmF0ZWd5KS5zdWJzY3JpYmUodGFyZ2V0LCB0YXJnZXRFdmVudCwgY2FsbGJhY2tPckxpc3RlbmVyLCBkZWxlZ2F0ZSwgZGlzcG9zYWJsZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgRXZlbnRTdWJzY3JpYmVyID0gY2xhc3MgRXZlbnRTdWJzY3JpYmVyIHtcbiAgY29uc3RydWN0b3IoZXZlbnRzKSB7XG4gICAgdGhpcy5ldmVudHMgPSBldmVudHM7XG4gICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmhhbmRsZXIgPSBudWxsO1xuICB9XG5cbiAgc3Vic2NyaWJlKGVsZW1lbnQsIGNhbGxiYWNrT3JMaXN0ZW5lcikge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5oYW5kbGVyID0gY2FsbGJhY2tPckxpc3RlbmVyO1xuXG4gICAgbGV0IGV2ZW50cyA9IHRoaXMuZXZlbnRzO1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGV2ZW50cy5sZW5ndGg7IGlpID4gaTsgKytpKSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCBjYWxsYmFja09yTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICBsZXQgY2FsbGJhY2tPckxpc3RlbmVyID0gdGhpcy5oYW5kbGVyO1xuICAgIGxldCBldmVudHMgPSB0aGlzLmV2ZW50cztcbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBldmVudHMubGVuZ3RoOyBpaSA+IGk7ICsraSkge1xuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50c1tpXSwgY2FsbGJhY2tPckxpc3RlbmVyKTtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy5oYW5kbGVyID0gbnVsbDtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBEaXJ0eUNoZWNrZXIgPSBjbGFzcyBEaXJ0eUNoZWNrZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnRyYWNrZWQgPSBbXTtcbiAgICB0aGlzLmNoZWNrRGVsYXkgPSAxMjA7XG4gIH1cblxuICBhZGRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgIGxldCB0cmFja2VkID0gdGhpcy50cmFja2VkO1xuXG4gICAgdHJhY2tlZC5wdXNoKHByb3BlcnR5KTtcblxuICAgIGlmICh0cmFja2VkLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5zY2hlZHVsZURpcnR5Q2hlY2soKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgIGxldCB0cmFja2VkID0gdGhpcy50cmFja2VkO1xuICAgIHRyYWNrZWQuc3BsaWNlKHRyYWNrZWQuaW5kZXhPZihwcm9wZXJ0eSksIDEpO1xuICB9XG5cbiAgc2NoZWR1bGVEaXJ0eUNoZWNrKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jaGVjaygpLCB0aGlzLmNoZWNrRGVsYXkpO1xuICB9XG5cbiAgY2hlY2soKSB7XG4gICAgbGV0IHRyYWNrZWQgPSB0aGlzLnRyYWNrZWQ7XG4gICAgbGV0IGkgPSB0cmFja2VkLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGxldCBjdXJyZW50ID0gdHJhY2tlZFtpXTtcblxuICAgICAgaWYgKGN1cnJlbnQuaXNEaXJ0eSgpKSB7XG4gICAgICAgIGN1cnJlbnQuY2FsbCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0cmFja2VkLmxlbmd0aCkge1xuICAgICAgdGhpcy5zY2hlZHVsZURpcnR5Q2hlY2soKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgRGlydHlDaGVja1Byb3BlcnR5ID0gKF9kZWM1ID0gc3Vic2NyaWJlckNvbGxlY3Rpb24oKSwgX2RlYzUoX2NsYXNzNSA9IGNsYXNzIERpcnR5Q2hlY2tQcm9wZXJ0eSB7XG4gIGNvbnN0cnVjdG9yKGRpcnR5Q2hlY2tlciwgb2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICB0aGlzLmRpcnR5Q2hlY2tlciA9IGRpcnR5Q2hlY2tlcjtcbiAgICB0aGlzLm9iaiA9IG9iajtcbiAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLm9ialt0aGlzLnByb3BlcnR5TmFtZV07XG4gIH1cblxuICBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXSA9IG5ld1ZhbHVlO1xuICB9XG5cbiAgY2FsbCgpIHtcbiAgICBsZXQgb2xkVmFsdWUgPSB0aGlzLm9sZFZhbHVlO1xuICAgIGxldCBuZXdWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblxuICAgIHRoaXMuY2FsbFN1YnNjcmliZXJzKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG5cbiAgICB0aGlzLm9sZFZhbHVlID0gbmV3VmFsdWU7XG4gIH1cblxuICBpc0RpcnR5KCkge1xuICAgIHJldHVybiB0aGlzLm9sZFZhbHVlICE9PSB0aGlzLm9ialt0aGlzLnByb3BlcnR5TmFtZV07XG4gIH1cblxuICBzdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICBpZiAoIXRoaXMuaGFzU3Vic2NyaWJlcnMoKSkge1xuICAgICAgdGhpcy5vbGRWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgIHRoaXMuZGlydHlDaGVja2VyLmFkZFByb3BlcnR5KHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFkZFN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xuICB9XG5cbiAgdW5zdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICBpZiAodGhpcy5yZW1vdmVTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKSAmJiAhdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLmRpcnR5Q2hlY2tlci5yZW1vdmVQcm9wZXJ0eSh0aGlzKTtcbiAgICB9XG4gIH1cbn0pIHx8IF9jbGFzczUpO1xuXG5jb25zdCBsb2dnZXIgPSBMb2dNYW5hZ2VyLmdldExvZ2dlcigncHJvcGVydHktb2JzZXJ2YXRpb24nKTtcblxuZXhwb3J0IGNvbnN0IHByb3BlcnR5QWNjZXNzb3IgPSB7XG4gIGdldFZhbHVlOiAob2JqLCBwcm9wZXJ0eU5hbWUpID0+IG9ialtwcm9wZXJ0eU5hbWVdLFxuICBzZXRWYWx1ZTogKHZhbHVlLCBvYmosIHByb3BlcnR5TmFtZSkgPT4ge1xuICAgIG9ialtwcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gIH1cbn07XG5cbmV4cG9ydCBsZXQgUHJpbWl0aXZlT2JzZXJ2ZXIgPSBjbGFzcyBQcmltaXRpdmVPYnNlcnZlciB7XG5cbiAgY29uc3RydWN0b3IocHJpbWl0aXZlLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICB0aGlzLmRvTm90Q2FjaGUgPSB0cnVlO1xuXG4gICAgdGhpcy5wcmltaXRpdmUgPSBwcmltaXRpdmU7XG4gICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wcmltaXRpdmVbdGhpcy5wcm9wZXJ0eU5hbWVdO1xuICB9XG5cbiAgc2V0VmFsdWUoKSB7XG4gICAgbGV0IHR5cGUgPSB0eXBlb2YgdGhpcy5wcmltaXRpdmU7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgJHt0aGlzLnByb3BlcnR5TmFtZX0gcHJvcGVydHkgb2YgYSAke3R5cGV9ICgke3RoaXMucHJpbWl0aXZlfSkgY2Fubm90IGJlIGFzc2lnbmVkLmApO1xuICB9XG5cbiAgc3Vic2NyaWJlKCkge31cblxuICB1bnN1YnNjcmliZSgpIHt9XG59O1xuXG5leHBvcnQgbGV0IFNldHRlck9ic2VydmVyID0gKF9kZWM2ID0gc3Vic2NyaWJlckNvbGxlY3Rpb24oKSwgX2RlYzYoX2NsYXNzNyA9IGNsYXNzIFNldHRlck9ic2VydmVyIHtcbiAgY29uc3RydWN0b3IodGFza1F1ZXVlLCBvYmosIHByb3BlcnR5TmFtZSkge1xuICAgIHRoaXMudGFza1F1ZXVlID0gdGFza1F1ZXVlO1xuICAgIHRoaXMub2JqID0gb2JqO1xuICAgIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICAgIHRoaXMucXVldWVkID0gZmFsc2U7XG4gICAgdGhpcy5vYnNlcnZpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLm9ialt0aGlzLnByb3BlcnR5TmFtZV07XG4gIH1cblxuICBzZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgIHRoaXMub2JqW3RoaXMucHJvcGVydHlOYW1lXSA9IG5ld1ZhbHVlO1xuICB9XG5cbiAgZ2V0dGVyVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFZhbHVlO1xuICB9XG5cbiAgc2V0dGVyVmFsdWUobmV3VmFsdWUpIHtcbiAgICBsZXQgb2xkVmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZTtcblxuICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIGlmICghdGhpcy5xdWV1ZWQpIHtcbiAgICAgICAgdGhpcy5vbGRWYWx1ZSA9IG9sZFZhbHVlO1xuICAgICAgICB0aGlzLnF1ZXVlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudGFza1F1ZXVlLnF1ZXVlTWljcm9UYXNrKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGNhbGwoKSB7XG4gICAgbGV0IG9sZFZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcbiAgICBsZXQgbmV3VmFsdWUgPSB0aGlzLm9sZFZhbHVlID0gdGhpcy5jdXJyZW50VmFsdWU7XG5cbiAgICB0aGlzLnF1ZXVlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5jYWxsU3Vic2NyaWJlcnMobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgfVxuXG4gIHN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIGlmICghdGhpcy5vYnNlcnZpbmcpIHtcbiAgICAgIHRoaXMuY29udmVydFByb3BlcnR5KCk7XG4gICAgfVxuICAgIHRoaXMuYWRkU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gIH1cblxuICB1bnN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIHRoaXMucmVtb3ZlU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gIH1cblxuICBjb252ZXJ0UHJvcGVydHkoKSB7XG4gICAgdGhpcy5vYnNlcnZpbmcgPSB0cnVlO1xuICAgIHRoaXMuY3VycmVudFZhbHVlID0gdGhpcy5vYmpbdGhpcy5wcm9wZXJ0eU5hbWVdO1xuICAgIHRoaXMuc2V0VmFsdWUgPSB0aGlzLnNldHRlclZhbHVlO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLmdldHRlclZhbHVlO1xuXG4gICAgaWYgKCFSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRoaXMub2JqLCB0aGlzLnByb3BlcnR5TmFtZSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdGhpcy5wcm9wZXJ0eU5hbWUgaW4gdGhpcy5vYmogPyB0aGlzLm9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSh0aGlzLnByb3BlcnR5TmFtZSkgOiB0cnVlLFxuICAgICAgZ2V0OiB0aGlzLmdldFZhbHVlLmJpbmQodGhpcyksXG4gICAgICBzZXQ6IHRoaXMuc2V0VmFsdWUuYmluZCh0aGlzKVxuICAgIH0pKSB7XG4gICAgICBsb2dnZXIud2FybihgQ2Fubm90IG9ic2VydmUgcHJvcGVydHkgJyR7dGhpcy5wcm9wZXJ0eU5hbWV9JyBvZiBvYmplY3RgLCB0aGlzLm9iaik7XG4gICAgfVxuICB9XG59KSB8fCBfY2xhc3M3KTtcblxuZXhwb3J0IGxldCBYTGlua0F0dHJpYnV0ZU9ic2VydmVyID0gY2xhc3MgWExpbmtBdHRyaWJ1dGVPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIHByb3BlcnR5TmFtZSwgYXR0cmlidXRlTmFtZSkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgdGhpcy5hdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlTmFtZTtcbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCB0aGlzLmF0dHJpYnV0ZU5hbWUpO1xuICB9XG5cbiAgc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgdGhpcy5hdHRyaWJ1dGVOYW1lLCBuZXdWYWx1ZSk7XG4gIH1cblxuICBzdWJzY3JpYmUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBPYnNlcnZhdGlvbiBvZiBhIFwiJHt0aGlzLmVsZW1lbnQubm9kZU5hbWV9XCIgZWxlbWVudFxcJ3MgXCIke3RoaXMucHJvcGVydHlOYW1lfVwiIHByb3BlcnR5IGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBkYXRhQXR0cmlidXRlQWNjZXNzb3IgPSB7XG4gIGdldFZhbHVlOiAob2JqLCBwcm9wZXJ0eU5hbWUpID0+IG9iai5nZXRBdHRyaWJ1dGUocHJvcGVydHlOYW1lKSxcbiAgc2V0VmFsdWU6ICh2YWx1ZSwgb2JqLCBwcm9wZXJ0eU5hbWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eU5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmouc2V0QXR0cmlidXRlKHByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGxldCBEYXRhQXR0cmlidXRlT2JzZXJ2ZXIgPSBjbGFzcyBEYXRhQXR0cmlidXRlT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICB9XG5cbiAgZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUodGhpcy5wcm9wZXJ0eU5hbWUpO1xuICB9XG5cbiAgc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICBpZiAobmV3VmFsdWUgPT09IG51bGwgfHwgbmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5wcm9wZXJ0eU5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLnByb3BlcnR5TmFtZSwgbmV3VmFsdWUpO1xuICB9XG5cbiAgc3Vic2NyaWJlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgT2JzZXJ2YXRpb24gb2YgYSBcIiR7dGhpcy5lbGVtZW50Lm5vZGVOYW1lfVwiIGVsZW1lbnRcXCdzIFwiJHt0aGlzLnByb3BlcnR5TmFtZX1cIiBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IFN0eWxlT2JzZXJ2ZXIgPSBjbGFzcyBTdHlsZU9ic2VydmVyIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcblxuICAgIHRoaXMuc3R5bGVzID0gbnVsbDtcbiAgICB0aGlzLnZlcnNpb24gPSAwO1xuICB9XG5cbiAgZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsZS5jc3NUZXh0O1xuICB9XG5cbiAgX3NldFByb3BlcnR5KHN0eWxlLCB2YWx1ZSkge1xuICAgIGxldCBwcmlvcml0eSA9ICcnO1xuXG4gICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlLmluZGV4T2YgPT09ICdmdW5jdGlvbicgJiYgdmFsdWUuaW5kZXhPZignIWltcG9ydGFudCcpICE9PSAtMSkge1xuICAgICAgcHJpb3JpdHkgPSAnaW1wb3J0YW50JztcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgnIWltcG9ydGFudCcsICcnKTtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KHN0eWxlLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9XG5cbiAgc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICBsZXQgc3R5bGVzID0gdGhpcy5zdHlsZXMgfHwge307XG4gICAgbGV0IHN0eWxlO1xuICAgIGxldCB2ZXJzaW9uID0gdGhpcy52ZXJzaW9uO1xuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSBudWxsICYmIG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChuZXdWYWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIGZvciAoc3R5bGUgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgICBpZiAobmV3VmFsdWUuaGFzT3duUHJvcGVydHkoc3R5bGUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlW3N0eWxlXTtcbiAgICAgICAgICAgIHN0eWxlID0gc3R5bGUucmVwbGFjZSgvKFtBLVpdKS9nLCBtID0+ICctJyArIG0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICBzdHlsZXNbc3R5bGVdID0gdmVyc2lvbjtcbiAgICAgICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHN0eWxlLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgICAgICBsZXQgcnggPSAvXFxzKihbXFx3XFwtXSspXFxzKjpcXHMqKCg/Oig/OltcXHdcXC1dK1xcKFxccyooPzpcIig/OlxcXFxcInxbXlwiXSkqXCJ8Jyg/OlxcXFwnfFteJ10pKid8W1xcd1xcLV0rXFwoXFxzKig/Ol5cIig/OlxcXFxcInxbXlwiXSkqXCJ8Jyg/OlxcXFwnfFteJ10pKid8W15cXCldKilcXCksP3xbXlxcKV0qKVxcKSw/fFwiKD86XFxcXFwifFteXCJdKSpcInwnKD86XFxcXCd8W14nXSkqJ3xbXjtdKiksP1xccyopKyk7Py9nO1xuICAgICAgICBsZXQgcGFpcjtcbiAgICAgICAgd2hpbGUgKChwYWlyID0gcnguZXhlYyhuZXdWYWx1ZSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgc3R5bGUgPSBwYWlyWzFdO1xuICAgICAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN0eWxlc1tzdHlsZV0gPSB2ZXJzaW9uO1xuICAgICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHN0eWxlLCBwYWlyWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzO1xuICAgIHRoaXMudmVyc2lvbiArPSAxO1xuXG4gICAgaWYgKHZlcnNpb24gPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2ZXJzaW9uIC09IDE7XG4gICAgZm9yIChzdHlsZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlKSB8fCBzdHlsZXNbc3R5bGVdICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoc3R5bGUpO1xuICAgIH1cbiAgfVxuXG4gIHN1YnNjcmliZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE9ic2VydmF0aW9uIG9mIGEgXCIke3RoaXMuZWxlbWVudC5ub2RlTmFtZX1cIiBlbGVtZW50XFwncyBcIiR7dGhpcy5wcm9wZXJ0eU5hbWV9XCIgcHJvcGVydHkgaXMgbm90IHN1cHBvcnRlZC5gKTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBWYWx1ZUF0dHJpYnV0ZU9ic2VydmVyID0gKF9kZWM3ID0gc3Vic2NyaWJlckNvbGxlY3Rpb24oKSwgX2RlYzcoX2NsYXNzOCA9IGNsYXNzIFZhbHVlQXR0cmlidXRlT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBwcm9wZXJ0eU5hbWUsIGhhbmRsZXIpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ2ZpbGVzJykge1xuICAgICAgdGhpcy5zZXRWYWx1ZSA9ICgpID0+IHt9O1xuICAgIH1cbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRbdGhpcy5wcm9wZXJ0eU5hbWVdO1xuICB9XG5cbiAgc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQgfHwgbmV3VmFsdWUgPT09IG51bGwgPyAnJyA6IG5ld1ZhbHVlO1xuICAgIGlmICh0aGlzLmVsZW1lbnRbdGhpcy5wcm9wZXJ0eU5hbWVdICE9PSBuZXdWYWx1ZSkge1xuICAgICAgdGhpcy5lbGVtZW50W3RoaXMucHJvcGVydHlOYW1lXSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5ub3RpZnkoKTtcbiAgICB9XG4gIH1cblxuICBub3RpZnkoKSB7XG4gICAgbGV0IG9sZFZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcbiAgICBsZXQgbmV3VmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cbiAgICB0aGlzLmNhbGxTdWJzY3JpYmVycyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuXG4gICAgdGhpcy5vbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICB9XG5cbiAgaGFuZGxlRXZlbnQoKSB7XG4gICAgdGhpcy5ub3RpZnkoKTtcbiAgfVxuXG4gIHN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIGlmICghdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLm9sZFZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgdGhpcy5oYW5kbGVyLnN1YnNjcmliZSh0aGlzLmVsZW1lbnQsIHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuYWRkU3Vic2NyaWJlcihjb250ZXh0LCBjYWxsYWJsZSk7XG4gIH1cblxuICB1bnN1YnNjcmliZShjb250ZXh0LCBjYWxsYWJsZSkge1xuICAgIGlmICh0aGlzLnJlbW92ZVN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpICYmICF0aGlzLmhhc1N1YnNjcmliZXJzKCkpIHtcbiAgICAgIHRoaXMuaGFuZGxlci5kaXNwb3NlKCk7XG4gICAgfVxuICB9XG59KSB8fCBfY2xhc3M4KTtcblxuY29uc3QgY2hlY2tlZEFycmF5Q29udGV4dCA9ICdDaGVja2VkT2JzZXJ2ZXI6YXJyYXknO1xuY29uc3QgY2hlY2tlZFZhbHVlQ29udGV4dCA9ICdDaGVja2VkT2JzZXJ2ZXI6dmFsdWUnO1xuXG5leHBvcnQgbGV0IENoZWNrZWRPYnNlcnZlciA9IChfZGVjOCA9IHN1YnNjcmliZXJDb2xsZWN0aW9uKCksIF9kZWM4KF9jbGFzczkgPSBjbGFzcyBDaGVja2VkT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBoYW5kbGVyLCBvYnNlcnZlckxvY2F0b3IpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbFN5bmMgJiYgdGhpcy52YWx1ZSA9PT0gbmV3VmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcnJheU9ic2VydmVyKSB7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIudW5zdWJzY3JpYmUoY2hlY2tlZEFycmF5Q29udGV4dCwgdGhpcyk7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmVsZW1lbnQudHlwZSA9PT0gJ2NoZWNrYm94JyAmJiBBcnJheS5pc0FycmF5KG5ld1ZhbHVlKSkge1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyID0gdGhpcy5vYnNlcnZlckxvY2F0b3IuZ2V0QXJyYXlPYnNlcnZlcihuZXdWYWx1ZSk7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIuc3Vic2NyaWJlKGNoZWNrZWRBcnJheUNvbnRleHQsIHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMub2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB0aGlzLnN5bmNocm9uaXplRWxlbWVudCgpO1xuICAgIHRoaXMubm90aWZ5KCk7XG5cbiAgICBpZiAoIXRoaXMuaW5pdGlhbFN5bmMpIHtcbiAgICAgIHRoaXMuaW5pdGlhbFN5bmMgPSB0cnVlO1xuICAgICAgdGhpcy5vYnNlcnZlckxvY2F0b3IudGFza1F1ZXVlLnF1ZXVlTWljcm9UYXNrKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGwoY29udGV4dCwgc3BsaWNlcykge1xuICAgIHRoaXMuc3luY2hyb25pemVFbGVtZW50KCk7XG5cbiAgICBpZiAoIXRoaXMudmFsdWVPYnNlcnZlcikge1xuICAgICAgdGhpcy52YWx1ZU9ic2VydmVyID0gdGhpcy5lbGVtZW50Ll9fb2JzZXJ2ZXJzX18ubW9kZWwgfHwgdGhpcy5lbGVtZW50Ll9fb2JzZXJ2ZXJzX18udmFsdWU7XG4gICAgICBpZiAodGhpcy52YWx1ZU9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMudmFsdWVPYnNlcnZlci5zdWJzY3JpYmUoY2hlY2tlZFZhbHVlQ29udGV4dCwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3luY2hyb25pemVFbGVtZW50KCkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgbGV0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgbGV0IGVsZW1lbnRWYWx1ZSA9IGVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ21vZGVsJykgPyBlbGVtZW50Lm1vZGVsIDogZWxlbWVudC52YWx1ZTtcbiAgICBsZXQgaXNSYWRpbyA9IGVsZW1lbnQudHlwZSA9PT0gJ3JhZGlvJztcbiAgICBsZXQgbWF0Y2hlciA9IGVsZW1lbnQubWF0Y2hlciB8fCAoKGEsIGIpID0+IGEgPT09IGIpO1xuXG4gICAgZWxlbWVudC5jaGVja2VkID0gaXNSYWRpbyAmJiAhIW1hdGNoZXIodmFsdWUsIGVsZW1lbnRWYWx1ZSkgfHwgIWlzUmFkaW8gJiYgdmFsdWUgPT09IHRydWUgfHwgIWlzUmFkaW8gJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZmluZEluZGV4KGl0ZW0gPT4gISFtYXRjaGVyKGl0ZW0sIGVsZW1lbnRWYWx1ZSkpICE9PSAtMTtcbiAgfVxuXG4gIHN5bmNocm9uaXplVmFsdWUoKSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBsZXQgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICBsZXQgZWxlbWVudFZhbHVlID0gZWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnbW9kZWwnKSA/IGVsZW1lbnQubW9kZWwgOiBlbGVtZW50LnZhbHVlO1xuICAgIGxldCBpbmRleDtcbiAgICBsZXQgbWF0Y2hlciA9IGVsZW1lbnQubWF0Y2hlciB8fCAoKGEsIGIpID0+IGEgPT09IGIpO1xuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGluZGV4ID0gdmFsdWUuZmluZEluZGV4KGl0ZW0gPT4gISFtYXRjaGVyKGl0ZW0sIGVsZW1lbnRWYWx1ZSkpO1xuICAgICAgICBpZiAoZWxlbWVudC5jaGVja2VkICYmIGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIHZhbHVlLnB1c2goZWxlbWVudFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICghZWxlbWVudC5jaGVja2VkICYmIGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHZhbHVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gZWxlbWVudC5jaGVja2VkO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudC5jaGVja2VkKSB7XG4gICAgICB2YWx1ZSA9IGVsZW1lbnRWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMub2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm5vdGlmeSgpO1xuICB9XG5cbiAgbm90aWZ5KCkge1xuICAgIGxldCBvbGRWYWx1ZSA9IHRoaXMub2xkVmFsdWU7XG4gICAgbGV0IG5ld1ZhbHVlID0gdGhpcy52YWx1ZTtcblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gb2xkVmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNhbGxTdWJzY3JpYmVycyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICB9XG5cbiAgaGFuZGxlRXZlbnQoKSB7XG4gICAgdGhpcy5zeW5jaHJvbml6ZVZhbHVlKCk7XG4gIH1cblxuICBzdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICBpZiAoIXRoaXMuaGFzU3Vic2NyaWJlcnMoKSkge1xuICAgICAgdGhpcy5oYW5kbGVyLnN1YnNjcmliZSh0aGlzLmVsZW1lbnQsIHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFkZFN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xuICB9XG5cbiAgdW5zdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICBpZiAodGhpcy5yZW1vdmVTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKSAmJiAhdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLmhhbmRsZXIuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIHVuYmluZCgpIHtcbiAgICBpZiAodGhpcy5hcnJheU9ic2VydmVyKSB7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIudW5zdWJzY3JpYmUoY2hlY2tlZEFycmF5Q29udGV4dCwgdGhpcyk7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZU9ic2VydmVyKSB7XG4gICAgICB0aGlzLnZhbHVlT2JzZXJ2ZXIudW5zdWJzY3JpYmUoY2hlY2tlZFZhbHVlQ29udGV4dCwgdGhpcyk7XG4gICAgfVxuICB9XG59KSB8fCBfY2xhc3M5KTtcblxuY29uc3Qgc2VsZWN0QXJyYXlDb250ZXh0ID0gJ1NlbGVjdFZhbHVlT2JzZXJ2ZXI6YXJyYXknO1xuXG5leHBvcnQgbGV0IFNlbGVjdFZhbHVlT2JzZXJ2ZXIgPSAoX2RlYzkgPSBzdWJzY3JpYmVyQ29sbGVjdGlvbigpLCBfZGVjOShfY2xhc3MxMCA9IGNsYXNzIFNlbGVjdFZhbHVlT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBoYW5kbGVyLCBvYnNlcnZlckxvY2F0b3IpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgaWYgKG5ld1ZhbHVlICE9PSBudWxsICYmIG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5lbGVtZW50Lm11bHRpcGxlICYmICFBcnJheS5pc0FycmF5KG5ld1ZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IG51bGwgb3IgQXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBib3VuZCB0byBhIG11bHRpLXNlbGVjdC4nKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXJyYXlPYnNlcnZlcikge1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyLnVuc3Vic2NyaWJlKHNlbGVjdEFycmF5Q29udGV4dCwgdGhpcyk7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KG5ld1ZhbHVlKSkge1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyID0gdGhpcy5vYnNlcnZlckxvY2F0b3IuZ2V0QXJyYXlPYnNlcnZlcihuZXdWYWx1ZSk7XG4gICAgICB0aGlzLmFycmF5T2JzZXJ2ZXIuc3Vic2NyaWJlKHNlbGVjdEFycmF5Q29udGV4dCwgdGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5vbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIHRoaXMuc3luY2hyb25pemVPcHRpb25zKCk7XG4gICAgdGhpcy5ub3RpZnkoKTtcblxuICAgIGlmICghdGhpcy5pbml0aWFsU3luYykge1xuICAgICAgdGhpcy5pbml0aWFsU3luYyA9IHRydWU7XG4gICAgICB0aGlzLm9ic2VydmVyTG9jYXRvci50YXNrUXVldWUucXVldWVNaWNyb1Rhc2sodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbChjb250ZXh0LCBzcGxpY2VzKSB7XG4gICAgdGhpcy5zeW5jaHJvbml6ZU9wdGlvbnMoKTtcbiAgfVxuXG4gIHN5bmNocm9uaXplT3B0aW9ucygpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIGxldCBpc0FycmF5O1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBpc0FycmF5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZWxlbWVudC5vcHRpb25zO1xuICAgIGxldCBpID0gb3B0aW9ucy5sZW5ndGg7XG4gICAgbGV0IG1hdGNoZXIgPSB0aGlzLmVsZW1lbnQubWF0Y2hlciB8fCAoKGEsIGIpID0+IGEgPT09IGIpO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGxldCBvcHRpb24gPSBvcHRpb25zLml0ZW0oaSk7XG4gICAgICBsZXQgb3B0aW9uVmFsdWUgPSBvcHRpb24uaGFzT3duUHJvcGVydHkoJ21vZGVsJykgPyBvcHRpb24ubW9kZWwgOiBvcHRpb24udmFsdWU7XG4gICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZS5maW5kSW5kZXgoaXRlbSA9PiAhIW1hdGNoZXIob3B0aW9uVmFsdWUsIGl0ZW0pKSAhPT0gLTE7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgb3B0aW9uLnNlbGVjdGVkID0gISFtYXRjaGVyKG9wdGlvblZhbHVlLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgc3luY2hyb25pemVWYWx1ZSgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZWxlbWVudC5vcHRpb25zO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbGV0IHZhbHVlID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGxldCBvcHRpb24gPSBvcHRpb25zLml0ZW0oaSk7XG4gICAgICBpZiAoIW9wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlLnB1c2gob3B0aW9uLmhhc093blByb3BlcnR5KCdtb2RlbCcpID8gb3B0aW9uLm1vZGVsIDogb3B0aW9uLnZhbHVlKTtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZWxlbWVudC5tdWx0aXBsZSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgbGV0IG1hdGNoZXIgPSB0aGlzLmVsZW1lbnQubWF0Y2hlciB8fCAoKGEsIGIpID0+IGEgPT09IGIpO1xuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIGxldCBhID0gdGhpcy52YWx1ZVtpXTtcbiAgICAgICAgICBpZiAodmFsdWUuZmluZEluZGV4KGIgPT4gbWF0Y2hlcihhLCBiKSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIGxldCBhID0gdmFsdWVbaV07XG4gICAgICAgICAgaWYgKHRoaXMudmFsdWUuZmluZEluZGV4KGIgPT4gbWF0Y2hlcihhLCBiKSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLnB1c2goYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy52YWx1ZSkge1xuICAgICAgdGhpcy5vbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLm5vdGlmeSgpO1xuICAgIH1cbiAgfVxuXG4gIG5vdGlmeSgpIHtcbiAgICBsZXQgb2xkVmFsdWUgPSB0aGlzLm9sZFZhbHVlO1xuICAgIGxldCBuZXdWYWx1ZSA9IHRoaXMudmFsdWU7XG5cbiAgICB0aGlzLmNhbGxTdWJzY3JpYmVycyhuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICB9XG5cbiAgaGFuZGxlRXZlbnQoKSB7XG4gICAgdGhpcy5zeW5jaHJvbml6ZVZhbHVlKCk7XG4gIH1cblxuICBzdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICBpZiAoIXRoaXMuaGFzU3Vic2NyaWJlcnMoKSkge1xuICAgICAgdGhpcy5oYW5kbGVyLnN1YnNjcmliZSh0aGlzLmVsZW1lbnQsIHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFkZFN1YnNjcmliZXIoY29udGV4dCwgY2FsbGFibGUpO1xuICB9XG5cbiAgdW5zdWJzY3JpYmUoY29udGV4dCwgY2FsbGFibGUpIHtcbiAgICBpZiAodGhpcy5yZW1vdmVTdWJzY3JpYmVyKGNvbnRleHQsIGNhbGxhYmxlKSAmJiAhdGhpcy5oYXNTdWJzY3JpYmVycygpKSB7XG4gICAgICB0aGlzLmhhbmRsZXIuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGJpbmQoKSB7XG4gICAgdGhpcy5kb21PYnNlcnZlciA9IERPTS5jcmVhdGVNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgIHRoaXMuc3luY2hyb25pemVPcHRpb25zKCk7XG4gICAgICB0aGlzLnN5bmNocm9uaXplVmFsdWUoKTtcbiAgICB9KTtcbiAgICB0aGlzLmRvbU9ic2VydmVyLm9ic2VydmUodGhpcy5lbGVtZW50LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgfVxuXG4gIHVuYmluZCgpIHtcbiAgICB0aGlzLmRvbU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB0aGlzLmRvbU9ic2VydmVyID0gbnVsbDtcblxuICAgIGlmICh0aGlzLmFycmF5T2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuYXJyYXlPYnNlcnZlci51bnN1YnNjcmliZShzZWxlY3RBcnJheUNvbnRleHQsIHRoaXMpO1xuICAgICAgdGhpcy5hcnJheU9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn0pIHx8IF9jbGFzczEwKTtcblxuZXhwb3J0IGxldCBDbGFzc09ic2VydmVyID0gY2xhc3MgQ2xhc3NPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuZG9Ob3RDYWNoZSA9IHRydWU7XG4gICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIHNldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgbGV0IG5hbWVJbmRleCA9IHRoaXMubmFtZUluZGV4IHx8IHt9O1xuICAgIGxldCB2ZXJzaW9uID0gdGhpcy52ZXJzaW9uO1xuICAgIGxldCBuYW1lcztcbiAgICBsZXQgbmFtZTtcblxuICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCAmJiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIG5ld1ZhbHVlLmxlbmd0aCkge1xuICAgICAgbmFtZXMgPSBuZXdWYWx1ZS5zcGxpdCgvXFxzKy8pO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IG5hbWVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgICAgaWYgKG5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZUluZGV4W25hbWVdID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQobmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIHRoaXMubmFtZUluZGV4ID0gbmFtZUluZGV4O1xuICAgIHRoaXMudmVyc2lvbiArPSAxO1xuXG4gICAgaWYgKHZlcnNpb24gPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2ZXJzaW9uIC09IDE7XG4gICAgZm9yIChuYW1lIGluIG5hbWVJbmRleCkge1xuICAgICAgaWYgKCFuYW1lSW5kZXguaGFzT3duUHJvcGVydHkobmFtZSkgfHwgbmFtZUluZGV4W25hbWVdICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgfVxuICB9XG5cbiAgc3Vic2NyaWJlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgT2JzZXJ2YXRpb24gb2YgYSBcIiR7dGhpcy5lbGVtZW50Lm5vZGVOYW1lfVwiIGVsZW1lbnRcXCdzIFwiY2xhc3NcIiBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzRGVjbGFyZWREZXBlbmRlbmNpZXMoZGVzY3JpcHRvcikge1xuICByZXR1cm4gISEoZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmdldCAmJiBkZXNjcmlwdG9yLmdldC5kZXBlbmRlbmNpZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyZVByb3BlcnR5RGVwZW5kZW5jaWVzKGN0b3IsIHByb3BlcnR5TmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIGxldCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdG9yLnByb3RvdHlwZSwgcHJvcGVydHlOYW1lKTtcbiAgZGVzY3JpcHRvci5nZXQuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWRGcm9tKC4uLnJlc3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICAgIGRlc2NyaXB0b3IuZ2V0LmRlcGVuZGVuY2llcyA9IHJlc3Q7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH07XG59XG5cbmV4cG9ydCBsZXQgQ29tcHV0ZWRFeHByZXNzaW9uID0gY2xhc3MgQ29tcHV0ZWRFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGRlcGVuZGVuY2llcykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xuICAgIHRoaXMuaXNBc3NpZ25hYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIGV2YWx1YXRlKHNjb3BlLCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICByZXR1cm4gc2NvcGUuYmluZGluZ0NvbnRleHRbdGhpcy5uYW1lXTtcbiAgfVxuXG4gIGFzc2lnbihzY29wZSwgdmFsdWUpIHtcbiAgICBzY29wZS5iaW5kaW5nQ29udGV4dFt0aGlzLm5hbWVdID0gdmFsdWU7XG4gIH1cblxuICBhY2NlcHQodmlzaXRvcikge1xuICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICBjb25uZWN0KGJpbmRpbmcsIHNjb3BlKSB7XG4gICAgbGV0IGRlcGVuZGVuY2llcyA9IHRoaXMuZGVwZW5kZW5jaWVzO1xuICAgIGxldCBpID0gZGVwZW5kZW5jaWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBkZXBlbmRlbmNpZXNbaV0uY29ubmVjdChiaW5kaW5nLCBzY29wZSk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvciwgb2JzZXJ2ZXJMb2NhdG9yKSB7XG4gIGxldCBkZXBlbmRlbmNpZXMgPSBkZXNjcmlwdG9yLmdldC5kZXBlbmRlbmNpZXM7XG4gIGlmICghKGRlcGVuZGVuY2llcyBpbnN0YW5jZW9mIENvbXB1dGVkRXhwcmVzc2lvbikpIHtcbiAgICBsZXQgaSA9IGRlcGVuZGVuY2llcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgZGVwZW5kZW5jaWVzW2ldID0gb2JzZXJ2ZXJMb2NhdG9yLnBhcnNlci5wYXJzZShkZXBlbmRlbmNpZXNbaV0pO1xuICAgIH1cbiAgICBkZXBlbmRlbmNpZXMgPSBkZXNjcmlwdG9yLmdldC5kZXBlbmRlbmNpZXMgPSBuZXcgQ29tcHV0ZWRFeHByZXNzaW9uKHByb3BlcnR5TmFtZSwgZGVwZW5kZW5jaWVzKTtcbiAgfVxuXG4gIGxldCBzY29wZSA9IHsgYmluZGluZ0NvbnRleHQ6IG9iaiwgb3ZlcnJpZGVDb250ZXh0OiBjcmVhdGVPdmVycmlkZUNvbnRleHQob2JqKSB9O1xuICByZXR1cm4gbmV3IEV4cHJlc3Npb25PYnNlcnZlcihzY29wZSwgZGVwZW5kZW5jaWVzLCBvYnNlcnZlckxvY2F0b3IpO1xufVxuXG5sZXQgc3ZnRWxlbWVudHM7XG5sZXQgc3ZnUHJlc2VudGF0aW9uRWxlbWVudHM7XG5sZXQgc3ZnUHJlc2VudGF0aW9uQXR0cmlidXRlcztcbmxldCBzdmdBbmFseXplcjtcblxuaWYgKHR5cGVvZiBGRUFUVVJFX05PX1NWRyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgc3ZnRWxlbWVudHMgPSB7XG4gICAgYTogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndGFyZ2V0JywgJ3RyYW5zZm9ybScsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBhbHRHbHlwaDogWydjbGFzcycsICdkeCcsICdkeScsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2Zvcm1hdCcsICdnbHlwaFJlZicsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3JvdGF0ZScsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd4JywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgYWx0R2x5cGhEZWY6IFsnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgYWx0R2x5cGhJdGVtOiBbJ2lkJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGFuaW1hdGU6IFsnYWNjdW11bGF0ZScsICdhZGRpdGl2ZScsICdhdHRyaWJ1dGVOYW1lJywgJ2F0dHJpYnV0ZVR5cGUnLCAnYmVnaW4nLCAnYnknLCAnY2FsY01vZGUnLCAnZHVyJywgJ2VuZCcsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2ZpbGwnLCAnZnJvbScsICdpZCcsICdrZXlTcGxpbmVzJywgJ2tleVRpbWVzJywgJ21heCcsICdtaW4nLCAnb25iZWdpbicsICdvbmVuZCcsICdvbmxvYWQnLCAnb25yZXBlYXQnLCAncmVwZWF0Q291bnQnLCAncmVwZWF0RHVyJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3Jlc3RhcnQnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndG8nLCAndmFsdWVzJywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGFuaW1hdGVDb2xvcjogWydhY2N1bXVsYXRlJywgJ2FkZGl0aXZlJywgJ2F0dHJpYnV0ZU5hbWUnLCAnYXR0cmlidXRlVHlwZScsICdiZWdpbicsICdieScsICdjYWxjTW9kZScsICdkdXInLCAnZW5kJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZmlsbCcsICdmcm9tJywgJ2lkJywgJ2tleVNwbGluZXMnLCAna2V5VGltZXMnLCAnbWF4JywgJ21pbicsICdvbmJlZ2luJywgJ29uZW5kJywgJ29ubG9hZCcsICdvbnJlcGVhdCcsICdyZXBlYXRDb3VudCcsICdyZXBlYXREdXInLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncmVzdGFydCcsICdzeXN0ZW1MYW5ndWFnZScsICd0bycsICd2YWx1ZXMnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgYW5pbWF0ZU1vdGlvbjogWydhY2N1bXVsYXRlJywgJ2FkZGl0aXZlJywgJ2JlZ2luJywgJ2J5JywgJ2NhbGNNb2RlJywgJ2R1cicsICdlbmQnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmaWxsJywgJ2Zyb20nLCAnaWQnLCAna2V5UG9pbnRzJywgJ2tleVNwbGluZXMnLCAna2V5VGltZXMnLCAnbWF4JywgJ21pbicsICdvbmJlZ2luJywgJ29uZW5kJywgJ29ubG9hZCcsICdvbnJlcGVhdCcsICdvcmlnaW4nLCAncGF0aCcsICdyZXBlYXRDb3VudCcsICdyZXBlYXREdXInLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncmVzdGFydCcsICdyb3RhdGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndG8nLCAndmFsdWVzJywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGFuaW1hdGVUcmFuc2Zvcm06IFsnYWNjdW11bGF0ZScsICdhZGRpdGl2ZScsICdhdHRyaWJ1dGVOYW1lJywgJ2F0dHJpYnV0ZVR5cGUnLCAnYmVnaW4nLCAnYnknLCAnY2FsY01vZGUnLCAnZHVyJywgJ2VuZCcsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2ZpbGwnLCAnZnJvbScsICdpZCcsICdrZXlTcGxpbmVzJywgJ2tleVRpbWVzJywgJ21heCcsICdtaW4nLCAnb25iZWdpbicsICdvbmVuZCcsICdvbmxvYWQnLCAnb25yZXBlYXQnLCAncmVwZWF0Q291bnQnLCAncmVwZWF0RHVyJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3Jlc3RhcnQnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndG8nLCAndHlwZScsICd2YWx1ZXMnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgY2lyY2xlOiBbJ2NsYXNzJywgJ2N4JywgJ2N5JywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBjbGlwUGF0aDogWydjbGFzcycsICdjbGlwUGF0aFVuaXRzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgICdjb2xvci1wcm9maWxlJzogWydpZCcsICdsb2NhbCcsICduYW1lJywgJ3JlbmRlcmluZy1pbnRlbnQnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgY3Vyc29yOiBbJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAneCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGRlZnM6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBkZXNjOiBbJ2NsYXNzJywgJ2lkJywgJ3N0eWxlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGVsbGlwc2U6IFsnY2xhc3MnLCAnY3gnLCAnY3knLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3J4JywgJ3J5JywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmZUJsZW5kOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdpbjInLCAnbW9kZScsICdyZXN1bHQnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlQ29sb3JNYXRyaXg6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ3Jlc3VsdCcsICdzdHlsZScsICd0eXBlJywgJ3ZhbHVlcycsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVDb21wb25lbnRUcmFuc2ZlcjogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZUNvbXBvc2l0ZTogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAnaW4yJywgJ2sxJywgJ2syJywgJ2szJywgJ2s0JywgJ29wZXJhdG9yJywgJ3Jlc3VsdCcsICdzdHlsZScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVDb252b2x2ZU1hdHJpeDogWydiaWFzJywgJ2NsYXNzJywgJ2Rpdmlzb3InLCAnZWRnZU1vZGUnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ2tlcm5lbE1hdHJpeCcsICdrZXJuZWxVbml0TGVuZ3RoJywgJ29yZGVyJywgJ3ByZXNlcnZlQWxwaGEnLCAncmVzdWx0JywgJ3N0eWxlJywgJ3RhcmdldFgnLCAndGFyZ2V0WScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVEaWZmdXNlTGlnaHRpbmc6IFsnY2xhc3MnLCAnZGlmZnVzZUNvbnN0YW50JywgJ2hlaWdodCcsICdpZCcsICdpbicsICdrZXJuZWxVbml0TGVuZ3RoJywgJ3Jlc3VsdCcsICdzdHlsZScsICdzdXJmYWNlU2NhbGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlRGlzcGxhY2VtZW50TWFwOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdpbjInLCAncmVzdWx0JywgJ3NjYWxlJywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneENoYW5uZWxTZWxlY3RvcicsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneScsICd5Q2hhbm5lbFNlbGVjdG9yJ10sXG4gICAgZmVEaXN0YW50TGlnaHQ6IFsnYXppbXV0aCcsICdlbGV2YXRpb24nLCAnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZmVGbG9vZDogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZUZ1bmNBOiBbJ2FtcGxpdHVkZScsICdleHBvbmVudCcsICdpZCcsICdpbnRlcmNlcHQnLCAnb2Zmc2V0JywgJ3Nsb3BlJywgJ3RhYmxlVmFsdWVzJywgJ3R5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZmVGdW5jQjogWydhbXBsaXR1ZGUnLCAnZXhwb25lbnQnLCAnaWQnLCAnaW50ZXJjZXB0JywgJ29mZnNldCcsICdzbG9wZScsICd0YWJsZVZhbHVlcycsICd0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIGZlRnVuY0c6IFsnYW1wbGl0dWRlJywgJ2V4cG9uZW50JywgJ2lkJywgJ2ludGVyY2VwdCcsICdvZmZzZXQnLCAnc2xvcGUnLCAndGFibGVWYWx1ZXMnLCAndHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmZUZ1bmNSOiBbJ2FtcGxpdHVkZScsICdleHBvbmVudCcsICdpZCcsICdpbnRlcmNlcHQnLCAnb2Zmc2V0JywgJ3Nsb3BlJywgJ3RhYmxlVmFsdWVzJywgJ3R5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZmVHYXVzc2lhbkJsdXI6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ2luJywgJ3Jlc3VsdCcsICdzdGREZXZpYXRpb24nLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlSW1hZ2U6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdoZWlnaHQnLCAnaWQnLCAncHJlc2VydmVBc3BlY3RSYXRpbycsICdyZXN1bHQnLCAnc3R5bGUnLCAnd2lkdGgnLCAneCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGZlTWVyZ2U6IFsnY2xhc3MnLCAnaGVpZ2h0JywgJ2lkJywgJ3Jlc3VsdCcsICdzdHlsZScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgZmVNZXJnZU5vZGU6IFsnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZmVNb3JwaG9sb2d5OiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdvcGVyYXRvcicsICdyYWRpdXMnLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZU9mZnNldDogWydjbGFzcycsICdkeCcsICdkeScsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZVBvaW50TGlnaHQ6IFsnaWQnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneScsICd6J10sXG4gICAgZmVTcGVjdWxhckxpZ2h0aW5nOiBbJ2NsYXNzJywgJ2hlaWdodCcsICdpZCcsICdpbicsICdrZXJuZWxVbml0TGVuZ3RoJywgJ3Jlc3VsdCcsICdzcGVjdWxhckNvbnN0YW50JywgJ3NwZWN1bGFyRXhwb25lbnQnLCAnc3R5bGUnLCAnc3VyZmFjZVNjYWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZVNwb3RMaWdodDogWydpZCcsICdsaW1pdGluZ0NvbmVBbmdsZScsICdwb2ludHNBdFgnLCAncG9pbnRzQXRZJywgJ3BvaW50c0F0WicsICdzcGVjdWxhckV4cG9uZW50JywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knLCAneiddLFxuICAgIGZlVGlsZTogWydjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnaW4nLCAncmVzdWx0JywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmZVR1cmJ1bGVuY2U6IFsnYmFzZUZyZXF1ZW5jeScsICdjbGFzcycsICdoZWlnaHQnLCAnaWQnLCAnbnVtT2N0YXZlcycsICdyZXN1bHQnLCAnc2VlZCcsICdzdGl0Y2hUaWxlcycsICdzdHlsZScsICd0eXBlJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmaWx0ZXI6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmaWx0ZXJSZXMnLCAnZmlsdGVyVW5pdHMnLCAnaGVpZ2h0JywgJ2lkJywgJ3ByaW1pdGl2ZVVuaXRzJywgJ3N0eWxlJywgJ3dpZHRoJywgJ3gnLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBmb250OiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaG9yaXotYWR2LXgnLCAnaG9yaXotb3JpZ2luLXgnLCAnaG9yaXotb3JpZ2luLXknLCAnaWQnLCAnc3R5bGUnLCAndmVydC1hZHYteScsICd2ZXJ0LW9yaWdpbi14JywgJ3ZlcnQtb3JpZ2luLXknLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ2ZvbnQtZmFjZSc6IFsnYWNjZW50LWhlaWdodCcsICdhbHBoYWJldGljJywgJ2FzY2VudCcsICdiYm94JywgJ2NhcC1oZWlnaHQnLCAnZGVzY2VudCcsICdmb250LWZhbWlseScsICdmb250LXNpemUnLCAnZm9udC1zdHJldGNoJywgJ2ZvbnQtc3R5bGUnLCAnZm9udC12YXJpYW50JywgJ2ZvbnQtd2VpZ2h0JywgJ2hhbmdpbmcnLCAnaWQnLCAnaWRlb2dyYXBoaWMnLCAnbWF0aGVtYXRpY2FsJywgJ292ZXJsaW5lLXBvc2l0aW9uJywgJ292ZXJsaW5lLXRoaWNrbmVzcycsICdwYW5vc2UtMScsICdzbG9wZScsICdzdGVtaCcsICdzdGVtdicsICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJywgJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJywgJ3VuZGVybGluZS1wb3NpdGlvbicsICd1bmRlcmxpbmUtdGhpY2tuZXNzJywgJ3VuaWNvZGUtcmFuZ2UnLCAndW5pdHMtcGVyLWVtJywgJ3YtYWxwaGFiZXRpYycsICd2LWhhbmdpbmcnLCAndi1pZGVvZ3JhcGhpYycsICd2LW1hdGhlbWF0aWNhbCcsICd3aWR0aHMnLCAneC1oZWlnaHQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ2ZvbnQtZmFjZS1mb3JtYXQnOiBbJ2lkJywgJ3N0cmluZycsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICAnZm9udC1mYWNlLW5hbWUnOiBbJ2lkJywgJ25hbWUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ2ZvbnQtZmFjZS1zcmMnOiBbJ2lkJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgICdmb250LWZhY2UtdXJpJzogWydpZCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBmb3JlaWduT2JqZWN0OiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaGVpZ2h0JywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3dpZHRoJywgJ3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJywgJ3knXSxcbiAgICBnOiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgZ2x5cGg6IFsnYXJhYmljLWZvcm0nLCAnY2xhc3MnLCAnZCcsICdnbHlwaC1uYW1lJywgJ2hvcml6LWFkdi14JywgJ2lkJywgJ2xhbmcnLCAnb3JpZW50YXRpb24nLCAnc3R5bGUnLCAndW5pY29kZScsICd2ZXJ0LWFkdi15JywgJ3ZlcnQtb3JpZ2luLXgnLCAndmVydC1vcmlnaW4teScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBnbHlwaFJlZjogWydjbGFzcycsICdkeCcsICdkeScsICdmb3JtYXQnLCAnZ2x5cGhSZWYnLCAnaWQnLCAnc3R5bGUnLCAneCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIGhrZXJuOiBbJ2cxJywgJ2cyJywgJ2lkJywgJ2snLCAndTEnLCAndTInLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgaW1hZ2U6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdoZWlnaHQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd3aWR0aCcsICd4JywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgbGluZTogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3gxJywgJ3gyJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5MScsICd5MiddLFxuICAgIGxpbmVhckdyYWRpZW50OiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZ3JhZGllbnRUcmFuc2Zvcm0nLCAnZ3JhZGllbnRVbml0cycsICdpZCcsICdzcHJlYWRNZXRob2QnLCAnc3R5bGUnLCAneDEnLCAneDInLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneTEnLCAneTInXSxcbiAgICBtYXJrZXI6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdtYXJrZXJIZWlnaHQnLCAnbWFya2VyVW5pdHMnLCAnbWFya2VyV2lkdGgnLCAnb3JpZW50JywgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAncmVmWCcsICdyZWZZJywgJ3N0eWxlJywgJ3ZpZXdCb3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgbWFzazogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdtYXNrQ29udGVudFVuaXRzJywgJ21hc2tVbml0cycsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgbWV0YWRhdGE6IFsnaWQnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgJ21pc3NpbmctZ2x5cGgnOiBbJ2NsYXNzJywgJ2QnLCAnaG9yaXotYWR2LXgnLCAnaWQnLCAnc3R5bGUnLCAndmVydC1hZHYteScsICd2ZXJ0LW9yaWdpbi14JywgJ3ZlcnQtb3JpZ2luLXknLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgbXBhdGg6IFsnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBwYXRoOiBbJ2NsYXNzJywgJ2QnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3BhdGhMZW5ndGgnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3R5bGUnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndHJhbnNmb3JtJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZSddLFxuICAgIHBhdHRlcm46IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdoZWlnaHQnLCAnaWQnLCAncGF0dGVybkNvbnRlbnRVbml0cycsICdwYXR0ZXJuVHJhbnNmb3JtJywgJ3BhdHRlcm5Vbml0cycsICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3ZpZXdCb3gnLCAnd2lkdGgnLCAneCcsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIHBvbHlnb246IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3BvaW50cycsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgcG9seWxpbmU6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3BvaW50cycsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgcmFkaWFsR3JhZGllbnQ6IFsnY2xhc3MnLCAnY3gnLCAnY3knLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmeCcsICdmeScsICdncmFkaWVudFRyYW5zZm9ybScsICdncmFkaWVudFVuaXRzJywgJ2lkJywgJ3InLCAnc3ByZWFkTWV0aG9kJywgJ3N0eWxlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgcmVjdDogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3J4JywgJ3J5JywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd3aWR0aCcsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgc2NyaXB0OiBbJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAndHlwZScsICd4bGluazphY3R1YXRlJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnNob3cnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBzZXQ6IFsnYXR0cmlidXRlTmFtZScsICdhdHRyaWJ1dGVUeXBlJywgJ2JlZ2luJywgJ2R1cicsICdlbmQnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdmaWxsJywgJ2lkJywgJ21heCcsICdtaW4nLCAnb25iZWdpbicsICdvbmVuZCcsICdvbmxvYWQnLCAnb25yZXBlYXQnLCAncmVwZWF0Q291bnQnLCAncmVwZWF0RHVyJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3Jlc3RhcnQnLCAnc3lzdGVtTGFuZ3VhZ2UnLCAndG8nLCAneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOmhyZWYnLCAneGxpbms6cm9sZScsICd4bGluazpzaG93JywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgc3RvcDogWydjbGFzcycsICdpZCcsICdvZmZzZXQnLCAnc3R5bGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgc3R5bGU6IFsnaWQnLCAnbWVkaWEnLCAndGl0bGUnLCAndHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXSxcbiAgICBzdmc6IFsnYmFzZVByb2ZpbGUnLCAnY2xhc3MnLCAnY29udGVudFNjcmlwdFR5cGUnLCAnY29udGVudFN0eWxlVHlwZScsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdvbmFib3J0JywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmVycm9yJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdvbnJlc2l6ZScsICdvbnNjcm9sbCcsICdvbnVubG9hZCcsICdvbnpvb20nLCAncHJlc2VydmVBc3BlY3RSYXRpbycsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd2ZXJzaW9uJywgJ3ZpZXdCb3gnLCAnd2lkdGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneScsICd6b29tQW5kUGFuJ10sXG4gICAgc3dpdGNoOiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdyZXF1aXJlZEV4dGVuc2lvbnMnLCAncmVxdWlyZWRGZWF0dXJlcycsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0cmFuc2Zvcm0nLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgc3ltYm9sOiBbJ2NsYXNzJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnb25hY3RpdmF0ZScsICdvbmNsaWNrJywgJ29uZm9jdXNpbicsICdvbmZvY3Vzb3V0JywgJ29ubG9hZCcsICdvbm1vdXNlZG93bicsICdvbm1vdXNlbW92ZScsICdvbm1vdXNlb3V0JywgJ29ubW91c2VvdmVyJywgJ29ubW91c2V1cCcsICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgJ3N0eWxlJywgJ3ZpZXdCb3gnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgdGV4dDogWydjbGFzcycsICdkeCcsICdkeScsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ2xlbmd0aEFkanVzdCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3JvdGF0ZScsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0ZXh0TGVuZ3RoJywgJ3RyYW5zZm9ybScsICd4JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgdGV4dFBhdGg6IFsnY2xhc3MnLCAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsICdpZCcsICdsZW5ndGhBZGp1c3QnLCAnbWV0aG9kJywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAnc3BhY2luZycsICdzdGFydE9mZnNldCcsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0ZXh0TGVuZ3RoJywgJ3hsaW5rOmFyY3JvbGUnLCAneGxpbms6aHJlZicsICd4bGluazpyb2xlJywgJ3hsaW5rOnRpdGxlJywgJ3hsaW5rOnR5cGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgdGl0bGU6IFsnY2xhc3MnLCAnaWQnLCAnc3R5bGUnLCAneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJ10sXG4gICAgdHJlZjogWydjbGFzcycsICdkeCcsICdkeScsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ2xlbmd0aEFkanVzdCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3JvdGF0ZScsICdzdHlsZScsICdzeXN0ZW1MYW5ndWFnZScsICd0ZXh0TGVuZ3RoJywgJ3gnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6dGl0bGUnLCAneGxpbms6dHlwZScsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIHRzcGFuOiBbJ2NsYXNzJywgJ2R4JywgJ2R5JywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnaWQnLCAnbGVuZ3RoQWRqdXN0JywgJ29uYWN0aXZhdGUnLCAnb25jbGljaycsICdvbmZvY3VzaW4nLCAnb25mb2N1c291dCcsICdvbmxvYWQnLCAnb25tb3VzZWRvd24nLCAnb25tb3VzZW1vdmUnLCAnb25tb3VzZW91dCcsICdvbm1vdXNlb3ZlcicsICdvbm1vdXNldXAnLCAncmVxdWlyZWRFeHRlbnNpb25zJywgJ3JlcXVpcmVkRmVhdHVyZXMnLCAncm90YXRlJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RleHRMZW5ndGgnLCAneCcsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnLCAneSddLFxuICAgIHVzZTogWydjbGFzcycsICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2hlaWdodCcsICdpZCcsICdvbmFjdGl2YXRlJywgJ29uY2xpY2snLCAnb25mb2N1c2luJywgJ29uZm9jdXNvdXQnLCAnb25sb2FkJywgJ29ubW91c2Vkb3duJywgJ29ubW91c2Vtb3ZlJywgJ29ubW91c2VvdXQnLCAnb25tb3VzZW92ZXInLCAnb25tb3VzZXVwJywgJ3JlcXVpcmVkRXh0ZW5zaW9ucycsICdyZXF1aXJlZEZlYXR1cmVzJywgJ3N0eWxlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3RyYW5zZm9ybScsICd3aWR0aCcsICd4JywgJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd5J10sXG4gICAgdmlldzogWydleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJywgJ2lkJywgJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAndmlld0JveCcsICd2aWV3VGFyZ2V0JywgJ3htbDpiYXNlJywgJ3htbDpsYW5nJywgJ3htbDpzcGFjZScsICd6b29tQW5kUGFuJ10sXG4gICAgdmtlcm46IFsnZzEnLCAnZzInLCAnaWQnLCAnaycsICd1MScsICd1MicsICd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXVxuICB9O1xuXG5cbiAgc3ZnUHJlc2VudGF0aW9uRWxlbWVudHMgPSB7XG4gICAgJ2EnOiB0cnVlLFxuICAgICdhbHRHbHlwaCc6IHRydWUsXG4gICAgJ2FuaW1hdGUnOiB0cnVlLFxuICAgICdhbmltYXRlQ29sb3InOiB0cnVlLFxuICAgICdjaXJjbGUnOiB0cnVlLFxuICAgICdjbGlwUGF0aCc6IHRydWUsXG4gICAgJ2RlZnMnOiB0cnVlLFxuICAgICdlbGxpcHNlJzogdHJ1ZSxcbiAgICAnZmVCbGVuZCc6IHRydWUsXG4gICAgJ2ZlQ29sb3JNYXRyaXgnOiB0cnVlLFxuICAgICdmZUNvbXBvbmVudFRyYW5zZmVyJzogdHJ1ZSxcbiAgICAnZmVDb21wb3NpdGUnOiB0cnVlLFxuICAgICdmZUNvbnZvbHZlTWF0cml4JzogdHJ1ZSxcbiAgICAnZmVEaWZmdXNlTGlnaHRpbmcnOiB0cnVlLFxuICAgICdmZURpc3BsYWNlbWVudE1hcCc6IHRydWUsXG4gICAgJ2ZlRmxvb2QnOiB0cnVlLFxuICAgICdmZUdhdXNzaWFuQmx1cic6IHRydWUsXG4gICAgJ2ZlSW1hZ2UnOiB0cnVlLFxuICAgICdmZU1lcmdlJzogdHJ1ZSxcbiAgICAnZmVNb3JwaG9sb2d5JzogdHJ1ZSxcbiAgICAnZmVPZmZzZXQnOiB0cnVlLFxuICAgICdmZVNwZWN1bGFyTGlnaHRpbmcnOiB0cnVlLFxuICAgICdmZVRpbGUnOiB0cnVlLFxuICAgICdmZVR1cmJ1bGVuY2UnOiB0cnVlLFxuICAgICdmaWx0ZXInOiB0cnVlLFxuICAgICdmb250JzogdHJ1ZSxcbiAgICAnZm9yZWlnbk9iamVjdCc6IHRydWUsXG4gICAgJ2cnOiB0cnVlLFxuICAgICdnbHlwaCc6IHRydWUsXG4gICAgJ2dseXBoUmVmJzogdHJ1ZSxcbiAgICAnaW1hZ2UnOiB0cnVlLFxuICAgICdsaW5lJzogdHJ1ZSxcbiAgICAnbGluZWFyR3JhZGllbnQnOiB0cnVlLFxuICAgICdtYXJrZXInOiB0cnVlLFxuICAgICdtYXNrJzogdHJ1ZSxcbiAgICAnbWlzc2luZy1nbHlwaCc6IHRydWUsXG4gICAgJ3BhdGgnOiB0cnVlLFxuICAgICdwYXR0ZXJuJzogdHJ1ZSxcbiAgICAncG9seWdvbic6IHRydWUsXG4gICAgJ3BvbHlsaW5lJzogdHJ1ZSxcbiAgICAncmFkaWFsR3JhZGllbnQnOiB0cnVlLFxuICAgICdyZWN0JzogdHJ1ZSxcbiAgICAnc3RvcCc6IHRydWUsXG4gICAgJ3N2Zyc6IHRydWUsXG4gICAgJ3N3aXRjaCc6IHRydWUsXG4gICAgJ3N5bWJvbCc6IHRydWUsXG4gICAgJ3RleHQnOiB0cnVlLFxuICAgICd0ZXh0UGF0aCc6IHRydWUsXG4gICAgJ3RyZWYnOiB0cnVlLFxuICAgICd0c3Bhbic6IHRydWUsXG4gICAgJ3VzZSc6IHRydWVcbiAgfTtcblxuICBzdmdQcmVzZW50YXRpb25BdHRyaWJ1dGVzID0ge1xuICAgICdhbGlnbm1lbnQtYmFzZWxpbmUnOiB0cnVlLFxuICAgICdiYXNlbGluZS1zaGlmdCc6IHRydWUsXG4gICAgJ2NsaXAtcGF0aCc6IHRydWUsXG4gICAgJ2NsaXAtcnVsZSc6IHRydWUsXG4gICAgJ2NsaXAnOiB0cnVlLFxuICAgICdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnOiB0cnVlLFxuICAgICdjb2xvci1pbnRlcnBvbGF0aW9uJzogdHJ1ZSxcbiAgICAnY29sb3ItcHJvZmlsZSc6IHRydWUsXG4gICAgJ2NvbG9yLXJlbmRlcmluZyc6IHRydWUsXG4gICAgJ2NvbG9yJzogdHJ1ZSxcbiAgICAnY3Vyc29yJzogdHJ1ZSxcbiAgICAnZGlyZWN0aW9uJzogdHJ1ZSxcbiAgICAnZGlzcGxheSc6IHRydWUsXG4gICAgJ2RvbWluYW50LWJhc2VsaW5lJzogdHJ1ZSxcbiAgICAnZW5hYmxlLWJhY2tncm91bmQnOiB0cnVlLFxuICAgICdmaWxsLW9wYWNpdHknOiB0cnVlLFxuICAgICdmaWxsLXJ1bGUnOiB0cnVlLFxuICAgICdmaWxsJzogdHJ1ZSxcbiAgICAnZmlsdGVyJzogdHJ1ZSxcbiAgICAnZmxvb2QtY29sb3InOiB0cnVlLFxuICAgICdmbG9vZC1vcGFjaXR5JzogdHJ1ZSxcbiAgICAnZm9udC1mYW1pbHknOiB0cnVlLFxuICAgICdmb250LXNpemUtYWRqdXN0JzogdHJ1ZSxcbiAgICAnZm9udC1zaXplJzogdHJ1ZSxcbiAgICAnZm9udC1zdHJldGNoJzogdHJ1ZSxcbiAgICAnZm9udC1zdHlsZSc6IHRydWUsXG4gICAgJ2ZvbnQtdmFyaWFudCc6IHRydWUsXG4gICAgJ2ZvbnQtd2VpZ2h0JzogdHJ1ZSxcbiAgICAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCc6IHRydWUsXG4gICAgJ2dseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsJzogdHJ1ZSxcbiAgICAnaW1hZ2UtcmVuZGVyaW5nJzogdHJ1ZSxcbiAgICAna2VybmluZyc6IHRydWUsXG4gICAgJ2xldHRlci1zcGFjaW5nJzogdHJ1ZSxcbiAgICAnbGlnaHRpbmctY29sb3InOiB0cnVlLFxuICAgICdtYXJrZXItZW5kJzogdHJ1ZSxcbiAgICAnbWFya2VyLW1pZCc6IHRydWUsXG4gICAgJ21hcmtlci1zdGFydCc6IHRydWUsXG4gICAgJ21hc2snOiB0cnVlLFxuICAgICdvcGFjaXR5JzogdHJ1ZSxcbiAgICAnb3ZlcmZsb3cnOiB0cnVlLFxuICAgICdwb2ludGVyLWV2ZW50cyc6IHRydWUsXG4gICAgJ3NoYXBlLXJlbmRlcmluZyc6IHRydWUsXG4gICAgJ3N0b3AtY29sb3InOiB0cnVlLFxuICAgICdzdG9wLW9wYWNpdHknOiB0cnVlLFxuICAgICdzdHJva2UtZGFzaGFycmF5JzogdHJ1ZSxcbiAgICAnc3Ryb2tlLWRhc2hvZmZzZXQnOiB0cnVlLFxuICAgICdzdHJva2UtbGluZWNhcCc6IHRydWUsXG4gICAgJ3N0cm9rZS1saW5lam9pbic6IHRydWUsXG4gICAgJ3N0cm9rZS1taXRlcmxpbWl0JzogdHJ1ZSxcbiAgICAnc3Ryb2tlLW9wYWNpdHknOiB0cnVlLFxuICAgICdzdHJva2Utd2lkdGgnOiB0cnVlLFxuICAgICdzdHJva2UnOiB0cnVlLFxuICAgICd0ZXh0LWFuY2hvcic6IHRydWUsXG4gICAgJ3RleHQtZGVjb3JhdGlvbic6IHRydWUsXG4gICAgJ3RleHQtcmVuZGVyaW5nJzogdHJ1ZSxcbiAgICAndW5pY29kZS1iaWRpJzogdHJ1ZSxcbiAgICAndmlzaWJpbGl0eSc6IHRydWUsXG4gICAgJ3dvcmQtc3BhY2luZyc6IHRydWUsXG4gICAgJ3dyaXRpbmctbW9kZSc6IHRydWVcbiAgfTtcblxuICBsZXQgY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChodG1sKSB7XG4gICAgbGV0IGRpdiA9IERPTS5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByZXR1cm4gZGl2LmZpcnN0Q2hpbGQ7XG4gIH07XG5cbiAgc3ZnQW5hbHl6ZXIgPSBjbGFzcyBTVkdBbmFseXplciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBpZiAoY3JlYXRlRWxlbWVudCgnPHN2Zz48YWx0R2x5cGggLz48L3N2Zz4nKS5maXJzdEVsZW1lbnRDaGlsZC5ub2RlTmFtZSA9PT0gJ2FsdGdseXBoJyAmJiBlbGVtZW50cy5hbHRHbHlwaCkge1xuICAgICAgICBlbGVtZW50cy5hbHRnbHlwaCA9IGVsZW1lbnRzLmFsdEdseXBoO1xuICAgICAgICBkZWxldGUgZWxlbWVudHMuYWx0R2x5cGg7XG4gICAgICAgIGVsZW1lbnRzLmFsdGdseXBoZGVmID0gZWxlbWVudHMuYWx0R2x5cGhEZWY7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50cy5hbHRHbHlwaERlZjtcbiAgICAgICAgZWxlbWVudHMuYWx0Z2x5cGhpdGVtID0gZWxlbWVudHMuYWx0R2x5cGhJdGVtO1xuICAgICAgICBkZWxldGUgZWxlbWVudHMuYWx0R2x5cGhJdGVtO1xuICAgICAgICBlbGVtZW50cy5nbHlwaHJlZiA9IGVsZW1lbnRzLmdseXBoUmVmO1xuICAgICAgICBkZWxldGUgZWxlbWVudHMuZ2x5cGhSZWY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaXNTdGFuZGFyZFN2Z0F0dHJpYnV0ZShub2RlTmFtZSwgYXR0cmlidXRlTmFtZSkge1xuICAgICAgcmV0dXJuIHByZXNlbnRhdGlvbkVsZW1lbnRzW25vZGVOYW1lXSAmJiBwcmVzZW50YXRpb25BdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdIHx8IGVsZW1lbnRzW25vZGVOYW1lXSAmJiBlbGVtZW50c1tub2RlTmFtZV0uaW5kZXhPZihhdHRyaWJ1dGVOYW1lKSAhPT0gLTE7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgZWxlbWVudHMgPSBzdmdFbGVtZW50cztcbmV4cG9ydCBjb25zdCBwcmVzZW50YXRpb25FbGVtZW50cyA9IHN2Z1ByZXNlbnRhdGlvbkVsZW1lbnRzO1xuZXhwb3J0IGNvbnN0IHByZXNlbnRhdGlvbkF0dHJpYnV0ZXMgPSBzdmdQcmVzZW50YXRpb25BdHRyaWJ1dGVzO1xuZXhwb3J0IGNvbnN0IFNWR0FuYWx5emVyID0gc3ZnQW5hbHl6ZXIgfHwgY2xhc3Mge1xuICBpc1N0YW5kYXJkU3ZnQXR0cmlidXRlKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBPYnNlcnZlckxvY2F0b3IgPSAoX3RlbXAgPSBfY2xhc3MxMSA9IGNsYXNzIE9ic2VydmVyTG9jYXRvciB7XG4gIGNvbnN0cnVjdG9yKHRhc2tRdWV1ZSwgZXZlbnRNYW5hZ2VyLCBkaXJ0eUNoZWNrZXIsIHN2Z0FuYWx5emVyLCBwYXJzZXIpIHtcbiAgICB0aGlzLnRhc2tRdWV1ZSA9IHRhc2tRdWV1ZTtcbiAgICB0aGlzLmV2ZW50TWFuYWdlciA9IGV2ZW50TWFuYWdlcjtcbiAgICB0aGlzLmRpcnR5Q2hlY2tlciA9IGRpcnR5Q2hlY2tlcjtcbiAgICB0aGlzLnN2Z0FuYWx5emVyID0gc3ZnQW5hbHl6ZXI7XG4gICAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG5cbiAgICB0aGlzLmFkYXB0ZXJzID0gW107XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dNYW5hZ2VyLmdldExvZ2dlcignb2JzZXJ2ZXItbG9jYXRvcicpO1xuICB9XG5cbiAgZ2V0T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICBsZXQgb2JzZXJ2ZXJzTG9va3VwID0gb2JqLl9fb2JzZXJ2ZXJzX187XG4gICAgbGV0IG9ic2VydmVyO1xuXG4gICAgaWYgKG9ic2VydmVyc0xvb2t1cCAmJiBwcm9wZXJ0eU5hbWUgaW4gb2JzZXJ2ZXJzTG9va3VwKSB7XG4gICAgICByZXR1cm4gb2JzZXJ2ZXJzTG9va3VwW3Byb3BlcnR5TmFtZV07XG4gICAgfVxuXG4gICAgb2JzZXJ2ZXIgPSB0aGlzLmNyZWF0ZVByb3BlcnR5T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpO1xuXG4gICAgaWYgKCFvYnNlcnZlci5kb05vdENhY2hlKSB7XG4gICAgICBpZiAob2JzZXJ2ZXJzTG9va3VwID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb2JzZXJ2ZXJzTG9va3VwID0gdGhpcy5nZXRPckNyZWF0ZU9ic2VydmVyc0xvb2t1cChvYmopO1xuICAgICAgfVxuXG4gICAgICBvYnNlcnZlcnNMb29rdXBbcHJvcGVydHlOYW1lXSA9IG9ic2VydmVyO1xuICAgIH1cblxuICAgIHJldHVybiBvYnNlcnZlcjtcbiAgfVxuXG4gIGdldE9yQ3JlYXRlT2JzZXJ2ZXJzTG9va3VwKG9iaikge1xuICAgIHJldHVybiBvYmouX19vYnNlcnZlcnNfXyB8fCB0aGlzLmNyZWF0ZU9ic2VydmVyc0xvb2t1cChvYmopO1xuICB9XG5cbiAgY3JlYXRlT2JzZXJ2ZXJzTG9va3VwKG9iaikge1xuICAgIGxldCB2YWx1ZSA9IHt9O1xuXG4gICAgaWYgKCFSZWZsZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ19fb2JzZXJ2ZXJzX18nLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KSkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignQ2Fubm90IGFkZCBvYnNlcnZlcnMgdG8gb2JqZWN0Jywgb2JqKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBhZGRBZGFwdGVyKGFkYXB0ZXIpIHtcbiAgICB0aGlzLmFkYXB0ZXJzLnB1c2goYWRhcHRlcik7XG4gIH1cblxuICBnZXRBZGFwdGVyT2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB0aGlzLmFkYXB0ZXJzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGxldCBhZGFwdGVyID0gdGhpcy5hZGFwdGVyc1tpXTtcbiAgICAgIGxldCBvYnNlcnZlciA9IGFkYXB0ZXIuZ2V0T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpO1xuICAgICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjcmVhdGVQcm9wZXJ0eU9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lKSB7XG4gICAgbGV0IGRlc2NyaXB0b3I7XG4gICAgbGV0IGhhbmRsZXI7XG4gICAgbGV0IHhsaW5rUmVzdWx0O1xuXG4gICAgaWYgKCEob2JqIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgcmV0dXJuIG5ldyBQcmltaXRpdmVPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIERPTS5FbGVtZW50KSB7XG4gICAgICBpZiAocHJvcGVydHlOYW1lID09PSAnY2xhc3MnKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2xhc3NPYnNlcnZlcihvYmopO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3N0eWxlJyB8fCBwcm9wZXJ0eU5hbWUgPT09ICdjc3MnKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3R5bGVPYnNlcnZlcihvYmosIHByb3BlcnR5TmFtZSk7XG4gICAgICB9XG4gICAgICBoYW5kbGVyID0gdGhpcy5ldmVudE1hbmFnZXIuZ2V0RWxlbWVudEhhbmRsZXIob2JqLCBwcm9wZXJ0eU5hbWUpO1xuICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ3ZhbHVlJyAmJiBvYmoudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFNlbGVjdFZhbHVlT2JzZXJ2ZXIob2JqLCBoYW5kbGVyLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdjaGVja2VkJyAmJiBvYmoudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hlY2tlZE9ic2VydmVyKG9iaiwgaGFuZGxlciwgdGhpcyk7XG4gICAgICB9XG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlQXR0cmlidXRlT2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgeGxpbmtSZXN1bHQgPSAvXnhsaW5rOiguKykkLy5leGVjKHByb3BlcnR5TmFtZSk7XG4gICAgICBpZiAoeGxpbmtSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBYTGlua0F0dHJpYnV0ZU9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lLCB4bGlua1Jlc3VsdFsxXSk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcGVydHlOYW1lID09PSAncm9sZScgJiYgKG9iaiBpbnN0YW5jZW9mIERPTS5FbGVtZW50IHx8IG9iaiBpbnN0YW5jZW9mIERPTS5TVkdFbGVtZW50KSB8fCAvXlxcdys6fF5kYXRhLXxeYXJpYS0vLnRlc3QocHJvcGVydHlOYW1lKSB8fCBvYmogaW5zdGFuY2VvZiBET00uU1ZHRWxlbWVudCAmJiB0aGlzLnN2Z0FuYWx5emVyLmlzU3RhbmRhcmRTdmdBdHRyaWJ1dGUob2JqLm5vZGVOYW1lLCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YUF0dHJpYnV0ZU9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZXNjcmlwdG9yID0gT2JqZWN0LmdldFByb3BlcnR5RGVzY3JpcHRvcihvYmosIHByb3BlcnR5TmFtZSk7XG5cbiAgICBpZiAoaGFzRGVjbGFyZWREZXBlbmRlbmNpZXMoZGVzY3JpcHRvcikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wdXRlZE9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgY29uc3QgZXhpc3RpbmdHZXR0ZXJPclNldHRlciA9IGRlc2NyaXB0b3IuZ2V0IHx8IGRlc2NyaXB0b3Iuc2V0O1xuICAgICAgaWYgKGV4aXN0aW5nR2V0dGVyT3JTZXR0ZXIpIHtcbiAgICAgICAgaWYgKGV4aXN0aW5nR2V0dGVyT3JTZXR0ZXIuZ2V0T2JzZXJ2ZXIpIHtcbiAgICAgICAgICByZXR1cm4gZXhpc3RpbmdHZXR0ZXJPclNldHRlci5nZXRPYnNlcnZlcihvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFkYXB0ZXJPYnNlcnZlciA9IHRoaXMuZ2V0QWRhcHRlck9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKTtcbiAgICAgICAgaWYgKGFkYXB0ZXJPYnNlcnZlcikge1xuICAgICAgICAgIHJldHVybiBhZGFwdGVyT2JzZXJ2ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEaXJ0eUNoZWNrUHJvcGVydHkodGhpcy5kaXJ0eUNoZWNrZXIsIG9iaiwgcHJvcGVydHlOYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGlmIChwcm9wZXJ0eU5hbWUgPT09ICdsZW5ndGgnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFycmF5T2JzZXJ2ZXIob2JqKS5nZXRMZW5ndGhPYnNlcnZlcigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERpcnR5Q2hlY2tQcm9wZXJ0eSh0aGlzLmRpcnR5Q2hlY2tlciwgb2JqLCBwcm9wZXJ0eU5hbWUpO1xuICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICBpZiAocHJvcGVydHlOYW1lID09PSAnc2l6ZScpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWFwT2JzZXJ2ZXIob2JqKS5nZXRMZW5ndGhPYnNlcnZlcigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERpcnR5Q2hlY2tQcm9wZXJ0eSh0aGlzLmRpcnR5Q2hlY2tlciwgb2JqLCBwcm9wZXJ0eU5hbWUpO1xuICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICBpZiAocHJvcGVydHlOYW1lID09PSAnc2l6ZScpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2V0T2JzZXJ2ZXIob2JqKS5nZXRMZW5ndGhPYnNlcnZlcigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERpcnR5Q2hlY2tQcm9wZXJ0eSh0aGlzLmRpcnR5Q2hlY2tlciwgb2JqLCBwcm9wZXJ0eU5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2V0dGVyT2JzZXJ2ZXIodGhpcy50YXNrUXVldWUsIG9iaiwgcHJvcGVydHlOYW1lKTtcbiAgfVxuXG4gIGdldEFjY2Vzc29yKG9iaiwgcHJvcGVydHlOYW1lKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIERPTS5FbGVtZW50KSB7XG4gICAgICBpZiAocHJvcGVydHlOYW1lID09PSAnY2xhc3MnIHx8IHByb3BlcnR5TmFtZSA9PT0gJ3N0eWxlJyB8fCBwcm9wZXJ0eU5hbWUgPT09ICdjc3MnIHx8IHByb3BlcnR5TmFtZSA9PT0gJ3ZhbHVlJyAmJiAob2JqLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyB8fCBvYmoudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0JykgfHwgcHJvcGVydHlOYW1lID09PSAnY2hlY2tlZCcgJiYgb2JqLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyB8fCBwcm9wZXJ0eU5hbWUgPT09ICdtb2RlbCcgJiYgb2JqLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyB8fCAvXnhsaW5rOi4rJC8uZXhlYyhwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmICgvXlxcdys6fF5kYXRhLXxeYXJpYS0vLnRlc3QocHJvcGVydHlOYW1lKSB8fCBvYmogaW5zdGFuY2VvZiBET00uU1ZHRWxlbWVudCAmJiB0aGlzLnN2Z0FuYWx5emVyLmlzU3RhbmRhcmRTdmdBdHRyaWJ1dGUob2JqLm5vZGVOYW1lLCBwcm9wZXJ0eU5hbWUpIHx8IG9iai50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbWcnICYmIHByb3BlcnR5TmFtZSA9PT0gJ3NyYycgfHwgb2JqLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2EnICYmIHByb3BlcnR5TmFtZSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgIHJldHVybiBkYXRhQXR0cmlidXRlQWNjZXNzb3I7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wZXJ0eUFjY2Vzc29yO1xuICB9XG5cbiAgZ2V0QXJyYXlPYnNlcnZlcihhcnJheSkge1xuICAgIHJldHVybiBnZXRBcnJheU9ic2VydmVyKHRoaXMudGFza1F1ZXVlLCBhcnJheSk7XG4gIH1cblxuICBnZXRNYXBPYnNlcnZlcihtYXApIHtcbiAgICByZXR1cm4gZ2V0TWFwT2JzZXJ2ZXIodGhpcy50YXNrUXVldWUsIG1hcCk7XG4gIH1cblxuICBnZXRTZXRPYnNlcnZlcihzZXQpIHtcbiAgICByZXR1cm4gZ2V0U2V0T2JzZXJ2ZXIodGhpcy50YXNrUXVldWUsIHNldCk7XG4gIH1cbn0sIF9jbGFzczExLmluamVjdCA9IFtUYXNrUXVldWUsIEV2ZW50TWFuYWdlciwgRGlydHlDaGVja2VyLCBTVkdBbmFseXplciwgUGFyc2VyXSwgX3RlbXApO1xuXG5leHBvcnQgbGV0IE9iamVjdE9ic2VydmF0aW9uQWRhcHRlciA9IGNsYXNzIE9iamVjdE9ic2VydmF0aW9uQWRhcHRlciB7XG4gIGdldE9ic2VydmVyKG9iamVjdCwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCaW5kaW5nQWRhcHRlcnMgbXVzdCBpbXBsZW1lbnQgZ2V0T2JzZXJ2ZXIob2JqZWN0LCBwcm9wZXJ0eU5hbWUpLicpO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IEJpbmRpbmdFeHByZXNzaW9uID0gY2xhc3MgQmluZGluZ0V4cHJlc3Npb24ge1xuICBjb25zdHJ1Y3RvcihvYnNlcnZlckxvY2F0b3IsIHRhcmdldFByb3BlcnR5LCBzb3VyY2VFeHByZXNzaW9uLCBtb2RlLCBsb29rdXBGdW5jdGlvbnMsIGF0dHJpYnV0ZSkge1xuICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgIHRoaXMudGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRQcm9wZXJ0eTtcbiAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xuICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgdGhpcy5sb29rdXBGdW5jdGlvbnMgPSBsb29rdXBGdW5jdGlvbnM7XG4gICAgdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG4gICAgdGhpcy5kaXNjcmV0ZSA9IGZhbHNlO1xuICB9XG5cbiAgY3JlYXRlQmluZGluZyh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEJpbmRpbmcodGhpcy5vYnNlcnZlckxvY2F0b3IsIHRoaXMuc291cmNlRXhwcmVzc2lvbiwgdGFyZ2V0LCB0aGlzLnRhcmdldFByb3BlcnR5LCB0aGlzLm1vZGUsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBCaW5kaW5nID0gKF9kZWMxMCA9IGNvbm5lY3RhYmxlKCksIF9kZWMxMChfY2xhc3MxMiA9IGNsYXNzIEJpbmRpbmcge1xuICBjb25zdHJ1Y3RvcihvYnNlcnZlckxvY2F0b3IsIHNvdXJjZUV4cHJlc3Npb24sIHRhcmdldCwgdGFyZ2V0UHJvcGVydHksIG1vZGUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbiA9IHNvdXJjZUV4cHJlc3Npb247XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFByb3BlcnR5O1xuICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgdGhpcy5sb29rdXBGdW5jdGlvbnMgPSBsb29rdXBGdW5jdGlvbnM7XG4gIH1cblxuICB1cGRhdGVUYXJnZXQodmFsdWUpIHtcbiAgICB0aGlzLnRhcmdldE9ic2VydmVyLnNldFZhbHVlKHZhbHVlLCB0aGlzLnRhcmdldCwgdGhpcy50YXJnZXRQcm9wZXJ0eSk7XG4gIH1cblxuICB1cGRhdGVTb3VyY2UodmFsdWUpIHtcbiAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24uYXNzaWduKHRoaXMuc291cmNlLCB2YWx1ZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICB9XG5cbiAgY2FsbChjb250ZXh0LCBuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuaXNCb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCA9PT0gc291cmNlQ29udGV4dCkge1xuICAgICAgb2xkVmFsdWUgPSB0aGlzLnRhcmdldE9ic2VydmVyLmdldFZhbHVlKHRoaXMudGFyZ2V0LCB0aGlzLnRhcmdldFByb3BlcnR5KTtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5zb3VyY2VFeHByZXNzaW9uLmV2YWx1YXRlKHRoaXMuc291cmNlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGFyZ2V0KG5ld1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1vZGUgIT09IGJpbmRpbmdNb2RlLm9uZVRpbWUpIHtcbiAgICAgICAgdGhpcy5fdmVyc2lvbisrO1xuICAgICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24uY29ubmVjdCh0aGlzLCB0aGlzLnNvdXJjZSk7XG4gICAgICAgIHRoaXMudW5vYnNlcnZlKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQgPT09IHRhcmdldENvbnRleHQpIHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdGhpcy5zb3VyY2VFeHByZXNzaW9uLmV2YWx1YXRlKHRoaXMuc291cmNlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucykpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTb3VyY2UobmV3VmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgY2FsbCBjb250ZXh0ICR7Y29udGV4dH1gKTtcbiAgfVxuXG4gIGJpbmQoc291cmNlKSB7XG4gICAgaWYgKHRoaXMuaXNCb3VuZCkge1xuICAgICAgaWYgKHRoaXMuc291cmNlID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICB9XG4gICAgdGhpcy5pc0JvdW5kID0gdHJ1ZTtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblxuICAgIGlmICh0aGlzLnNvdXJjZUV4cHJlc3Npb24uYmluZCkge1xuICAgICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uLmJpbmQodGhpcywgc291cmNlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucyk7XG4gICAgfVxuXG4gICAgbGV0IG1vZGUgPSB0aGlzLm1vZGU7XG4gICAgaWYgKCF0aGlzLnRhcmdldE9ic2VydmVyKSB7XG4gICAgICBsZXQgbWV0aG9kID0gbW9kZSA9PT0gYmluZGluZ01vZGUudHdvV2F5IHx8IG1vZGUgPT09IGJpbmRpbmdNb2RlLmZyb21WaWV3ID8gJ2dldE9ic2VydmVyJyA6ICdnZXRBY2Nlc3Nvcic7XG4gICAgICB0aGlzLnRhcmdldE9ic2VydmVyID0gdGhpcy5vYnNlcnZlckxvY2F0b3JbbWV0aG9kXSh0aGlzLnRhcmdldCwgdGhpcy50YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgaWYgKCdiaW5kJyBpbiB0aGlzLnRhcmdldE9ic2VydmVyKSB7XG4gICAgICB0aGlzLnRhcmdldE9ic2VydmVyLmJpbmQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubW9kZSAhPT0gYmluZGluZ01vZGUuZnJvbVZpZXcpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHRoaXMuc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZShzb3VyY2UsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgICAgIHRoaXMudXBkYXRlVGFyZ2V0KHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAobW9kZSA9PT0gYmluZGluZ01vZGUub25lVGltZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gYmluZGluZ01vZGUudG9WaWV3KSB7XG4gICAgICBlbnF1ZXVlQmluZGluZ0Nvbm5lY3QodGhpcyk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBiaW5kaW5nTW9kZS50d29XYXkpIHtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5jb25uZWN0KHRoaXMsIHNvdXJjZSk7XG4gICAgICB0aGlzLnRhcmdldE9ic2VydmVyLnN1YnNjcmliZSh0YXJnZXRDb250ZXh0LCB0aGlzKTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IGJpbmRpbmdNb2RlLmZyb21WaWV3KSB7XG4gICAgICB0aGlzLnRhcmdldE9ic2VydmVyLnN1YnNjcmliZSh0YXJnZXRDb250ZXh0LCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgaWYgKCF0aGlzLmlzQm91bmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc0JvdW5kID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuc291cmNlRXhwcmVzc2lvbi51bmJpbmQpIHtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi51bmJpbmQodGhpcywgdGhpcy5zb3VyY2UpO1xuICAgIH1cbiAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgaWYgKCd1bmJpbmQnIGluIHRoaXMudGFyZ2V0T2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMudGFyZ2V0T2JzZXJ2ZXIudW5iaW5kKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnRhcmdldE9ic2VydmVyLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnRhcmdldE9ic2VydmVyLnVuc3Vic2NyaWJlKHRhcmdldENvbnRleHQsIHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLnVub2JzZXJ2ZSh0cnVlKTtcbiAgfVxuXG4gIGNvbm5lY3QoZXZhbHVhdGUpIHtcbiAgICBpZiAoIXRoaXMuaXNCb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZXZhbHVhdGUpIHtcbiAgICAgIGxldCB2YWx1ZSA9IHRoaXMuc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZSh0aGlzLnNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICAgICAgdGhpcy51cGRhdGVUYXJnZXQodmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24uY29ubmVjdCh0aGlzLCB0aGlzLnNvdXJjZSk7XG4gIH1cbn0pIHx8IF9jbGFzczEyKTtcblxuZXhwb3J0IGxldCBDYWxsRXhwcmVzc2lvbiA9IGNsYXNzIENhbGxFeHByZXNzaW9uIHtcbiAgY29uc3RydWN0b3Iob2JzZXJ2ZXJMb2NhdG9yLCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlRXhwcmVzc2lvbiwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgdGhpcy5vYnNlcnZlckxvY2F0b3IgPSBvYnNlcnZlckxvY2F0b3I7XG4gICAgdGhpcy50YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFByb3BlcnR5O1xuICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbiA9IHNvdXJjZUV4cHJlc3Npb247XG4gICAgdGhpcy5sb29rdXBGdW5jdGlvbnMgPSBsb29rdXBGdW5jdGlvbnM7XG4gIH1cblxuICBjcmVhdGVCaW5kaW5nKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgQ2FsbCh0aGlzLm9ic2VydmVyTG9jYXRvciwgdGhpcy5zb3VyY2VFeHByZXNzaW9uLCB0YXJnZXQsIHRoaXMudGFyZ2V0UHJvcGVydHksIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBDYWxsID0gY2xhc3MgQ2FsbCB7XG4gIGNvbnN0cnVjdG9yKG9ic2VydmVyTG9jYXRvciwgc291cmNlRXhwcmVzc2lvbiwgdGFyZ2V0LCB0YXJnZXRQcm9wZXJ0eSwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uID0gc291cmNlRXhwcmVzc2lvbjtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLnRhcmdldFByb3BlcnR5ID0gb2JzZXJ2ZXJMb2NhdG9yLmdldE9ic2VydmVyKHRhcmdldCwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIHRoaXMubG9va3VwRnVuY3Rpb25zID0gbG9va3VwRnVuY3Rpb25zO1xuICB9XG5cbiAgY2FsbFNvdXJjZSgkZXZlbnQpIHtcbiAgICBsZXQgb3ZlcnJpZGVDb250ZXh0ID0gdGhpcy5zb3VyY2Uub3ZlcnJpZGVDb250ZXh0O1xuICAgIE9iamVjdC5hc3NpZ24ob3ZlcnJpZGVDb250ZXh0LCAkZXZlbnQpO1xuICAgIG92ZXJyaWRlQ29udGV4dC4kZXZlbnQgPSAkZXZlbnQ7XG4gICAgbGV0IG11c3RFdmFsdWF0ZSA9IHRydWU7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuc291cmNlRXhwcmVzc2lvbi5ldmFsdWF0ZSh0aGlzLnNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMsIG11c3RFdmFsdWF0ZSk7XG4gICAgZGVsZXRlIG92ZXJyaWRlQ29udGV4dC4kZXZlbnQ7XG4gICAgZm9yIChsZXQgcHJvcCBpbiAkZXZlbnQpIHtcbiAgICAgIGRlbGV0ZSBvdmVycmlkZUNvbnRleHRbcHJvcF07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBiaW5kKHNvdXJjZSkge1xuICAgIGlmICh0aGlzLmlzQm91bmQpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZSA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgfVxuICAgIHRoaXMuaXNCb3VuZCA9IHRydWU7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cbiAgICBpZiAodGhpcy5zb3VyY2VFeHByZXNzaW9uLmJpbmQpIHtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5iaW5kKHRoaXMsIHNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICAgIH1cbiAgICB0aGlzLnRhcmdldFByb3BlcnR5LnNldFZhbHVlKCRldmVudCA9PiB0aGlzLmNhbGxTb3VyY2UoJGV2ZW50KSk7XG4gIH1cblxuICB1bmJpbmQoKSB7XG4gICAgaWYgKCF0aGlzLmlzQm91bmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc0JvdW5kID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuc291cmNlRXhwcmVzc2lvbi51bmJpbmQpIHtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi51bmJpbmQodGhpcywgdGhpcy5zb3VyY2UpO1xuICAgIH1cbiAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgdGhpcy50YXJnZXRQcm9wZXJ0eS5zZXRWYWx1ZShudWxsKTtcbiAgfVxufTtcblxuZXhwb3J0IGxldCBWYWx1ZUNvbnZlcnRlclJlc291cmNlID0gY2xhc3MgVmFsdWVDb252ZXJ0ZXJSZXNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG5cbiAgc3RhdGljIGNvbnZlbnRpb24obmFtZSkge1xuICAgIGlmIChuYW1lLmVuZHNXaXRoKCdWYWx1ZUNvbnZlcnRlcicpKSB7XG4gICAgICByZXR1cm4gbmV3IFZhbHVlQ29udmVydGVyUmVzb3VyY2UoY2FtZWxDYXNlKG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoIC0gMTQpKSk7XG4gICAgfVxuICB9XG5cbiAgaW5pdGlhbGl6ZShjb250YWluZXIsIHRhcmdldCkge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBjb250YWluZXIuZ2V0KHRhcmdldCk7XG4gIH1cblxuICByZWdpc3RlcihyZWdpc3RyeSwgbmFtZSkge1xuICAgIHJlZ2lzdHJ5LnJlZ2lzdGVyVmFsdWVDb252ZXJ0ZXIobmFtZSB8fCB0aGlzLm5hbWUsIHRoaXMuaW5zdGFuY2UpO1xuICB9XG5cbiAgbG9hZChjb250YWluZXIsIHRhcmdldCkge31cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZUNvbnZlcnRlcihuYW1lT3JUYXJnZXQpIHtcbiAgaWYgKG5hbWVPclRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBuYW1lT3JUYXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIG1ldGFkYXRhLmRlZmluZShtZXRhZGF0YS5yZXNvdXJjZSwgbmV3IFZhbHVlQ29udmVydGVyUmVzb3VyY2UobmFtZU9yVGFyZ2V0KSwgdGFyZ2V0KTtcbiAgICB9O1xuICB9XG5cbiAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCBuZXcgVmFsdWVDb252ZXJ0ZXJSZXNvdXJjZSgpLCBuYW1lT3JUYXJnZXQpO1xufVxuXG5leHBvcnQgbGV0IEJpbmRpbmdCZWhhdmlvclJlc291cmNlID0gY2xhc3MgQmluZGluZ0JlaGF2aW9yUmVzb3VyY2Uge1xuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuXG4gIHN0YXRpYyBjb252ZW50aW9uKG5hbWUpIHtcbiAgICBpZiAobmFtZS5lbmRzV2l0aCgnQmluZGluZ0JlaGF2aW9yJykpIHtcbiAgICAgIHJldHVybiBuZXcgQmluZGluZ0JlaGF2aW9yUmVzb3VyY2UoY2FtZWxDYXNlKG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoIC0gMTUpKSk7XG4gICAgfVxuICB9XG5cbiAgaW5pdGlhbGl6ZShjb250YWluZXIsIHRhcmdldCkge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBjb250YWluZXIuZ2V0KHRhcmdldCk7XG4gIH1cblxuICByZWdpc3RlcihyZWdpc3RyeSwgbmFtZSkge1xuICAgIHJlZ2lzdHJ5LnJlZ2lzdGVyQmluZGluZ0JlaGF2aW9yKG5hbWUgfHwgdGhpcy5uYW1lLCB0aGlzLmluc3RhbmNlKTtcbiAgfVxuXG4gIGxvYWQoY29udGFpbmVyLCB0YXJnZXQpIHt9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYmluZGluZ0JlaGF2aW9yKG5hbWVPclRhcmdldCkge1xuICBpZiAobmFtZU9yVGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG5hbWVPclRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCBuZXcgQmluZGluZ0JlaGF2aW9yUmVzb3VyY2UobmFtZU9yVGFyZ2V0KSwgdGFyZ2V0KTtcbiAgICB9O1xuICB9XG5cbiAgbWV0YWRhdGEuZGVmaW5lKG1ldGFkYXRhLnJlc291cmNlLCBuZXcgQmluZGluZ0JlaGF2aW9yUmVzb3VyY2UoKSwgbmFtZU9yVGFyZ2V0KTtcbn1cblxuZXhwb3J0IGxldCBMaXN0ZW5lckV4cHJlc3Npb24gPSBjbGFzcyBMaXN0ZW5lckV4cHJlc3Npb24ge1xuICBjb25zdHJ1Y3RvcihldmVudE1hbmFnZXIsIHRhcmdldEV2ZW50LCBzb3VyY2VFeHByZXNzaW9uLCBkZWxlZ2F0aW9uU3RyYXRlZ3ksIHByZXZlbnREZWZhdWx0LCBsb29rdXBGdW5jdGlvbnMpIHtcbiAgICB0aGlzLmV2ZW50TWFuYWdlciA9IGV2ZW50TWFuYWdlcjtcbiAgICB0aGlzLnRhcmdldEV2ZW50ID0gdGFyZ2V0RXZlbnQ7XG4gICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uID0gc291cmNlRXhwcmVzc2lvbjtcbiAgICB0aGlzLmRlbGVnYXRpb25TdHJhdGVneSA9IGRlbGVnYXRpb25TdHJhdGVneTtcbiAgICB0aGlzLmRpc2NyZXRlID0gdHJ1ZTtcbiAgICB0aGlzLnByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQ7XG4gICAgdGhpcy5sb29rdXBGdW5jdGlvbnMgPSBsb29rdXBGdW5jdGlvbnM7XG4gIH1cblxuICBjcmVhdGVCaW5kaW5nKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgTGlzdGVuZXIodGhpcy5ldmVudE1hbmFnZXIsIHRoaXMudGFyZ2V0RXZlbnQsIHRoaXMuZGVsZWdhdGlvblN0cmF0ZWd5LCB0aGlzLnNvdXJjZUV4cHJlc3Npb24sIHRhcmdldCwgdGhpcy5wcmV2ZW50RGVmYXVsdCwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICB9XG59O1xuXG5leHBvcnQgbGV0IExpc3RlbmVyID0gY2xhc3MgTGlzdGVuZXIge1xuICBjb25zdHJ1Y3RvcihldmVudE1hbmFnZXIsIHRhcmdldEV2ZW50LCBkZWxlZ2F0aW9uU3RyYXRlZ3ksIHNvdXJjZUV4cHJlc3Npb24sIHRhcmdldCwgcHJldmVudERlZmF1bHQsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHRoaXMuZXZlbnRNYW5hZ2VyID0gZXZlbnRNYW5hZ2VyO1xuICAgIHRoaXMudGFyZ2V0RXZlbnQgPSB0YXJnZXRFdmVudDtcbiAgICB0aGlzLmRlbGVnYXRpb25TdHJhdGVneSA9IGRlbGVnYXRpb25TdHJhdGVneTtcbiAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24gPSBzb3VyY2VFeHByZXNzaW9uO1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMucHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdDtcbiAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcbiAgfVxuXG4gIGNhbGxTb3VyY2UoZXZlbnQpIHtcbiAgICBsZXQgb3ZlcnJpZGVDb250ZXh0ID0gdGhpcy5zb3VyY2Uub3ZlcnJpZGVDb250ZXh0O1xuICAgIG92ZXJyaWRlQ29udGV4dC4kZXZlbnQgPSBldmVudDtcbiAgICBsZXQgbXVzdEV2YWx1YXRlID0gdHJ1ZTtcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5zb3VyY2VFeHByZXNzaW9uLmV2YWx1YXRlKHRoaXMuc291cmNlLCB0aGlzLmxvb2t1cEZ1bmN0aW9ucywgbXVzdEV2YWx1YXRlKTtcbiAgICBkZWxldGUgb3ZlcnJpZGVDb250ZXh0LiRldmVudDtcbiAgICBpZiAocmVzdWx0ICE9PSB0cnVlICYmIHRoaXMucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBoYW5kbGVFdmVudChldmVudCkge1xuICAgIHRoaXMuY2FsbFNvdXJjZShldmVudCk7XG4gIH1cblxuICBiaW5kKHNvdXJjZSkge1xuICAgIGlmICh0aGlzLmlzQm91bmQpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZSA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgfVxuICAgIHRoaXMuaXNCb3VuZCA9IHRydWU7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cbiAgICBpZiAodGhpcy5zb3VyY2VFeHByZXNzaW9uLmJpbmQpIHtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5iaW5kKHRoaXMsIHNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICAgIH1cbiAgICB0aGlzLl9oYW5kbGVyID0gdGhpcy5ldmVudE1hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnRhcmdldCwgdGhpcy50YXJnZXRFdmVudCwgdGhpcywgdGhpcy5kZWxlZ2F0aW9uU3RyYXRlZ3ksIHRydWUpO1xuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIGlmICghdGhpcy5pc0JvdW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNCb3VuZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnNvdXJjZUV4cHJlc3Npb24udW5iaW5kKSB7XG4gICAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24udW5iaW5kKHRoaXMsIHRoaXMuc291cmNlKTtcbiAgICB9XG4gICAgdGhpcy5zb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuX2hhbmRsZXIuZGlzcG9zZSgpO1xuICAgIHRoaXMuX2hhbmRsZXIgPSBudWxsO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRBVShlbGVtZW50KSB7XG4gIGxldCBhdSA9IGVsZW1lbnQuYXU7XG5cbiAgaWYgKGF1ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIEF1cmVsaWEgQVBJcyBhcmUgZGVmaW5lZCBmb3IgdGhlIGVsZW1lbnQ6IFwiJHtlbGVtZW50LnRhZ05hbWV9XCIuYCk7XG4gIH1cblxuICByZXR1cm4gYXU7XG59XG5cbmV4cG9ydCBsZXQgTmFtZUV4cHJlc3Npb24gPSBjbGFzcyBOYW1lRXhwcmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKHNvdXJjZUV4cHJlc3Npb24sIGFwaU5hbWUsIGxvb2t1cEZ1bmN0aW9ucykge1xuICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbiA9IHNvdXJjZUV4cHJlc3Npb247XG4gICAgdGhpcy5hcGlOYW1lID0gYXBpTmFtZTtcbiAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcbiAgICB0aGlzLmRpc2NyZXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGNyZWF0ZUJpbmRpbmcodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBOYW1lQmluZGVyKHRoaXMuc291cmNlRXhwcmVzc2lvbiwgTmFtZUV4cHJlc3Npb24ubG9jYXRlQVBJKHRhcmdldCwgdGhpcy5hcGlOYW1lKSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGxvY2F0ZUFQSShlbGVtZW50LCBhcGlOYW1lKSB7XG4gICAgc3dpdGNoIChhcGlOYW1lKSB7XG4gICAgICBjYXNlICdlbGVtZW50JzpcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICBjYXNlICdjb250cm9sbGVyJzpcbiAgICAgICAgcmV0dXJuIGdldEFVKGVsZW1lbnQpLmNvbnRyb2xsZXI7XG4gICAgICBjYXNlICd2aWV3LW1vZGVsJzpcbiAgICAgICAgcmV0dXJuIGdldEFVKGVsZW1lbnQpLmNvbnRyb2xsZXIudmlld01vZGVsO1xuICAgICAgY2FzZSAndmlldyc6XG4gICAgICAgIHJldHVybiBnZXRBVShlbGVtZW50KS5jb250cm9sbGVyLnZpZXc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZXQgdGFyZ2V0ID0gZ2V0QVUoZWxlbWVudClbYXBpTmFtZV07XG5cbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gcmVmZXJlbmNlIFwiJHthcGlOYW1lfVwiLCBidXQgaXQgd2FzIG5vdCBmb3VuZCBhbW9uZ3N0IHRoZSB0YXJnZXQncyBBUEkuYCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0LnZpZXdNb2RlbDtcbiAgICB9XG4gIH1cbn07XG5cbmxldCBOYW1lQmluZGVyID0gY2xhc3MgTmFtZUJpbmRlciB7XG4gIGNvbnN0cnVjdG9yKHNvdXJjZUV4cHJlc3Npb24sIHRhcmdldCwgbG9va3VwRnVuY3Rpb25zKSB7XG4gICAgdGhpcy5zb3VyY2VFeHByZXNzaW9uID0gc291cmNlRXhwcmVzc2lvbjtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLmxvb2t1cEZ1bmN0aW9ucyA9IGxvb2t1cEZ1bmN0aW9ucztcbiAgfVxuXG4gIGJpbmQoc291cmNlKSB7XG4gICAgaWYgKHRoaXMuaXNCb3VuZCkge1xuICAgICAgaWYgKHRoaXMuc291cmNlID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICB9XG4gICAgdGhpcy5pc0JvdW5kID0gdHJ1ZTtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICBpZiAodGhpcy5zb3VyY2VFeHByZXNzaW9uLmJpbmQpIHtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5iaW5kKHRoaXMsIHNvdXJjZSwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICAgIH1cbiAgICB0aGlzLnNvdXJjZUV4cHJlc3Npb24uYXNzaWduKHRoaXMuc291cmNlLCB0aGlzLnRhcmdldCwgdGhpcy5sb29rdXBGdW5jdGlvbnMpO1xuICB9XG5cbiAgdW5iaW5kKCkge1xuICAgIGlmICghdGhpcy5pc0JvdW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNCb3VuZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnNvdXJjZUV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5zb3VyY2UsIHRoaXMubG9va3VwRnVuY3Rpb25zKSA9PT0gdGhpcy50YXJnZXQpIHtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi5hc3NpZ24odGhpcy5zb3VyY2UsIG51bGwsIHRoaXMubG9va3VwRnVuY3Rpb25zKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc291cmNlRXhwcmVzc2lvbi51bmJpbmQpIHtcbiAgICAgIHRoaXMuc291cmNlRXhwcmVzc2lvbi51bmJpbmQodGhpcywgdGhpcy5zb3VyY2UpO1xuICAgIH1cbiAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gIH1cbn07XG5cblxuY29uc3QgTG9va3VwRnVuY3Rpb25zID0ge1xuICBiaW5kaW5nQmVoYXZpb3JzOiBuYW1lID0+IG51bGwsXG4gIHZhbHVlQ29udmVydGVyczogbmFtZSA9PiBudWxsXG59O1xuXG5leHBvcnQgbGV0IEJpbmRpbmdFbmdpbmUgPSAoX3RlbXAyID0gX2NsYXNzMTMgPSBjbGFzcyBCaW5kaW5nRW5naW5lIHtcblxuICBjb25zdHJ1Y3RvcihvYnNlcnZlckxvY2F0b3IsIHBhcnNlcikge1xuICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yID0gb2JzZXJ2ZXJMb2NhdG9yO1xuICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICB9XG5cbiAgY3JlYXRlQmluZGluZ0V4cHJlc3Npb24odGFyZ2V0UHJvcGVydHksIHNvdXJjZUV4cHJlc3Npb24sIG1vZGUgPSBiaW5kaW5nTW9kZS50b1ZpZXcsIGxvb2t1cEZ1bmN0aW9ucyA9IExvb2t1cEZ1bmN0aW9ucykge1xuICAgIHJldHVybiBuZXcgQmluZGluZ0V4cHJlc3Npb24odGhpcy5vYnNlcnZlckxvY2F0b3IsIHRhcmdldFByb3BlcnR5LCB0aGlzLnBhcnNlci5wYXJzZShzb3VyY2VFeHByZXNzaW9uKSwgbW9kZSwgbG9va3VwRnVuY3Rpb25zKTtcbiAgfVxuXG4gIHByb3BlcnR5T2JzZXJ2ZXIob2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3Vic2NyaWJlOiBjYWxsYmFjayA9PiB7XG4gICAgICAgIGxldCBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJMb2NhdG9yLmdldE9ic2VydmVyKG9iaiwgcHJvcGVydHlOYW1lKTtcbiAgICAgICAgb2JzZXJ2ZXIuc3Vic2NyaWJlKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXNwb3NlOiAoKSA9PiBvYnNlcnZlci51bnN1YnNjcmliZShjYWxsYmFjaylcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgY29sbGVjdGlvbk9ic2VydmVyKGNvbGxlY3Rpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3Vic2NyaWJlOiBjYWxsYmFjayA9PiB7XG4gICAgICAgIGxldCBvYnNlcnZlcjtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlckxvY2F0b3IuZ2V0QXJyYXlPYnNlcnZlcihjb2xsZWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xsZWN0aW9uIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVyTG9jYXRvci5nZXRNYXBPYnNlcnZlcihjb2xsZWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xsZWN0aW9uIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVyTG9jYXRvci5nZXRTZXRPYnNlcnZlcihjb2xsZWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbGxlY3Rpb24gbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBBcnJheSwgTWFwIG9yIFNldC4nKTtcbiAgICAgICAgfVxuICAgICAgICBvYnNlcnZlci5zdWJzY3JpYmUoY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IG9ic2VydmVyLnVuc3Vic2NyaWJlKGNhbGxiYWNrKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBleHByZXNzaW9uT2JzZXJ2ZXIoYmluZGluZ0NvbnRleHQsIGV4cHJlc3Npb24pIHtcbiAgICBsZXQgc2NvcGUgPSB7IGJpbmRpbmdDb250ZXh0LCBvdmVycmlkZUNvbnRleHQ6IGNyZWF0ZU92ZXJyaWRlQ29udGV4dChiaW5kaW5nQ29udGV4dCkgfTtcbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb25PYnNlcnZlcihzY29wZSwgdGhpcy5wYXJzZXIucGFyc2UoZXhwcmVzc2lvbiksIHRoaXMub2JzZXJ2ZXJMb2NhdG9yLCBMb29rdXBGdW5jdGlvbnMpO1xuICB9XG5cbiAgcGFyc2VFeHByZXNzaW9uKGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZXIucGFyc2UoZXhwcmVzc2lvbik7XG4gIH1cblxuICByZWdpc3RlckFkYXB0ZXIoYWRhcHRlcikge1xuICAgIHRoaXMub2JzZXJ2ZXJMb2NhdG9yLmFkZEFkYXB0ZXIoYWRhcHRlcik7XG4gIH1cbn0sIF9jbGFzczEzLmluamVjdCA9IFtPYnNlcnZlckxvY2F0b3IsIFBhcnNlcl0sIF90ZW1wMik7XG5cbmxldCBzZXRQcm90byA9IFNldC5wcm90b3R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXRPYnNlcnZlcih0YXNrUXVldWUsIHNldCkge1xuICByZXR1cm4gTW9kaWZ5U2V0T2JzZXJ2ZXIuZm9yKHRhc2tRdWV1ZSwgc2V0KTtcbn1cblxubGV0IE1vZGlmeVNldE9ic2VydmVyID0gY2xhc3MgTW9kaWZ5U2V0T2JzZXJ2ZXIgZXh0ZW5kcyBNb2RpZnlDb2xsZWN0aW9uT2JzZXJ2ZXIge1xuICBjb25zdHJ1Y3Rvcih0YXNrUXVldWUsIHNldCkge1xuICAgIHN1cGVyKHRhc2tRdWV1ZSwgc2V0KTtcbiAgfVxuXG4gIHN0YXRpYyBmb3IodGFza1F1ZXVlLCBzZXQpIHtcbiAgICBpZiAoISgnX19zZXRfb2JzZXJ2ZXJfXycgaW4gc2V0KSkge1xuICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShzZXQsICdfX3NldF9vYnNlcnZlcl9fJywge1xuICAgICAgICB2YWx1ZTogTW9kaWZ5U2V0T2JzZXJ2ZXIuY3JlYXRlKHRhc2tRdWV1ZSwgc2V0KSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2V0Ll9fc2V0X29ic2VydmVyX187XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKHRhc2tRdWV1ZSwgc2V0KSB7XG4gICAgbGV0IG9ic2VydmVyID0gbmV3IE1vZGlmeVNldE9ic2VydmVyKHRhc2tRdWV1ZSwgc2V0KTtcblxuICAgIGxldCBwcm90byA9IHNldFByb3RvO1xuICAgIGlmIChwcm90by5hZGQgIT09IHNldC5hZGQgfHwgcHJvdG8uZGVsZXRlICE9PSBzZXQuZGVsZXRlIHx8IHByb3RvLmNsZWFyICE9PSBzZXQuY2xlYXIpIHtcbiAgICAgIHByb3RvID0ge1xuICAgICAgICBhZGQ6IHNldC5hZGQsXG4gICAgICAgIGRlbGV0ZTogc2V0LmRlbGV0ZSxcbiAgICAgICAgY2xlYXI6IHNldC5jbGVhclxuICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXQuYWRkID0gZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHR5cGUgPSAnYWRkJztcbiAgICAgIGxldCBvbGRTaXplID0gc2V0LnNpemU7XG4gICAgICBsZXQgbWV0aG9kQ2FsbFJlc3VsdCA9IHByb3RvLmFkZC5hcHBseShzZXQsIGFyZ3VtZW50cyk7XG4gICAgICBsZXQgaGFzVmFsdWUgPSBzZXQuc2l6ZSA9PT0gb2xkU2l6ZTtcbiAgICAgIGlmICghaGFzVmFsdWUpIHtcbiAgICAgICAgb2JzZXJ2ZXIuYWRkQ2hhbmdlUmVjb3JkKHtcbiAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgIG9iamVjdDogc2V0LFxuICAgICAgICAgIHZhbHVlOiBBcnJheS5mcm9tKHNldCkucG9wKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2V0LmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBoYXNWYWx1ZSA9IHNldC5oYXMoYXJndW1lbnRzWzBdKTtcbiAgICAgIGxldCBtZXRob2RDYWxsUmVzdWx0ID0gcHJvdG8uZGVsZXRlLmFwcGx5KHNldCwgYXJndW1lbnRzKTtcbiAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICBvYnNlcnZlci5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxuICAgICAgICAgIG9iamVjdDogc2V0LFxuICAgICAgICAgIHZhbHVlOiBhcmd1bWVudHNbMF1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICB9O1xuXG4gICAgc2V0LmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1ldGhvZENhbGxSZXN1bHQgPSBwcm90by5jbGVhci5hcHBseShzZXQsIGFyZ3VtZW50cyk7XG4gICAgICBvYnNlcnZlci5hZGRDaGFuZ2VSZWNvcmQoe1xuICAgICAgICB0eXBlOiAnY2xlYXInLFxuICAgICAgICBvYmplY3Q6IHNldFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG9ic2VydmVyO1xuICB9XG59O1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZhYmxlKHRhcmdldE9yQ29uZmlnLCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgZnVuY3Rpb24gZGVjbyh0YXJnZXQsIGtleSwgZGVzY3JpcHRvciwgY29uZmlnKSB7XG4gICAgY29uc3QgaXNDbGFzc0RlY29yYXRvciA9IGtleSA9PT0gdW5kZWZpbmVkO1xuICAgIGlmIChpc0NsYXNzRGVjb3JhdG9yKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAga2V5ID0gdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgPyBjb25maWcgOiBjb25maWcubmFtZTtcbiAgICB9XG5cbiAgICBsZXQgaW5uZXJQcm9wZXJ0eU5hbWUgPSBgXyR7a2V5fWA7XG4gICAgY29uc3QgaW5uZXJQcm9wZXJ0eURlc2NyaXB0b3IgPSB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfTtcblxuICAgIGNvbnN0IGNhbGxiYWNrTmFtZSA9IGNvbmZpZyAmJiBjb25maWcuY2hhbmdlSGFuZGxlciB8fCBgJHtrZXl9Q2hhbmdlZGA7XG5cbiAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmluaXRpYWxpemVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlubmVyUHJvcGVydHlEZXNjcmlwdG9yLnZhbHVlID0gZGVzY3JpcHRvci5pbml0aWFsaXplcigpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZXNjcmlwdG9yID0ge307XG4gICAgfVxuXG4gICAgaWYgKCEoJ2VudW1lcmFibGUnIGluIGRlc2NyaXB0b3IpKSB7XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIGRlbGV0ZSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIGRlbGV0ZSBkZXNjcmlwdG9yLndyaXRhYmxlO1xuICAgIGRlbGV0ZSBkZXNjcmlwdG9yLmluaXRpYWxpemVyO1xuXG4gICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGlubmVyUHJvcGVydHlOYW1lLCBpbm5lclByb3BlcnR5RGVzY3JpcHRvcik7XG5cbiAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzW2lubmVyUHJvcGVydHlOYW1lXTtcbiAgICB9O1xuICAgIGRlc2NyaXB0b3Iuc2V0ID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICBsZXQgb2xkVmFsdWUgPSB0aGlzW2lubmVyUHJvcGVydHlOYW1lXTtcbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gb2xkVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzW2lubmVyUHJvcGVydHlOYW1lXSA9IG5ld1ZhbHVlO1xuICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBpbm5lclByb3BlcnR5TmFtZSwgeyBlbnVtZXJhYmxlOiBmYWxzZSB9KTtcblxuICAgICAgaWYgKHRoaXNbY2FsbGJhY2tOYW1lXSkge1xuICAgICAgICB0aGlzW2NhbGxiYWNrTmFtZV0obmV3VmFsdWUsIG9sZFZhbHVlLCBrZXkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZXNjcmlwdG9yLmdldC5kZXBlbmRlbmNpZXMgPSBbaW5uZXJQcm9wZXJ0eU5hbWVdO1xuXG4gICAgaWYgKGlzQ2xhc3NEZWNvcmF0b3IpIHtcbiAgICAgIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gKHQsIGssIGQpID0+IGRlY28odCwgaywgZCwgdGFyZ2V0T3JDb25maWcpO1xuICB9XG4gIHJldHVybiBkZWNvKHRhcmdldE9yQ29uZmlnLCBrZXksIGRlc2NyaXB0b3IpO1xufVxuXG5jb25zdCBzaWduYWxzID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25uZWN0QmluZGluZ1RvU2lnbmFsKGJpbmRpbmcsIG5hbWUpIHtcbiAgaWYgKCFzaWduYWxzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgc2lnbmFsc1tuYW1lXSA9IDA7XG4gIH1cbiAgYmluZGluZy5vYnNlcnZlUHJvcGVydHkoc2lnbmFscywgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWxCaW5kaW5ncyhuYW1lKSB7XG4gIGlmIChzaWduYWxzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgc2lnbmFsc1tuYW1lXSsrO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFxTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQWlPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///NDtI\n");

/***/ })

}]);